{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/allDialects.ts\nvar allDialects_exports = {};\n__export(allDialects_exports, {\n  bigquery: () => bigquery,\n  db2: () => db2,\n  db2i: () => db2i,\n  hive: () => hive,\n  mariadb: () => mariadb,\n  mysql: () => mysql,\n  n1ql: () => n1ql,\n  plsql: () => plsql,\n  postgresql: () => postgresql,\n  redshift: () => redshift,\n  singlestoredb: () => singlestoredb,\n  snowflake: () => snowflake,\n  spark: () => spark,\n  sql: () => sql,\n  sqlite: () => sqlite,\n  tidb: () => tidb,\n  transactsql: () => transactsql,\n  trino: () => trino\n});\n\n// src/expandPhrases.ts\nvar expandPhrases = phrases => phrases.flatMap(expandSinglePhrase);\nvar expandSinglePhrase = phrase => buildCombinations(parsePhrase(phrase)).map(stripExtraWhitespace);\nvar stripExtraWhitespace = text => text.replace(/ +/g, \" \").trim();\nvar parsePhrase = text => ({\n  type: \"mandatory_block\",\n  items: parseAlteration(text, 0)[0]\n});\nvar parseAlteration = (text, index, expectClosing) => {\n  const alterations = [];\n  while (text[index]) {\n    const [term, newIndex] = parseConcatenation(text, index);\n    alterations.push(term);\n    index = newIndex;\n    if (text[index] === \"|\") {\n      index++;\n    } else if (text[index] === \"}\" || text[index] === \"]\") {\n      if (expectClosing !== text[index]) {\n        throw new Error(`Unbalanced parenthesis in: ${text}`);\n      }\n      index++;\n      return [alterations, index];\n    } else if (index === text.length) {\n      if (expectClosing) {\n        throw new Error(`Unbalanced parenthesis in: ${text}`);\n      }\n      return [alterations, index];\n    } else {\n      throw new Error(`Unexpected \"${text[index]}\"`);\n    }\n  }\n  return [alterations, index];\n};\nvar parseConcatenation = (text, index) => {\n  const items = [];\n  while (true) {\n    const [term, newIndex] = parseTerm(text, index);\n    if (term) {\n      items.push(term);\n      index = newIndex;\n    } else {\n      break;\n    }\n  }\n  return items.length === 1 ? [items[0], index] : [{\n    type: \"concatenation\",\n    items\n  }, index];\n};\nvar parseTerm = (text, index) => {\n  if (text[index] === \"{\") {\n    return parseMandatoryBlock(text, index + 1);\n  } else if (text[index] === \"[\") {\n    return parseOptionalBlock(text, index + 1);\n  } else {\n    let word = \"\";\n    while (text[index] && /[A-Za-z0-9_ ]/.test(text[index])) {\n      word += text[index];\n      index++;\n    }\n    return [word, index];\n  }\n};\nvar parseMandatoryBlock = (text, index) => {\n  const [items, newIndex] = parseAlteration(text, index, \"}\");\n  return [{\n    type: \"mandatory_block\",\n    items\n  }, newIndex];\n};\nvar parseOptionalBlock = (text, index) => {\n  const [items, newIndex] = parseAlteration(text, index, \"]\");\n  return [{\n    type: \"optional_block\",\n    items\n  }, newIndex];\n};\nvar buildCombinations = node => {\n  if (typeof node === \"string\") {\n    return [node];\n  } else if (node.type === \"concatenation\") {\n    return node.items.map(buildCombinations).reduce(stringCombinations, [\"\"]);\n  } else if (node.type === \"mandatory_block\") {\n    return node.items.flatMap(buildCombinations);\n  } else if (node.type === \"optional_block\") {\n    return [\"\", ...node.items.flatMap(buildCombinations)];\n  } else {\n    throw new Error(`Unknown node type: ${node}`);\n  }\n};\nvar stringCombinations = (xs, ys) => {\n  const results = [];\n  for (const x of xs) {\n    for (const y of ys) {\n      results.push(x + y);\n    }\n  }\n  return results;\n};\n\n// src/lexer/token.ts\nvar TokenType = /* @__PURE__ */(TokenType2 => {\n  TokenType2[\"QUOTED_IDENTIFIER\"] = \"QUOTED_IDENTIFIER\";\n  TokenType2[\"IDENTIFIER\"] = \"IDENTIFIER\";\n  TokenType2[\"STRING\"] = \"STRING\";\n  TokenType2[\"VARIABLE\"] = \"VARIABLE\";\n  TokenType2[\"RESERVED_DATA_TYPE\"] = \"RESERVED_DATA_TYPE\";\n  TokenType2[\"RESERVED_PARAMETERIZED_DATA_TYPE\"] = \"RESERVED_PARAMETERIZED_DATA_TYPE\";\n  TokenType2[\"RESERVED_KEYWORD\"] = \"RESERVED_KEYWORD\";\n  TokenType2[\"RESERVED_FUNCTION_NAME\"] = \"RESERVED_FUNCTION_NAME\";\n  TokenType2[\"RESERVED_PHRASE\"] = \"RESERVED_PHRASE\";\n  TokenType2[\"RESERVED_SET_OPERATION\"] = \"RESERVED_SET_OPERATION\";\n  TokenType2[\"RESERVED_CLAUSE\"] = \"RESERVED_CLAUSE\";\n  TokenType2[\"RESERVED_SELECT\"] = \"RESERVED_SELECT\";\n  TokenType2[\"RESERVED_JOIN\"] = \"RESERVED_JOIN\";\n  TokenType2[\"ARRAY_IDENTIFIER\"] = \"ARRAY_IDENTIFIER\";\n  TokenType2[\"ARRAY_KEYWORD\"] = \"ARRAY_KEYWORD\";\n  TokenType2[\"CASE\"] = \"CASE\";\n  TokenType2[\"END\"] = \"END\";\n  TokenType2[\"WHEN\"] = \"WHEN\";\n  TokenType2[\"ELSE\"] = \"ELSE\";\n  TokenType2[\"THEN\"] = \"THEN\";\n  TokenType2[\"LIMIT\"] = \"LIMIT\";\n  TokenType2[\"BETWEEN\"] = \"BETWEEN\";\n  TokenType2[\"AND\"] = \"AND\";\n  TokenType2[\"OR\"] = \"OR\";\n  TokenType2[\"XOR\"] = \"XOR\";\n  TokenType2[\"OPERATOR\"] = \"OPERATOR\";\n  TokenType2[\"COMMA\"] = \"COMMA\";\n  TokenType2[\"ASTERISK\"] = \"ASTERISK\";\n  TokenType2[\"PROPERTY_ACCESS_OPERATOR\"] = \"PROPERTY_ACCESS_OPERATOR\";\n  TokenType2[\"OPEN_PAREN\"] = \"OPEN_PAREN\";\n  TokenType2[\"CLOSE_PAREN\"] = \"CLOSE_PAREN\";\n  TokenType2[\"LINE_COMMENT\"] = \"LINE_COMMENT\";\n  TokenType2[\"BLOCK_COMMENT\"] = \"BLOCK_COMMENT\";\n  TokenType2[\"DISABLE_COMMENT\"] = \"DISABLE_COMMENT\";\n  TokenType2[\"NUMBER\"] = \"NUMBER\";\n  TokenType2[\"NAMED_PARAMETER\"] = \"NAMED_PARAMETER\";\n  TokenType2[\"QUOTED_PARAMETER\"] = \"QUOTED_PARAMETER\";\n  TokenType2[\"NUMBERED_PARAMETER\"] = \"NUMBERED_PARAMETER\";\n  TokenType2[\"POSITIONAL_PARAMETER\"] = \"POSITIONAL_PARAMETER\";\n  TokenType2[\"CUSTOM_PARAMETER\"] = \"CUSTOM_PARAMETER\";\n  TokenType2[\"DELIMITER\"] = \"DELIMITER\";\n  TokenType2[\"EOF\"] = \"EOF\";\n  return TokenType2;\n})(TokenType || {});\nvar createEofToken = index => ({\n  type: \"EOF\" /* EOF */,\n  raw: \"\\xABEOF\\xBB\",\n  text: \"\\xABEOF\\xBB\",\n  start: index\n});\nvar EOF_TOKEN = createEofToken(Infinity);\nvar testToken = compareToken => token => token.type === compareToken.type && token.text === compareToken.text;\nvar isToken = {\n  ARRAY: testToken({\n    text: \"ARRAY\",\n    type: \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */\n  }),\n  BY: testToken({\n    text: \"BY\",\n    type: \"RESERVED_KEYWORD\" /* RESERVED_KEYWORD */\n  }),\n  SET: testToken({\n    text: \"SET\",\n    type: \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */\n  }),\n  STRUCT: testToken({\n    text: \"STRUCT\",\n    type: \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */\n  }),\n  WINDOW: testToken({\n    text: \"WINDOW\",\n    type: \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */\n  }),\n  VALUES: testToken({\n    text: \"VALUES\",\n    type: \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */\n  })\n};\nvar isReserved = type => type === \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */ || type === \"RESERVED_KEYWORD\" /* RESERVED_KEYWORD */ || type === \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */ || type === \"RESERVED_PHRASE\" /* RESERVED_PHRASE */ || type === \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */ || type === \"RESERVED_SELECT\" /* RESERVED_SELECT */ || type === \"RESERVED_SET_OPERATION\" /* RESERVED_SET_OPERATION */ || type === \"RESERVED_JOIN\" /* RESERVED_JOIN */ || type === \"ARRAY_KEYWORD\" /* ARRAY_KEYWORD */ || type === \"CASE\" /* CASE */ || type === \"END\" /* END */ || type === \"WHEN\" /* WHEN */ || type === \"ELSE\" /* ELSE */ || type === \"THEN\" /* THEN */ || type === \"LIMIT\" /* LIMIT */ || type === \"BETWEEN\" /* BETWEEN */ || type === \"AND\" /* AND */ || type === \"OR\" /* OR */ || type === \"XOR\" /* XOR */;\nvar isLogicalOperator = type => type === \"AND\" /* AND */ || type === \"OR\" /* OR */ || type === \"XOR\" /* XOR */;\n\n// src/languages/bigquery/bigquery.functions.ts\nvar functions = [\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions\n\"KEYS.NEW_KEYSET\", \"KEYS.ADD_KEY_FROM_RAW_BYTES\", \"AEAD.DECRYPT_BYTES\", \"AEAD.DECRYPT_STRING\", \"AEAD.ENCRYPT\", \"KEYS.KEYSET_CHAIN\", \"KEYS.KEYSET_FROM_JSON\", \"KEYS.KEYSET_TO_JSON\", \"KEYS.ROTATE_KEYSET\", \"KEYS.KEYSET_LENGTH\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions\n\"ANY_VALUE\", \"ARRAY_AGG\", \"AVG\", \"CORR\", \"COUNT\", \"COUNTIF\", \"COVAR_POP\", \"COVAR_SAMP\", \"MAX\", \"MIN\", \"ST_CLUSTERDBSCAN\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STRING_AGG\", \"SUM\", \"VAR_POP\", \"VAR_SAMP\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions\n\"ANY_VALUE\", \"ARRAY_AGG\", \"ARRAY_CONCAT_AGG\", \"AVG\", \"BIT_AND\", \"BIT_OR\", \"BIT_XOR\", \"COUNT\", \"COUNTIF\", \"LOGICAL_AND\", \"LOGICAL_OR\", \"MAX\", \"MIN\", \"STRING_AGG\", \"SUM\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions\n\"APPROX_COUNT_DISTINCT\", \"APPROX_QUANTILES\", \"APPROX_TOP_COUNT\", \"APPROX_TOP_SUM\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions\n// 'ARRAY',\n\"ARRAY_CONCAT\", \"ARRAY_LENGTH\", \"ARRAY_TO_STRING\", \"GENERATE_ARRAY\", \"GENERATE_DATE_ARRAY\", \"GENERATE_TIMESTAMP_ARRAY\", \"ARRAY_REVERSE\", \"OFFSET\", \"SAFE_OFFSET\", \"ORDINAL\", \"SAFE_ORDINAL\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions\n\"BIT_COUNT\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions\n// 'CASE',\n\"PARSE_BIGNUMERIC\", \"PARSE_NUMERIC\", \"SAFE_CAST\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions\n\"CURRENT_DATE\", \"EXTRACT\", \"DATE\", \"DATE_ADD\", \"DATE_SUB\", \"DATE_DIFF\", \"DATE_TRUNC\", \"DATE_FROM_UNIX_DATE\", \"FORMAT_DATE\", \"LAST_DAY\", \"PARSE_DATE\", \"UNIX_DATE\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions\n\"CURRENT_DATETIME\", \"DATETIME\", \"EXTRACT\", \"DATETIME_ADD\", \"DATETIME_SUB\", \"DATETIME_DIFF\", \"DATETIME_TRUNC\", \"FORMAT_DATETIME\", \"LAST_DAY\", \"PARSE_DATETIME\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions\n\"ERROR\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/federated_query_functions\n\"EXTERNAL_QUERY\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions\n\"S2_CELLIDFROMPOINT\", \"S2_COVERINGCELLIDS\", \"ST_ANGLE\", \"ST_AREA\", \"ST_ASBINARY\", \"ST_ASGEOJSON\", \"ST_ASTEXT\", \"ST_AZIMUTH\", \"ST_BOUNDARY\", \"ST_BOUNDINGBOX\", \"ST_BUFFER\", \"ST_BUFFERWITHTOLERANCE\", \"ST_CENTROID\", \"ST_CENTROID_AGG\", \"ST_CLOSESTPOINT\", \"ST_CLUSTERDBSCAN\", \"ST_CONTAINS\", \"ST_CONVEXHULL\", \"ST_COVEREDBY\", \"ST_COVERS\", \"ST_DIFFERENCE\", \"ST_DIMENSION\", \"ST_DISJOINT\", \"ST_DISTANCE\", \"ST_DUMP\", \"ST_DWITHIN\", \"ST_ENDPOINT\", \"ST_EQUALS\", \"ST_EXTENT\", \"ST_EXTERIORRING\", \"ST_GEOGFROM\", \"ST_GEOGFROMGEOJSON\", \"ST_GEOGFROMTEXT\", \"ST_GEOGFROMWKB\", \"ST_GEOGPOINT\", \"ST_GEOGPOINTFROMGEOHASH\", \"ST_GEOHASH\", \"ST_GEOMETRYTYPE\", \"ST_INTERIORRINGS\", \"ST_INTERSECTION\", \"ST_INTERSECTS\", \"ST_INTERSECTSBOX\", \"ST_ISCOLLECTION\", \"ST_ISEMPTY\", \"ST_LENGTH\", \"ST_MAKELINE\", \"ST_MAKEPOLYGON\", \"ST_MAKEPOLYGONORIENTED\", \"ST_MAXDISTANCE\", \"ST_NPOINTS\", \"ST_NUMGEOMETRIES\", \"ST_NUMPOINTS\", \"ST_PERIMETER\", \"ST_POINTN\", \"ST_SIMPLIFY\", \"ST_SNAPTOGRID\", \"ST_STARTPOINT\", \"ST_TOUCHES\", \"ST_UNION\", \"ST_UNION_AGG\", \"ST_WITHIN\", \"ST_X\", \"ST_Y\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions\n\"FARM_FINGERPRINT\", \"MD5\", \"SHA1\", \"SHA256\", \"SHA512\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions\n\"HLL_COUNT.INIT\", \"HLL_COUNT.MERGE\", \"HLL_COUNT.MERGE_PARTIAL\", \"HLL_COUNT.EXTRACT\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions\n\"MAKE_INTERVAL\", \"EXTRACT\", \"JUSTIFY_DAYS\", \"JUSTIFY_HOURS\", \"JUSTIFY_INTERVAL\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions\n\"JSON_EXTRACT\", \"JSON_QUERY\", \"JSON_EXTRACT_SCALAR\", \"JSON_VALUE\", \"JSON_EXTRACT_ARRAY\", \"JSON_QUERY_ARRAY\", \"JSON_EXTRACT_STRING_ARRAY\", \"JSON_VALUE_ARRAY\", \"TO_JSON_STRING\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions\n\"ABS\", \"SIGN\", \"IS_INF\", \"IS_NAN\", \"IEEE_DIVIDE\", \"RAND\", \"SQRT\", \"POW\", \"POWER\", \"EXP\", \"LN\", \"LOG\", \"LOG10\", \"GREATEST\", \"LEAST\", \"DIV\", \"SAFE_DIVIDE\", \"SAFE_MULTIPLY\", \"SAFE_NEGATE\", \"SAFE_ADD\", \"SAFE_SUBTRACT\", \"MOD\", \"ROUND\", \"TRUNC\", \"CEIL\", \"CEILING\", \"FLOOR\", \"COS\", \"COSH\", \"ACOS\", \"ACOSH\", \"SIN\", \"SINH\", \"ASIN\", \"ASINH\", \"TAN\", \"TANH\", \"ATAN\", \"ATANH\", \"ATAN2\", \"RANGE_BUCKET\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions\n\"FIRST_VALUE\", \"LAST_VALUE\", \"NTH_VALUE\", \"LEAD\", \"LAG\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions\n\"NET.IP_FROM_STRING\", \"NET.SAFE_IP_FROM_STRING\", \"NET.IP_TO_STRING\", \"NET.IP_NET_MASK\", \"NET.IP_TRUNC\", \"NET.IPV4_FROM_INT64\", \"NET.IPV4_TO_INT64\", \"NET.HOST\", \"NET.PUBLIC_SUFFIX\", \"NET.REG_DOMAIN\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions\n\"RANK\", \"DENSE_RANK\", \"PERCENT_RANK\", \"CUME_DIST\", \"NTILE\", \"ROW_NUMBER\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions\n\"SESSION_USER\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions\n\"CORR\", \"COVAR_POP\", \"COVAR_SAMP\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STDDEV\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions\n\"ASCII\", \"BYTE_LENGTH\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHR\", \"CODE_POINTS_TO_BYTES\", \"CODE_POINTS_TO_STRING\", \"CONCAT\", \"CONTAINS_SUBSTR\", \"ENDS_WITH\", \"FORMAT\", \"FROM_BASE32\", \"FROM_BASE64\", \"FROM_HEX\", \"INITCAP\", \"INSTR\", \"LEFT\", \"LENGTH\", \"LPAD\", \"LOWER\", \"LTRIM\", \"NORMALIZE\", \"NORMALIZE_AND_CASEFOLD\", \"OCTET_LENGTH\", \"REGEXP_CONTAINS\", \"REGEXP_EXTRACT\", \"REGEXP_EXTRACT_ALL\", \"REGEXP_INSTR\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REPLACE\", \"REPEAT\", \"REVERSE\", \"RIGHT\", \"RPAD\", \"RTRIM\", \"SAFE_CONVERT_BYTES_TO_STRING\", \"SOUNDEX\", \"SPLIT\", \"STARTS_WITH\", \"STRPOS\", \"SUBSTR\", \"SUBSTRING\", \"TO_BASE32\", \"TO_BASE64\", \"TO_CODE_POINTS\", \"TO_HEX\", \"TRANSLATE\", \"TRIM\", \"UNICODE\", \"UPPER\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions\n\"CURRENT_TIME\", \"TIME\", \"EXTRACT\", \"TIME_ADD\", \"TIME_SUB\", \"TIME_DIFF\", \"TIME_TRUNC\", \"FORMAT_TIME\", \"PARSE_TIME\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions\n\"CURRENT_TIMESTAMP\", \"EXTRACT\", \"STRING\", \"TIMESTAMP\", \"TIMESTAMP_ADD\", \"TIMESTAMP_SUB\", \"TIMESTAMP_DIFF\", \"TIMESTAMP_TRUNC\", \"FORMAT_TIMESTAMP\", \"PARSE_TIMESTAMP\", \"TIMESTAMP_SECONDS\", \"TIMESTAMP_MILLIS\", \"TIMESTAMP_MICROS\", \"UNIX_SECONDS\", \"UNIX_MILLIS\", \"UNIX_MICROS\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/uuid_functions\n\"GENERATE_UUID\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions\n\"COALESCE\", \"IF\", \"IFNULL\", \"NULLIF\",\n// https://cloud.google.com/bigquery/docs/reference/legacy-sql\n// legacyAggregate\n\"AVG\", \"BIT_AND\", \"BIT_OR\", \"BIT_XOR\", \"CORR\", \"COUNT\", \"COVAR_POP\", \"COVAR_SAMP\", \"EXACT_COUNT_DISTINCT\", \"FIRST\", \"GROUP_CONCAT\", \"GROUP_CONCAT_UNQUOTED\", \"LAST\", \"MAX\", \"MIN\", \"NEST\", \"NTH\", \"QUANTILES\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"SUM\", \"TOP\", \"UNIQUE\", \"VARIANCE\", \"VAR_POP\", \"VAR_SAMP\",\n// legacyBitwise\n\"BIT_COUNT\",\n// legacyCasting\n\"BOOLEAN\", \"BYTES\", \"CAST\", \"FLOAT\", \"HEX_STRING\", \"INTEGER\", \"STRING\",\n// legacyComparison\n// expr 'IN',\n\"COALESCE\", \"GREATEST\", \"IFNULL\", \"IS_INF\", \"IS_NAN\", \"IS_EXPLICITLY_DEFINED\", \"LEAST\", \"NVL\",\n// legacyDatetime\n\"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"DATE\", \"DATE_ADD\", \"DATEDIFF\", \"DAY\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"FORMAT_UTC_USEC\", \"HOUR\", \"MINUTE\", \"MONTH\", \"MSEC_TO_TIMESTAMP\", \"NOW\", \"PARSE_UTC_USEC\", \"QUARTER\", \"SEC_TO_TIMESTAMP\", \"SECOND\", \"STRFTIME_UTC_USEC\", \"TIME\", \"TIMESTAMP\", \"TIMESTAMP_TO_MSEC\", \"TIMESTAMP_TO_SEC\", \"TIMESTAMP_TO_USEC\", \"USEC_TO_TIMESTAMP\", \"UTC_USEC_TO_DAY\", \"UTC_USEC_TO_HOUR\", \"UTC_USEC_TO_MONTH\", \"UTC_USEC_TO_WEEK\", \"UTC_USEC_TO_YEAR\", \"WEEK\", \"YEAR\",\n// legacyIp\n\"FORMAT_IP\", \"PARSE_IP\", \"FORMAT_PACKED_IP\", \"PARSE_PACKED_IP\",\n// legacyJson\n\"JSON_EXTRACT\", \"JSON_EXTRACT_SCALAR\",\n// legacyMath\n\"ABS\", \"ACOS\", \"ACOSH\", \"ASIN\", \"ASINH\", \"ATAN\", \"ATANH\", \"ATAN2\", \"CEIL\", \"COS\", \"COSH\", \"DEGREES\", \"EXP\", \"FLOOR\", \"LN\", \"LOG\", \"LOG2\", \"LOG10\", \"PI\", \"POW\", \"RADIANS\", \"RAND\", \"ROUND\", \"SIN\", \"SINH\", \"SQRT\", \"TAN\", \"TANH\",\n// legacyRegex\n\"REGEXP_MATCH\", \"REGEXP_EXTRACT\", \"REGEXP_REPLACE\",\n// legacyString\n\"CONCAT\",\n// expr CONTAINS 'str'\n\"INSTR\", \"LEFT\", \"LENGTH\", \"LOWER\", \"LPAD\", \"LTRIM\", \"REPLACE\", \"RIGHT\", \"RPAD\", \"RTRIM\", \"SPLIT\", \"SUBSTR\", \"UPPER\",\n// legacyTableWildcard\n\"TABLE_DATE_RANGE\", \"TABLE_DATE_RANGE_STRICT\", \"TABLE_QUERY\",\n// legacyUrl\n\"HOST\", \"DOMAIN\", \"TLD\",\n// legacyWindow\n\"AVG\", \"COUNT\", \"MAX\", \"MIN\", \"STDDEV\", \"SUM\", \"CUME_DIST\", \"DENSE_RANK\", \"FIRST_VALUE\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"NTH_VALUE\", \"NTILE\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"RANK\", \"RATIO_TO_REPORT\", \"ROW_NUMBER\",\n// legacyMisc\n\"CURRENT_USER\", \"EVERY\", \"FROM_BASE64\", \"HASH\", \"FARM_FINGERPRINT\", \"IF\", \"POSITION\", \"SHA1\", \"SOME\", \"TO_BASE64\",\n// other\n\"BQ.JOBS.CANCEL\", \"BQ.REFRESH_MATERIALIZED_VIEW\",\n// ddl\n\"OPTIONS\",\n// pivot\n\"PIVOT\", \"UNPIVOT\"];\n\n// src/languages/bigquery/bigquery.keywords.ts\nvar keywords = [\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#reserved_keywords\n\"ALL\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"ASSERT_ROWS_MODIFIED\", \"AT\", \"BETWEEN\", \"BY\", \"CASE\", \"CAST\", \"COLLATE\", \"CONTAINS\", \"CREATE\", \"CROSS\", \"CUBE\", \"CURRENT\", \"DEFAULT\", \"DEFINE\", \"DESC\", \"DISTINCT\", \"ELSE\", \"END\", \"ENUM\", \"ESCAPE\", \"EXCEPT\", \"EXCLUDE\", \"EXISTS\", \"EXTRACT\", \"FALSE\", \"FETCH\", \"FOLLOWING\", \"FOR\", \"FROM\", \"FULL\", \"GROUP\", \"GROUPING\", \"GROUPS\", \"HASH\", \"HAVING\", \"IF\", \"IGNORE\", \"IN\", \"INNER\", \"INTERSECT\", \"INTO\", \"IS\", \"JOIN\", \"LATERAL\", \"LEFT\", \"LIMIT\", \"LOOKUP\", \"MERGE\", \"NATURAL\", \"NEW\", \"NO\", \"NOT\", \"NULL\", \"NULLS\", \"OF\", \"ON\", \"OR\", \"ORDER\", \"OUTER\", \"OVER\", \"PARTITION\", \"PRECEDING\", \"PROTO\", \"RANGE\", \"RECURSIVE\", \"RESPECT\", \"RIGHT\", \"ROLLUP\", \"ROWS\", \"SELECT\", \"SET\", \"SOME\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TO\", \"TREAT\", \"TRUE\", \"UNBOUNDED\", \"UNION\", \"UNNEST\", \"USING\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\", \"WITHIN\",\n// misc\n\"SAFE\",\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n\"LIKE\",\n// CREATE TABLE LIKE\n\"COPY\",\n// CREATE TABLE COPY\n\"CLONE\",\n// CREATE TABLE CLONE\n\"IN\", \"OUT\", \"INOUT\", \"RETURNS\", \"LANGUAGE\", \"CASCADE\", \"RESTRICT\", \"DETERMINISTIC\"];\nvar dataTypes = [\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\"ARRAY\",\n// parametric, ARRAY<T>\n\"BOOL\", \"BYTES\",\n// parameterised, BYTES(Length)\n\"DATE\", \"DATETIME\", \"GEOGRAPHY\", \"INTERVAL\", \"INT64\", \"INT\", \"SMALLINT\", \"INTEGER\", \"BIGINT\", \"TINYINT\", \"BYTEINT\", \"NUMERIC\",\n// parameterised, NUMERIC(Precision[, Scale])\n\"DECIMAL\",\n// parameterised, DECIMAL(Precision[, Scale])\n\"BIGNUMERIC\",\n// parameterised, BIGNUMERIC(Precision[, Scale])\n\"BIGDECIMAL\",\n// parameterised, BIGDECIMAL(Precision[, Scale])\n\"FLOAT64\", \"STRING\",\n// parameterised, STRING(Length)\n\"STRUCT\",\n// parametric, STRUCT<T>\n\"TIME\", \"TIMEZONE\"];\n\n// src/languages/bigquery/bigquery.formatter.ts\nvar reservedSelect = expandPhrases([\"SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]\"]);\nvar reservedClauses = expandPhrases([\n// Queries: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"QUALIFY\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\", \"OMIT RECORD IF\",\n// legacy\n// Data modification: https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax\n// - insert:\n\"INSERT [INTO]\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE [INTO]\", \"WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]\", \"UPDATE SET\", \"CLUSTER BY\", \"FOR SYSTEM_TIME AS OF\",\n// CREATE SNAPSHOT TABLE\n\"WITH CONNECTION\", \"WITH PARTITION COLUMNS\", \"REMOTE WITH CONNECTION\"]);\nvar standardOnelineClauses = expandPhrases([\"CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses = expandPhrases([\n// - create:\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n\"CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE [FROM]\",\n// - drop table:\n\"DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE [IF EXISTS]\", \"ADD COLUMN [IF NOT EXISTS]\", \"DROP COLUMN [IF EXISTS]\", \"RENAME TO\", \"ALTER COLUMN [IF EXISTS]\", \"SET DEFAULT COLLATE\",\n// for alter column\n\"SET OPTIONS\",\n// for alter column\n\"DROP NOT NULL\",\n// for alter column\n\"SET DATA TYPE\",\n// for alter column\n// - alter schema\n\"ALTER SCHEMA [IF EXISTS]\",\n// - alter view\n\"ALTER [MATERIALIZED] VIEW [IF EXISTS]\",\n// - alter bi_capacity\n\"ALTER BI_CAPACITY\",\n// - truncate:\n\"TRUNCATE TABLE\",\n// - create schema\n\"CREATE SCHEMA [IF NOT EXISTS]\", \"DEFAULT COLLATE\",\n// stored procedures\n\"CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]\", \"CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]\",\n// row access policy\n\"CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]\", \"GRANT TO\", \"FILTER USING\",\n// capacity\n\"CREATE CAPACITY\", \"AS JSON\",\n// reservation\n\"CREATE RESERVATION\",\n// assignment\n\"CREATE ASSIGNMENT\",\n// search index\n\"CREATE SEARCH INDEX [IF NOT EXISTS]\",\n// drop\n\"DROP SCHEMA [IF EXISTS]\", \"DROP [MATERIALIZED] VIEW [IF EXISTS]\", \"DROP [TABLE] FUNCTION [IF EXISTS]\", \"DROP PROCEDURE [IF EXISTS]\", \"DROP ROW ACCESS POLICY\", \"DROP ALL ROW ACCESS POLICIES\", \"DROP CAPACITY [IF EXISTS]\", \"DROP RESERVATION [IF EXISTS]\", \"DROP ASSIGNMENT [IF EXISTS]\", \"DROP SEARCH INDEX [IF EXISTS]\", \"DROP [IF EXISTS]\",\n// DCL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language\n\"GRANT\", \"REVOKE\",\n// Script, https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting\n\"DECLARE\", \"EXECUTE IMMEDIATE\", \"LOOP\", \"END LOOP\", \"REPEAT\", \"END REPEAT\", \"WHILE\", \"END WHILE\", \"BREAK\", \"LEAVE\", \"CONTINUE\", \"ITERATE\", \"FOR\", \"END FOR\", \"BEGIN\", \"BEGIN TRANSACTION\", \"COMMIT TRANSACTION\", \"ROLLBACK TRANSACTION\", \"RAISE\", \"RETURN\", \"CALL\",\n// Debug, https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements\n\"ASSERT\",\n// Other, https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements\n\"EXPORT DATA\"]);\nvar reservedSetOperations = expandPhrases([\"UNION {ALL | DISTINCT}\", \"EXCEPT DISTINCT\", \"INTERSECT DISTINCT\"]);\nvar reservedJoins = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\"]);\nvar reservedPhrases = expandPhrases([\n// https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#tablesample_operator\n\"TABLESAMPLE SYSTEM\",\n// From DDL: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n\"ANY TYPE\", \"ALL COLUMNS\", \"NOT DETERMINISTIC\",\n// inside window definitions\n\"{ROWS | RANGE} BETWEEN\",\n// comparison operator\n\"IS [NOT] DISTINCT FROM\"]);\nvar bigquery = {\n  name: \"bigquery\",\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...tabularOnelineClauses, ...standardOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    extraParens: [\"[]\"],\n    stringTypes: [\n    // The triple-quoted strings are listed first, so they get matched first.\n    // Otherwise the first two quotes of \"\"\" will get matched as an empty \"\" string.\n    {\n      quote: '\"\"\"..\"\"\"',\n      prefixes: [\"R\", \"B\", \"RB\", \"BR\"]\n    }, {\n      quote: \"'''..'''\",\n      prefixes: [\"R\", \"B\", \"RB\", \"BR\"]\n    }, '\"\"-bs', \"''-bs\", {\n      quote: '\"\"-raw',\n      prefixes: [\"R\", \"B\", \"RB\", \"BR\"],\n      requirePrefix: true\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"R\", \"B\", \"RB\", \"BR\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    identChars: {\n      dashes: true\n    },\n    paramTypes: {\n      positional: true,\n      named: [\"@\"],\n      quoted: [\"@\"]\n    },\n    variableTypes: [{\n      regex: String.raw`@@\\w+`\n    }],\n    lineCommentTypes: [\"--\", \"#\"],\n    operators: [\"&\", \"|\", \"^\", \"~\", \">>\", \"<<\", \"||\", \"=>\"],\n    postProcess\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses\n  }\n};\nfunction postProcess(tokens) {\n  return detectArraySubscripts(combineParameterizedTypes(tokens));\n}\nfunction detectArraySubscripts(tokens) {\n  let prevToken = EOF_TOKEN;\n  return tokens.map(token => {\n    if (token.text === \"OFFSET\" && prevToken.text === \"[\") {\n      prevToken = token;\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */\n      });\n    } else {\n      prevToken = token;\n      return token;\n    }\n  });\n}\nfunction combineParameterizedTypes(tokens) {\n  var _a;\n  const processed = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if ((isToken.ARRAY(token) || isToken.STRUCT(token)) && ((_a = tokens[i + 1]) == null ? void 0 : _a.text) === \"<\") {\n      const endIndex = findClosingAngleBracketIndex(tokens, i + 1);\n      const typeDefTokens = tokens.slice(i, endIndex + 1);\n      processed.push({\n        type: \"IDENTIFIER\" /* IDENTIFIER */,\n        raw: typeDefTokens.map(formatTypeDefToken(\"raw\")).join(\"\"),\n        text: typeDefTokens.map(formatTypeDefToken(\"text\")).join(\"\"),\n        start: token.start\n      });\n      i = endIndex;\n    } else {\n      processed.push(token);\n    }\n  }\n  return processed;\n}\nvar formatTypeDefToken = key => token => {\n  if (token.type === \"IDENTIFIER\" /* IDENTIFIER */ || token.type === \"COMMA\" /* COMMA */) {\n    return token[key] + \" \";\n  } else {\n    return token[key];\n  }\n};\nfunction findClosingAngleBracketIndex(tokens, startIndex) {\n  let level = 0;\n  for (let i = startIndex; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.text === \"<\") {\n      level++;\n    } else if (token.text === \">\") {\n      level--;\n    } else if (token.text === \">>\") {\n      level -= 2;\n    }\n    if (level === 0) {\n      return i;\n    }\n  }\n  return tokens.length - 1;\n}\n\n// src/languages/db2/db2.functions.ts\nvar functions2 = [\n// https://www.ibm.com/docs/en/db2/11.5?topic=bif-aggregate-functions\n\"ARRAY_AGG\", \"AVG\", \"CORRELATION\", \"COUNT\", \"COUNT_BIG\", \"COVARIANCE\", \"COVARIANCE_SAMP\", \"CUME_DIST\", \"GROUPING\", \"LISTAGG\", \"MAX\", \"MEDIAN\", \"MIN\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERCENT_RANK\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_ICPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\", \"STDDEV\", \"STDDEV_SAMP\", \"SUM\", \"VARIANCE\", \"VARIANCE_SAMP\", \"XMLAGG\", \"XMLGROUP\",\n// https://www.ibm.com/docs/en/db2/11.5?topic=bif-scalar-functions\n\"ABS\", \"ABSVAL\", \"ACOS\", \"ADD_DAYS\", \"ADD_HOURS\", \"ADD_MINUTES\", \"ADD_MONTHS\", \"ADD_SECONDS\", \"ADD_YEARS\", \"AGE\", \"ARRAY_DELETE\", \"ARRAY_FIRST\", \"ARRAY_LAST\", \"ARRAY_NEXT\", \"ARRAY_PRIOR\", \"ASCII\", \"ASCII_STR\", \"ASIN\", \"ATAN\", \"ATAN2\", \"ATANH\", \"BITAND\", \"BITANDNOT\", \"BITOR\", \"BITXOR\", \"BITNOT\", \"BPCHAR\", \"BSON_TO_JSON\", \"BTRIM\", \"CARDINALITY\", \"CEILING\", \"CEIL\", \"CHARACTER_LENGTH\", \"CHR\", \"COALESCE\", \"COLLATION_KEY\", \"COLLATION_KEY_BIT\", \"COMPARE_DECFLOAT\", \"CONCAT\", \"COS\", \"COSH\", \"COT\", \"CURSOR_ROWCOUNT\", \"DATAPARTITIONNUM\", \"DATE_PART\", \"DATE_TRUNC\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFWEEK_ISO\", \"DAYOFYEAR\", \"DAYS\", \"DAYS_BETWEEN\", \"DAYS_TO_END_OF_MONTH\", \"DBPARTITIONNUM\", \"DECFLOAT\", \"DECFLOAT_FORMAT\", \"DECODE\", \"DECRYPT_BIN\", \"DECRYPT_CHAR\", \"DEGREES\", \"DEREF\", \"DIFFERENCE\", \"DIGITS\", \"DOUBLE_PRECISION\", \"EMPTY_BLOB\", \"EMPTY_CLOB\", \"EMPTY_DBCLOB\", \"EMPTY_NCLOB\", \"ENCRYPT\", \"EVENT_MON_STATE\", \"EXP\", \"EXTRACT\", \"FIRST_DAY\", \"FLOOR\", \"FROM_UTC_TIMESTAMP\", \"GENERATE_UNIQUE\", \"GETHINT\", \"GREATEST\", \"HASH\", \"HASH4\", \"HASH8\", \"HASHEDVALUE\", \"HEX\", \"HEXTORAW\", \"HOUR\", \"HOURS_BETWEEN\", \"IDENTITY_VAL_LOCAL\", \"IFNULL\", \"INITCAP\", \"INSERT\", \"INSTR\", \"INSTR2\", \"INSTR4\", \"INSTRB\", \"INTNAND\", \"INTNOR\", \"INTNXOR\", \"INTNNOT\", \"ISNULL\", \"JSON_ARRAY\", \"JSON_OBJECT\", \"JSON_QUERY\", \"JSON_TO_BSON\", \"JSON_VALUE\", \"JULIAN_DAY\", \"LAST_DAY\", \"LCASE\", \"LEAST\", \"LEFT\", \"LENGTH\", \"LENGTH2\", \"LENGTH4\", \"LENGTHB\", \"LN\", \"LOCATE\", \"LOCATE_IN_STRING\", \"LOG10\", \"LONG_VARCHAR\", \"LONG_VARGRAPHIC\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MAX\", \"MAX_CARDINALITY\", \"MICROSECOND\", \"MIDNIGHT_SECONDS\", \"MIN\", \"MINUTE\", \"MINUTES_BETWEEN\", \"MOD\", \"MONTH\", \"MONTHNAME\", \"MONTHS_BETWEEN\", \"MULTIPLY_ALT\", \"NEXT_DAY\", \"NEXT_MONTH\", \"NEXT_QUARTER\", \"NEXT_WEEK\", \"NEXT_YEAR\", \"NORMALIZE_DECFLOAT\", \"NOW\", \"NULLIF\", \"NVL\", \"NVL2\", \"OCTET_LENGTH\", \"OVERLAY\", \"PARAMETER\", \"POSITION\", \"POSSTR\", \"POW\", \"POWER\", \"QUANTIZE\", \"QUARTER\", \"QUOTE_IDENT\", \"QUOTE_LITERAL\", \"RADIANS\", \"RAISE_ERROR\", \"RAND\", \"RANDOM\", \"RAWTOHEX\", \"REC2XML\", \"REGEXP_COUNT\", \"REGEXP_EXTRACT\", \"REGEXP_INSTR\", \"REGEXP_LIKE\", \"REGEXP_MATCH_COUNT\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REPEAT\", \"REPLACE\", \"RID\", \"RID_BIT\", \"RIGHT\", \"ROUND\", \"ROUND_TIMESTAMP\", \"RPAD\", \"RTRIM\", \"SECLABEL\", \"SECLABEL_BY_NAME\", \"SECLABEL_TO_CHAR\", \"SECOND\", \"SECONDS_BETWEEN\", \"SIGN\", \"SIN\", \"SINH\", \"SOUNDEX\", \"SPACE\", \"SQRT\", \"STRIP\", \"STRLEFT\", \"STRPOS\", \"STRRIGHT\", \"SUBSTR\", \"SUBSTR2\", \"SUBSTR4\", \"SUBSTRB\", \"SUBSTRING\", \"TABLE_NAME\", \"TABLE_SCHEMA\", \"TAN\", \"TANH\", \"THIS_MONTH\", \"THIS_QUARTER\", \"THIS_WEEK\", \"THIS_YEAR\", \"TIMESTAMP_FORMAT\", \"TIMESTAMP_ISO\", \"TIMESTAMPDIFF\", \"TIMEZONE\", \"TO_CHAR\", \"TO_CLOB\", \"TO_DATE\", \"TO_HEX\", \"TO_MULTI_BYTE\", \"TO_NCHAR\", \"TO_NCLOB\", \"TO_NUMBER\", \"TO_SINGLE_BYTE\", \"TO_TIMESTAMP\", \"TO_UTC_TIMESTAMP\", \"TOTALORDER\", \"TRANSLATE\", \"TRIM\", \"TRIM_ARRAY\", \"TRUNC_TIMESTAMP\", \"TRUNCATE\", \"TRUNC\", \"TYPE_ID\", \"TYPE_NAME\", \"TYPE_SCHEMA\", \"UCASE\", \"UNICODE_STR\", \"UPPER\", \"VALUE\", \"VARCHAR_BIT_FORMAT\", \"VARCHAR_FORMAT\", \"VARCHAR_FORMAT_BIT\", \"VERIFY_GROUP_FOR_USER\", \"VERIFY_ROLE_FOR_USER\", \"VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER\", \"WEEK\", \"WEEK_ISO\", \"WEEKS_BETWEEN\", \"WIDTH_BUCKET\", \"XMLATTRIBUTES\", \"XMLCOMMENT\", \"XMLCONCAT\", \"XMLDOCUMENT\", \"XMLELEMENT\", \"XMLFOREST\", \"XMLNAMESPACES\", \"XMLPARSE\", \"XMLPI\", \"XMLQUERY\", \"XMLROW\", \"XMLSERIALIZE\", \"XMLTEXT\", \"XMLVALIDATE\", \"XMLXSROBJECTID\", \"XSLTRANSFORM\", \"YEAR\", \"YEARS_BETWEEN\", \"YMD_BETWEEN\",\n// https://www.ibm.com/docs/en/db2/11.5?topic=bif-table-functions\n\"BASE_TABLE\", \"JSON_TABLE\", \"UNNEST\", \"XMLTABLE\",\n// https://www.ibm.com/docs/en/db2/11.5?topic=expressions-olap-specification\n// Additional function names not already present in the aggregate functions list\n\"RANK\", \"DENSE_RANK\", \"NTILE\", \"LAG\", \"LEAD\", \"ROW_NUMBER\", \"FIRST_VALUE\", \"LAST_VALUE\", \"NTH_VALUE\", \"RATIO_TO_REPORT\",\n// Type casting\n\"CAST\"];\n\n// src/languages/db2/db2.keywords.ts\nvar keywords2 = [\n// https://www.ibm.com/docs/en/db2/11.5?topic=sql-reserved-schema-names-reserved-words\n\"ACTIVATE\", \"ADD\", \"AFTER\", \"ALIAS\", \"ALL\", \"ALLOCATE\", \"ALLOW\", \"ALTER\", \"AND\", \"ANY\", \"AS\", \"ASENSITIVE\", \"ASSOCIATE\", \"ASUTIME\", \"AT\", \"ATTRIBUTES\", \"AUDIT\", \"AUTHORIZATION\", \"AUX\", \"AUXILIARY\", \"BEFORE\", \"BEGIN\", \"BETWEEN\", \"BINARY\", \"BUFFERPOOL\", \"BY\", \"CACHE\", \"CALL\", \"CALLED\", \"CAPTURE\", \"CARDINALITY\", \"CASCADED\", \"CASE\", \"CAST\", \"CHECK\", \"CLONE\", \"CLOSE\", \"CLUSTER\", \"COLLECTION\", \"COLLID\", \"COLUMN\", \"COMMENT\", \"COMMIT\", \"CONCAT\", \"CONDITION\", \"CONNECT\", \"CONNECTION\", \"CONSTRAINT\", \"CONTAINS\", \"CONTINUE\", \"COUNT\", \"COUNT_BIG\", \"CREATE\", \"CROSS\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_LC_CTYPE\", \"CURRENT_PATH\", \"CURRENT_SCHEMA\", \"CURRENT_SERVER\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"CURRENT_USER\", \"CURSOR\", \"CYCLE\", \"DATA\", \"DATABASE\", \"DATAPARTITIONNAME\", \"DATAPARTITIONNUM\", \"DAY\", \"DAYS\", \"DB2GENERAL\", \"DB2GENRL\", \"DB2SQL\", \"DBINFO\", \"DBPARTITIONNAME\", \"DBPARTITIONNUM\", \"DEALLOCATE\", \"DECLARE\", \"DEFAULT\", \"DEFAULTS\", \"DEFINITION\", \"DELETE\", \"DENSERANK\", \"DENSE_RANK\", \"DESCRIBE\", \"DESCRIPTOR\", \"DETERMINISTIC\", \"DIAGNOSTICS\", \"DISABLE\", \"DISALLOW\", \"DISCONNECT\", \"DISTINCT\", \"DO\", \"DOCUMENT\", \"DROP\", \"DSSIZE\", \"DYNAMIC\", \"EACH\", \"EDITPROC\", \"ELSE\", \"ELSEIF\", \"ENABLE\", \"ENCODING\", \"ENCRYPTION\", \"END\", \"END-EXEC\", \"ENDING\", \"ERASE\", \"ESCAPE\", \"EVERY\", \"EXCEPT\", \"EXCEPTION\", \"EXCLUDING\", \"EXCLUSIVE\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXPLAIN\", \"EXTENDED\", \"EXTERNAL\", \"EXTRACT\", \"FENCED\", \"FETCH\", \"FIELDPROC\", \"FILE\", \"FINAL\", \"FIRST1\", \"FOR\", \"FOREIGN\", \"FREE\", \"FROM\", \"FULL\", \"FUNCTION\", \"GENERAL\", \"GENERATED\", \"GET\", \"GLOBAL\", \"GO\", \"GOTO\", \"GRANT\", \"GRAPHIC\", \"GROUP\", \"HANDLER\", \"HASH\", \"HASHED_VALUE\", \"HAVING\", \"HINT\", \"HOLD\", \"HOUR\", \"HOURS\", \"IDENTITY\", \"IF\", \"IMMEDIATE\", \"IMPORT\", \"IN\", \"INCLUDING\", \"INCLUSIVE\", \"INCREMENT\", \"INDEX\", \"INDICATOR\", \"INDICATORS\", \"INF\", \"INFINITY\", \"INHERIT\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"INTEGRITY\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"ISOBID\", \"ISOLATION\", \"ITERATE\", \"JAR\", \"JAVA\", \"JOIN\", \"KEEP\", \"KEY\", \"LABEL\", \"LANGUAGE\", \"LAST3\", \"LATERAL\", \"LC_CTYPE\", \"LEAVE\", \"LEFT\", \"LIKE\", \"LIMIT\", \"LINKTYPE\", \"LOCAL\", \"LOCALDATE\", \"LOCALE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATOR\", \"LOCATORS\", \"LOCK\", \"LOCKMAX\", \"LOCKSIZE\", \"LOOP\", \"MAINTAINED\", \"MATERIALIZED\", \"MAXVALUE\", \"MICROSECOND\", \"MICROSECONDS\", \"MINUTE\", \"MINUTES\", \"MINVALUE\", \"MODE\", \"MODIFIES\", \"MONTH\", \"MONTHS\", \"NAN\", \"NEW\", \"NEW_TABLE\", \"NEXTVAL\", \"NO\", \"NOCACHE\", \"NOCYCLE\", \"NODENAME\", \"NODENUMBER\", \"NOMAXVALUE\", \"NOMINVALUE\", \"NONE\", \"NOORDER\", \"NORMALIZED\", \"NOT2\", \"NOTNULL\", \"NULL\", \"NULLS\", \"NUMPARTS\", \"OBID\", \"OF\", \"OFF\", \"OFFSET\", \"OLD\", \"OLD_TABLE\", \"ON\", \"OPEN\", \"OPTIMIZATION\", \"OPTIMIZE\", \"OPTION\", \"OR\", \"ORDER\", \"OUT\", \"OUTER\", \"OVER\", \"OVERRIDING\", \"PACKAGE\", \"PADDED\", \"PAGESIZE\", \"PARAMETER\", \"PART\", \"PARTITION\", \"PARTITIONED\", \"PARTITIONING\", \"PARTITIONS\", \"PASSWORD\", \"PATH\", \"PERCENT\", \"PIECESIZE\", \"PLAN\", \"POSITION\", \"PRECISION\", \"PREPARE\", \"PREVVAL\", \"PRIMARY\", \"PRIQTY\", \"PRIVILEGES\", \"PROCEDURE\", \"PROGRAM\", \"PSID\", \"PUBLIC\", \"QUERY\", \"QUERYNO\", \"RANGE\", \"RANK\", \"READ\", \"READS\", \"RECOVERY\", \"REFERENCES\", \"REFERENCING\", \"REFRESH\", \"RELEASE\", \"RENAME\", \"REPEAT\", \"RESET\", \"RESIGNAL\", \"RESTART\", \"RESTRICT\", \"RESULT\", \"RESULT_SET_LOCATOR\", \"RETURN\", \"RETURNS\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLLBACK\", \"ROUND_CEILING\", \"ROUND_DOWN\", \"ROUND_FLOOR\", \"ROUND_HALF_DOWN\", \"ROUND_HALF_EVEN\", \"ROUND_HALF_UP\", \"ROUND_UP\", \"ROUTINE\", \"ROW\", \"ROWNUMBER\", \"ROWS\", \"ROWSET\", \"ROW_NUMBER\", \"RRN\", \"RUN\", \"SAVEPOINT\", \"SCHEMA\", \"SCRATCHPAD\", \"SCROLL\", \"SEARCH\", \"SECOND\", \"SECONDS\", \"SECQTY\", \"SECURITY\", \"SELECT\", \"SENSITIVE\", \"SEQUENCE\", \"SESSION\", \"SESSION_USER\", \"SET\", \"SIGNAL\", \"SIMPLE\", \"SNAN\", \"SOME\", \"SOURCE\", \"SPECIFIC\", \"SQL\", \"SQLID\", \"STACKED\", \"STANDARD\", \"START\", \"STARTING\", \"STATEMENT\", \"STATIC\", \"STATMENT\", \"STAY\", \"STOGROUP\", \"STORES\", \"STYLE\", \"SUBSTRING\", \"SUMMARY\", \"SYNONYM\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSTEM\", \"SYSTEM_USER\", \"TABLE\", \"TABLESPACE\", \"THEN\", \"TO\", \"TRANSACTION\", \"TRIGGER\", \"TRIM\", \"TRUNCATE\", \"TYPE\", \"UNDO\", \"UNION\", \"UNIQUE\", \"UNTIL\", \"UPDATE\", \"USAGE\", \"USER\", \"USING\", \"VALIDPROC\", \"VALUE\", \"VALUES\", \"VARIABLE\", \"VARIANT\", \"VCAT\", \"VERSION\", \"VIEW\", \"VOLATILE\", \"VOLUMES\", \"WHEN\", \"WHENEVER\", \"WHERE\", \"WHILE\", \"WITH\", \"WITHOUT\", \"WLM\", \"WRITE\", \"XMLELEMENT\", \"XMLEXISTS\", \"XMLNAMESPACES\", \"YEAR\", \"YEARS\"];\nvar dataTypes2 = [\n// https://www.ibm.com/docs/en/db2-for-zos/12?topic=columns-data-types\n\"ARRAY\", \"BIGINT\", \"BINARY\", \"BLOB\", \"BOOLEAN\", \"CCSID\", \"CHAR\", \"CHARACTER\", \"CLOB\", \"DATE\", \"DATETIME\", \"DBCLOB\", \"DEC\", \"DECIMAL\", \"DOUBLE\", \"DOUBLE PRECISION\", \"FLOAT\", \"FLOAT4\", \"FLOAT8\", \"GRAPHIC\", \"INT\", \"INT2\", \"INT4\", \"INT8\", \"INTEGER\", \"INTERVAL\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\", \"NCHAR\", \"NCHR\", \"NCLOB\", \"NVARCHAR\", \"NUMERIC\", \"SMALLINT\", \"REAL\", \"TIME\", \"TIMESTAMP\", \"VARBINARY\", \"VARCHAR\", \"VARGRAPHIC\"];\n\n// src/languages/db2/db2.formatter.ts\nvar reservedSelect2 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses2 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER BY [INPUT SEQUENCE]\", \"LIMIT\", \"OFFSET\", \"FETCH NEXT\", \"FOR UPDATE [OF]\", \"FOR {READ | FETCH} ONLY\", \"FOR {RR | CS | UR | RS} [USE AND KEEP {SHARE | UPDATE | EXCLUSIVE} LOCKS]\", \"WAIT FOR OUTCOME\", \"SKIP LOCKED DATA\", \"INTO\",\n// Data modification\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE INTO\", \"WHEN [NOT] MATCHED [THEN]\", \"UPDATE SET\", \"INSERT\"]);\nvar standardOnelineClauses2 = expandPhrases([\"CREATE [GLOBAL TEMPORARY | EXTERNAL] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses2 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] VIEW\",\n// - update:\n\"UPDATE\", \"WHERE CURRENT OF\", \"WITH {RR | RS | CS | UR}\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// alter table:\n\"ALTER TABLE\", \"ADD [COLUMN]\", \"DROP [COLUMN]\", \"RENAME COLUMN\", \"ALTER [COLUMN]\", \"SET DATA TYPE\",\n// for alter column\n\"SET NOT NULL\",\n// for alter column\n\"DROP {DEFAULT | GENERATED | NOT NULL}\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// https://www.ibm.com/docs/en/db2/11.5?topic=s-statements\n\"ALLOCATE\", \"ALTER AUDIT POLICY\", \"ALTER BUFFERPOOL\", \"ALTER DATABASE PARTITION GROUP\", \"ALTER DATABASE\", \"ALTER EVENT MONITOR\", \"ALTER FUNCTION\", \"ALTER HISTOGRAM TEMPLATE\", \"ALTER INDEX\", \"ALTER MASK\", \"ALTER METHOD\", \"ALTER MODULE\", \"ALTER NICKNAME\", \"ALTER PACKAGE\", \"ALTER PERMISSION\", \"ALTER PROCEDURE\", \"ALTER SCHEMA\", \"ALTER SECURITY LABEL COMPONENT\", \"ALTER SECURITY POLICY\", \"ALTER SEQUENCE\", \"ALTER SERVER\", \"ALTER SERVICE CLASS\", \"ALTER STOGROUP\", \"ALTER TABLESPACE\", \"ALTER THRESHOLD\", \"ALTER TRIGGER\", \"ALTER TRUSTED CONTEXT\", \"ALTER TYPE\", \"ALTER USAGE LIST\", \"ALTER USER MAPPING\", \"ALTER VIEW\", \"ALTER WORK ACTION SET\", \"ALTER WORK CLASS SET\", \"ALTER WORKLOAD\", \"ALTER WRAPPER\", \"ALTER XSROBJECT\", \"ALTER STOGROUP\", \"ALTER TABLESPACE\", \"ALTER TRIGGER\", \"ALTER TRUSTED CONTEXT\", \"ALTER VIEW\", \"ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}\", \"AUDIT\", \"BEGIN DECLARE SECTION\", \"CALL\", \"CLOSE\", \"COMMENT ON\", \"COMMIT [WORK]\", \"CONNECT\", \"CREATE [OR REPLACE] [PUBLIC] ALIAS\", \"CREATE AUDIT POLICY\", \"CREATE BUFFERPOOL\", \"CREATE DATABASE PARTITION GROUP\", \"CREATE EVENT MONITOR\", \"CREATE [OR REPLACE] FUNCTION\", \"CREATE FUNCTION MAPPING\", \"CREATE HISTOGRAM TEMPLATE\", \"CREATE [UNIQUE] INDEX\", \"CREATE INDEX EXTENSION\", \"CREATE [OR REPLACE] MASK\", \"CREATE [SPECIFIC] METHOD\", \"CREATE [OR REPLACE] MODULE\", \"CREATE [OR REPLACE] NICKNAME\", \"CREATE [OR REPLACE] PERMISSION\", \"CREATE [OR REPLACE] PROCEDURE\", \"CREATE ROLE\", \"CREATE SCHEMA\", \"CREATE SECURITY LABEL [COMPONENT]\", \"CREATE SECURITY POLICY\", \"CREATE [OR REPLACE] SEQUENCE\", \"CREATE SERVICE CLASS\", \"CREATE SERVER\", \"CREATE STOGROUP\", \"CREATE SYNONYM\", \"CREATE [LARGE | REGULAR | {SYSTEM | USER} TEMPORARY] TABLESPACE\", \"CREATE THRESHOLD\", \"CREATE {TRANSFORM | TRANSFORMS} FOR\", \"CREATE [OR REPLACE] TRIGGER\", \"CREATE TRUSTED CONTEXT\", \"CREATE [OR REPLACE] TYPE\", \"CREATE TYPE MAPPING\", \"CREATE USAGE LIST\", \"CREATE USER MAPPING FOR\", \"CREATE [OR REPLACE] VARIABLE\", \"CREATE WORK ACTION SET\", \"CREATE WORK CLASS SET\", \"CREATE WORKLOAD\", \"CREATE WRAPPER\", \"DECLARE\", \"DECLARE GLOBAL TEMPORARY TABLE\", \"DESCRIBE [INPUT | OUTPUT]\", \"DISCONNECT\", \"DROP [PUBLIC] ALIAS\", \"DROP AUDIT POLICY\", \"DROP BUFFERPOOL\", \"DROP DATABASE PARTITION GROUP\", \"DROP EVENT MONITOR\", \"DROP [SPECIFIC] FUNCTION\", \"DROP FUNCTION MAPPING\", \"DROP HISTOGRAM TEMPLATE\", \"DROP INDEX [EXTENSION]\", \"DROP MASK\", \"DROP [SPECIFIC] METHOD\", \"DROP MODULE\", \"DROP NICKNAME\", \"DROP PACKAGE\", \"DROP PERMISSION\", \"DROP [SPECIFIC] PROCEDURE\", \"DROP ROLE\", \"DROP SCHEMA\", \"DROP SECURITY LABEL [COMPONENT]\", \"DROP SECURITY POLICY\", \"DROP SEQUENCE\", \"DROP SERVER\", \"DROP SERVICE CLASS\", \"DROP STOGROUP\", \"DROP TABLE HIERARCHY\", \"DROP {TABLESPACE | TABLESPACES}\", \"DROP {TRANSFORM | TRANSFORMS}\", \"DROP THRESHOLD\", \"DROP TRIGGER\", \"DROP TRUSTED CONTEXT\", \"DROP TYPE [MAPPING]\", \"DROP USAGE LIST\", \"DROP USER MAPPING FOR\", \"DROP VARIABLE\", \"DROP VIEW [HIERARCHY]\", \"DROP WORK {ACTION | CLASS} SET\", \"DROP WORKLOAD\", \"DROP WRAPPER\", \"DROP XSROBJECT\", \"END DECLARE SECTION\", \"EXECUTE [IMMEDIATE]\", \"EXPLAIN {PLAN [SECTION] | ALL}\", \"FETCH [FROM]\", \"FLUSH {BUFFERPOOL | BUFFERPOOLS} ALL\", \"FLUSH EVENT MONITOR\", \"FLUSH FEDERATED CACHE\", \"FLUSH OPTIMIZATION PROFILE CACHE\", \"FLUSH PACKAGE CACHE [DYNAMIC]\", \"FLUSH AUTHENTICATION CACHE [FOR ALL]\", \"FREE LOCATOR\", \"GET DIAGNOSTICS\", \"GOTO\", \"GRANT\",\n// TODO: lots of syntax here\n\"INCLUDE\", \"ITERATE\", \"LEAVE\", \"LOCK TABLE\", \"LOOP\", \"OPEN\", \"PIPE\", \"PREPARE\", \"REFRESH TABLE\", \"RELEASE\", \"RELEASE [TO] SAVEPOINT\", \"RENAME [TABLE | INDEX | STOGROUP | TABLESPACE]\", \"REPEAT\", \"RESIGNAL\", \"RETURN\", \"REVOKE\",\n// TODO: lots of syntax here\n\"ROLLBACK [WORK] [TO SAVEPOINT]\", \"SAVEPOINT\", \"SET COMPILATION ENVIRONMENT\", \"SET CONNECTION\", \"SET CURRENT\",\n// TODO: bunch of syntax here\n\"SET ENCRYPTION PASSWORD\", \"SET EVENT MONITOR STATE\", \"SET INTEGRITY\", \"SET PASSTHRU\", \"SET PATH\", \"SET ROLE\", \"SET SCHEMA\", \"SET SERVER OPTION\", \"SET {SESSION AUTHORIZATION | SESSION_USER}\", \"SET USAGE LIST\", \"SIGNAL\", \"TRANSFER OWNERSHIP OF\", \"WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}\", \"WHILE\"]);\nvar reservedSetOperations2 = expandPhrases([\"UNION [ALL]\", \"EXCEPT [ALL]\", \"INTERSECT [ALL]\"]);\nvar reservedJoins2 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\"]);\nvar reservedPhrases2 = expandPhrases([\"ON DELETE\", \"ON UPDATE\", \"SET NULL\", \"{ROWS | RANGE} BETWEEN\"]);\nvar db2 = {\n  name: \"db2\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect2,\n    reservedClauses: [...reservedClauses2, ...standardOnelineClauses2, ...tabularOnelineClauses2],\n    reservedSetOperations: reservedSetOperations2,\n    reservedJoins: reservedJoins2,\n    reservedPhrases: reservedPhrases2,\n    reservedKeywords: keywords2,\n    reservedDataTypes: dataTypes2,\n    reservedFunctionNames: functions2,\n    extraParens: [\"[]\"],\n    stringTypes: [{\n      quote: \"''-qq\",\n      prefixes: [\"G\", \"N\", \"U&\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"X\", \"BX\", \"GX\", \"UX\"],\n      requirePrefix: true\n    }],\n    identTypes: [`\"\"-qq`],\n    identChars: {\n      first: \"@#$\",\n      rest: \"@#$\"\n    },\n    paramTypes: {\n      positional: true,\n      named: [\":\"]\n    },\n    paramChars: {\n      first: \"@#$\",\n      rest: \"@#$\"\n    },\n    operators: [\"**\", \"%\", \"|\", \"&\", \"^\", \"~\", \"\\xAC=\", \"\\xAC>\", \"\\xAC<\", \"!>\", \"!<\", \"^=\", \"^>\", \"^<\", \"||\", \"->\", \"=>\"]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses2, ...tabularOnelineClauses2],\n    tabularOnelineClauses: tabularOnelineClauses2\n  }\n};\n\n// src/languages/db2i/db2i.functions.ts\nvar functions3 = [\n// https://www.ibm.com/docs/en/i/7.5?topic=functions-aggregate\n// TODO: 'ANY', - conflicts with test for ANY predicate in 'operators.ys'!!\n\"ARRAY_AGG\", \"AVG\", \"CORR\", \"CORRELATION\", \"COUNT\", \"COUNT_BIG\", \"COVAR_POP\", \"COVARIANCE\", \"COVAR\", \"COVAR_SAMP\", \"COVARIANCE_SAMP\", \"EVERY\", \"GROUPING\", \"JSON_ARRAYAGG\", \"JSON_OBJECTAGG\", \"LISTAGG\", \"MAX\", \"MEDIAN\", \"MIN\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\",\n// https://www.ibm.com/docs/en/i/7.5?topic=functions-regression'\n\"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\", \"SOME\", \"STDDEV_POP\", \"STDDEV\", \"STDDEV_SAMP\", \"SUM\", \"VAR_POP\", \"VARIANCE\", \"VAR\", \"VAR_SAMP\", \"VARIANCE_SAMP\", \"XMLAGG\", \"XMLGROUP\",\n// https://www.ibm.com/docs/en/i/7.5?topic=functions-scalar\n\"ABS\", \"ABSVAL\", \"ACOS\", \"ADD_DAYS\", \"ADD_HOURS\", \"ADD_MINUTES\", \"ADD_MONTHS\", \"ADD_SECONDS\", \"ADD_YEARS\", \"ANTILOG\", \"ARRAY_MAX_CARDINALITY\", \"ARRAY_TRIM\", \"ASCII\", \"ASIN\", \"ATAN\", \"ATAN2\", \"ATANH\", \"BASE64_DECODE\", \"BASE64_ENCODE\", \"BIT_LENGTH\", \"BITAND\", \"BITANDNOT\", \"BITNOT\", \"BITOR\", \"BITXOR\", \"BSON_TO_JSON\", \"CARDINALITY\", \"CEIL\", \"CEILING\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHR\", \"COALESCE\", \"COMPARE_DECFLOAT\", \"CONCAT\", \"CONTAINS\", \"COS\", \"COSH\", \"COT\", \"CURDATE\", \"CURTIME\", \"DATABASE\", \"DATAPARTITIONNAME\", \"DATAPARTITIONNUM\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK_ISO\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"DAYS\", \"DBPARTITIONNAME\", \"DBPARTITIONNUM\", \"DECFLOAT_FORMAT\", \"DECFLOAT_SORTKEY\", \"DECRYPT_BINARY\", \"DECRYPT_BIT\", \"DECRYPT_CHAR\", \"DECRYPT_DB\", \"DEGREES\", \"DIFFERENCE\", \"DIGITS\", \"DLCOMMENT\", \"DLLINKTYPE\", \"DLURLCOMPLETE\", \"DLURLPATH\", \"DLURLPATHONLY\", \"DLURLSCHEME\", \"DLURLSERVER\", \"DLVALUE\", \"DOUBLE_PRECISION\", \"DOUBLE\", \"ENCRPYT\", \"ENCRYPT_AES\", \"ENCRYPT_AES256\", \"ENCRYPT_RC2\", \"ENCRYPT_TDES\", \"EXP\", \"EXTRACT\", \"FIRST_DAY\", \"FLOOR\", \"GENERATE_UNIQUE\", \"GET_BLOB_FROM_FILE\", \"GET_CLOB_FROM_FILE\", \"GET_DBCLOB_FROM_FILE\", \"GET_XML_FILE\", \"GETHINT\", \"GREATEST\", \"HASH_MD5\", \"HASH_ROW\", \"HASH_SHA1\", \"HASH_SHA256\", \"HASH_SHA512\", \"HASH_VALUES\", \"HASHED_VALUE\", \"HEX\", \"HEXTORAW\", \"HOUR\", \"HTML_ENTITY_DECODE\", \"HTML_ENTITY_ENCODE\", \"HTTP_DELETE_BLOB\", \"HTTP_DELETE\", \"HTTP_GET_BLOB\", \"HTTP_GET\", \"HTTP_PATCH_BLOB\", \"HTTP_PATCH\", \"HTTP_POST_BLOB\", \"HTTP_POST\", \"HTTP_PUT_BLOB\", \"HTTP_PUT\", \"IDENTITY_VAL_LOCAL\", \"IFNULL\", \"INSERT\", \"INSTR\", \"INTERPRET\", \"ISFALSE\", \"ISNOTFALSE\", \"ISNOTTRUE\", \"ISTRUE\", \"JSON_ARRAY\", \"JSON_OBJECT\", \"JSON_QUERY\", \"JSON_TO_BSON\", \"JSON_UPDATE\", \"JSON_VALUE\", \"JULIAN_DAY\", \"LAND\", \"LAST_DAY\", \"LCASE\", \"LEAST\", \"LEFT\", \"LENGTH\", \"LN\", \"LNOT\", \"LOCATE_IN_STRING\", \"LOCATE\", \"LOG10\", \"LOR\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MAX_CARDINALITY\", \"MAX\", \"MICROSECOND\", \"MIDNIGHT_SECONDS\", \"MIN\", \"MINUTE\", \"MOD\", \"MONTH\", \"MONTHNAME\", \"MONTHS_BETWEEN\", \"MQREAD\", \"MQREADCLOB\", \"MQRECEIVE\", \"MQRECEIVECLOB\", \"MQSEND\", \"MULTIPLY_ALT\", \"NEXT_DAY\", \"NORMALIZE_DECFLOAT\", \"NOW\", \"NULLIF\", \"NVL\", \"OCTET_LENGTH\", \"OVERLAY\", \"PI\", \"POSITION\", \"POSSTR\", \"POW\", \"POWER\", \"QUANTIZE\", \"QUARTER\", \"RADIANS\", \"RAISE_ERROR\", \"RANDOM\", \"RAND\", \"REGEXP_COUNT\", \"REGEXP_INSTR\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REPEAT\", \"REPLACE\", \"RID\", \"RIGHT\", \"ROUND_TIMESTAMP\", \"ROUND\", \"RPAD\", \"RRN\", \"RTRIM\", \"SCORE\", \"SECOND\", \"SIGN\", \"SIN\", \"SINH\", \"SOUNDEX\", \"SPACE\", \"SQRT\", \"STRIP\", \"STRLEFT\", \"STRPOS\", \"STRRIGHT\", \"SUBSTR\", \"SUBSTRING\", \"TABLE_NAME\", \"TABLE_SCHEMA\", \"TAN\", \"TANH\", \"TIMESTAMP_FORMAT\", \"TIMESTAMP_ISO\", \"TIMESTAMPDIFF_BIG\", \"TIMESTAMPDIFF\", \"TO_CHAR\", \"TO_CLOB\", \"TO_DATE\", \"TO_NUMBER\", \"TO_TIMESTAMP\", \"TOTALORDER\", \"TRANSLATE\", \"TRIM_ARRAY\", \"TRIM\", \"TRUNC_TIMESTAMP\", \"TRUNC\", \"TRUNCATE\", \"UCASE\", \"UPPER\", \"URL_DECODE\", \"URL_ENCODE\", \"VALUE\", \"VARBINARY_FORMAT\", \"VARCHAR_BIT_FORMAT\", \"VARCHAR_FORMAT_BINARY\", \"VARCHAR_FORMAT\", \"VERIFY_GROUP_FOR_USER\", \"WEEK_ISO\", \"WEEK\", \"WRAP\", \"XMLATTRIBUTES\", \"XMLCOMMENT\", \"XMLCONCAT\", \"XMLDOCUMENT\", \"XMLELEMENT\", \"XMLFOREST\", \"XMLNAMESPACES\", \"XMLPARSE\", \"XMLPI\", \"XMLROW\", \"XMLSERIALIZE\", \"XMLTEXT\", \"XMLVALIDATE\", \"XOR\", \"XSLTRANSFORM\", \"YEAR\", \"ZONED\",\n// https://www.ibm.com/docs/en/i/7.5?topic=functions-table\n\"BASE_TABLE\", \"HTTP_DELETE_BLOB_VERBOSE\", \"HTTP_DELETE_VERBOSE\", \"HTTP_GET_BLOB_VERBOSE\", \"HTTP_GET_VERBOSE\", \"HTTP_PATCH_BLOB_VERBOSE\", \"HTTP_PATCH_VERBOSE\", \"HTTP_POST_BLOB_VERBOSE\", \"HTTP_POST_VERBOSE\", \"HTTP_PUT_BLOB_VERBOSE\", \"HTTP_PUT_VERBOSE\", \"JSON_TABLE\", \"MQREADALL\", \"MQREADALLCLOB\", \"MQRECEIVEALL\", \"MQRECEIVEALLCLOB\", \"XMLTABLE\",\n// https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-row\n\"UNPACK\",\n// https://www.ibm.com/docs/en/i/7.5?topic=expressions-olap-specifications\n\"CUME_DIST\", \"DENSE_RANK\", \"FIRST_VALUE\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"NTH_VALUE\", \"NTILE\", \"PERCENT_RANK\", \"RANK\", \"RATIO_TO_REPORT\", \"ROW_NUMBER\",\n// Type casting\n\"CAST\"];\n\n// src/languages/db2i/db2i.keywords.ts\nvar keywords3 = [\n// https://www.ibm.com/docs/en/i/7.5?topic=words-reserved\n// TODO: This list likely contains all keywords, not only the reserved ones,\n// try to filter it down to just the reserved keywords.\n\"ABSENT\", \"ACCORDING\", \"ACCTNG\", \"ACTION\", \"ACTIVATE\", \"ADD\", \"ALIAS\", \"ALL\", \"ALLOCATE\", \"ALLOW\", \"ALTER\", \"AND\", \"ANY\", \"APPEND\", \"APPLNAME\", \"ARRAY\", \"ARRAY_AGG\", \"ARRAY_TRIM\", \"AS\", \"ASC\", \"ASENSITIVE\", \"ASSOCIATE\", \"ATOMIC\", \"ATTACH\", \"ATTRIBUTES\", \"AUTHORIZATION\", \"AUTONOMOUS\", \"BEFORE\", \"BEGIN\", \"BETWEEN\", \"BIND\", \"BSON\", \"BUFFERPOOL\", \"BY\", \"CACHE\", \"CALL\", \"CALLED\", \"CARDINALITY\", \"CASE\", \"CAST\", \"CHECK\", \"CL\", \"CLOSE\", \"CLUSTER\", \"COLLECT\", \"COLLECTION\", \"COLUMN\", \"COMMENT\", \"COMMIT\", \"COMPACT\", \"COMPARISONS\", \"COMPRESS\", \"CONCAT\", \"CONCURRENT\", \"CONDITION\", \"CONNECT\", \"CONNECT_BY_ROOT\", \"CONNECTION\", \"CONSTANT\", \"CONSTRAINT\", \"CONTAINS\", \"CONTENT\", \"CONTINUE\", \"COPY\", \"COUNT\", \"COUNT_BIG\", \"CREATE\", \"CREATEIN\", \"CROSS\", \"CUBE\", \"CUME_DIST\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_PATH\", \"CURRENT_SCHEMA\", \"CURRENT_SERVER\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"CURRENT_USER\", \"CURSOR\", \"CYCLE\", \"DATABASE\", \"DATAPARTITIONNAME\", \"DATAPARTITIONNUM\", \"DAY\", \"DAYS\", \"DB2GENERAL\", \"DB2GENRL\", \"DB2SQL\", \"DBINFO\", \"DBPARTITIONNAME\", \"DBPARTITIONNUM\", \"DEACTIVATE\", \"DEALLOCATE\", \"DECLARE\", \"DEFAULT\", \"DEFAULTS\", \"DEFER\", \"DEFINE\", \"DEFINITION\", \"DELETE\", \"DELETING\", \"DENSE_RANK\", \"DENSERANK\", \"DESC\", \"DESCRIBE\", \"DESCRIPTOR\", \"DETACH\", \"DETERMINISTIC\", \"DIAGNOSTICS\", \"DISABLE\", \"DISALLOW\", \"DISCONNECT\", \"DISTINCT\", \"DO\", \"DOCUMENT\", \"DROP\", \"DYNAMIC\", \"EACH\", \"ELSE\", \"ELSEIF\", \"EMPTY\", \"ENABLE\", \"ENCODING\", \"ENCRYPTION\", \"END\", \"END-EXEC\", \"ENDING\", \"ENFORCED\", \"ERROR\", \"ESCAPE\", \"EVERY\", \"EXCEPT\", \"EXCEPTION\", \"EXCLUDING\", \"EXCLUSIVE\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXTEND\", \"EXTERNAL\", \"EXTRACT\", \"FALSE\", \"FENCED\", \"FETCH\", \"FIELDPROC\", \"FILE\", \"FINAL\", \"FIRST_VALUE\", \"FOR\", \"FOREIGN\", \"FORMAT\", \"FREE\", \"FREEPAGE\", \"FROM\", \"FULL\", \"FUNCTION\", \"GBPCACHE\", \"GENERAL\", \"GENERATED\", \"GET\", \"GLOBAL\", \"GO\", \"GOTO\", \"GRANT\", \"GROUP\", \"HANDLER\", \"HASH\", \"HASH_ROW\", \"HASHED_VALUE\", \"HAVING\", \"HINT\", \"HOLD\", \"HOUR\", \"HOURS\",\n// 'ID', Not actually a reserved keyword\n\"IDENTITY\", \"IF\", \"IGNORE\", \"IMMEDIATE\", \"IMPLICITLY\", \"IN\", \"INCLUDE\", \"INCLUDING\", \"INCLUSIVE\", \"INCREMENT\", \"INDEX\", \"INDEXBP\", \"INDICATOR\", \"INF\", \"INFINITY\", \"INHERIT\", \"INLINE\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"INSERTING\", \"INTEGRITY\", \"INTERPRET\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"ISOLATION\", \"ITERATE\", \"JAVA\", \"JOIN\", \"JSON\", \"JSON_ARRAY\", \"JSON_ARRAYAGG\", \"JSON_EXISTS\", \"JSON_OBJECT\", \"JSON_OBJECTAGG\", \"JSON_QUERY\", \"JSON_TABLE\", \"JSON_VALUE\", \"KEEP\", \"KEY\", \"KEYS\", \"LABEL\", \"LAG\", \"LANGUAGE\", \"LAST_VALUE\", \"LATERAL\", \"LEAD\", \"LEAVE\", \"LEFT\", \"LEVEL2\", \"LIKE\", \"LIMIT\", \"LINKTYPE\", \"LISTAGG\", \"LOCAL\", \"LOCALDATE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATION\", \"LOCATOR\", \"LOCK\", \"LOCKSIZE\", \"LOG\", \"LOGGED\", \"LOOP\", \"MAINTAINED\", \"MASK\", \"MATCHED\", \"MATERIALIZED\", \"MAXVALUE\", \"MERGE\", \"MICROSECOND\", \"MICROSECONDS\", \"MINPCTUSED\", \"MINUTE\", \"MINUTES\", \"MINVALUE\", \"MIRROR\", \"MIXED\", \"MODE\", \"MODIFIES\", \"MONTH\", \"MONTHS\", \"NAMESPACE\", \"NAN\", \"NATIONAL\", \"NCHAR\", \"NCLOB\", \"NESTED\", \"NEW\", \"NEW_TABLE\", \"NEXTVAL\", \"NO\", \"NOCACHE\", \"NOCYCLE\", \"NODENAME\", \"NODENUMBER\", \"NOMAXVALUE\", \"NOMINVALUE\", \"NONE\", \"NOORDER\", \"NORMALIZED\", \"NOT\", \"NOTNULL\", \"NTH_VALUE\", \"NTILE\", \"NULL\", \"NULLS\", \"NVARCHAR\", \"OBID\", \"OBJECT\", \"OF\", \"OFF\", \"OFFSET\", \"OLD\", \"OLD_TABLE\", \"OMIT\", \"ON\", \"ONLY\", \"OPEN\", \"OPTIMIZE\", \"OPTION\", \"OR\", \"ORDER\", \"ORDINALITY\", \"ORGANIZE\", \"OUT\", \"OUTER\", \"OVER\", \"OVERLAY\", \"OVERRIDING\", \"PACKAGE\", \"PADDED\", \"PAGE\", \"PAGESIZE\", \"PARAMETER\", \"PART\", \"PARTITION\", \"PARTITIONED\", \"PARTITIONING\", \"PARTITIONS\", \"PASSING\", \"PASSWORD\", \"PATH\", \"PCTFREE\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERIOD\", \"PERMISSION\", \"PIECESIZE\", \"PIPE\", \"PLAN\", \"POSITION\", \"PREPARE\", \"PREVVAL\", \"PRIMARY\", \"PRIOR\", \"PRIQTY\", \"PRIVILEGES\", \"PROCEDURE\", \"PROGRAM\", \"PROGRAMID\", \"QUERY\", \"RANGE\", \"RANK\", \"RATIO_TO_REPORT\", \"RCDFMT\", \"READ\", \"READS\", \"RECOVERY\", \"REFERENCES\", \"REFERENCING\", \"REFRESH\", \"REGEXP_LIKE\", \"RELEASE\", \"RENAME\", \"REPEAT\", \"RESET\", \"RESIGNAL\", \"RESTART\", \"RESULT\", \"RESULT_SET_LOCATOR\", \"RETURN\", \"RETURNING\", \"RETURNS\", \"REVOKE\", \"RID\", \"RIGHT\", \"ROLLBACK\", \"ROLLUP\", \"ROUTINE\", \"ROW\", \"ROW_NUMBER\", \"ROWNUMBER\", \"ROWS\", \"RRN\", \"RUN\", \"SAVEPOINT\", \"SBCS\", \"SCALAR\", \"SCHEMA\", \"SCRATCHPAD\", \"SCROLL\", \"SEARCH\", \"SECOND\", \"SECONDS\", \"SECQTY\", \"SECURED\", \"SELECT\", \"SENSITIVE\", \"SEQUENCE\", \"SESSION\", \"SESSION_USER\", \"SET\", \"SIGNAL\", \"SIMPLE\", \"SKIP\", \"SNAN\", \"SOME\", \"SOURCE\", \"SPECIFIC\", \"SQL\", \"SQLID\", \"SQLIND_DEFAULT\", \"SQLIND_UNASSIGNED\", \"STACKED\", \"START\", \"STARTING\", \"STATEMENT\", \"STATIC\", \"STOGROUP\", \"SUBSTRING\", \"SUMMARY\", \"SYNONYM\", \"SYSTEM_TIME\", \"SYSTEM_USER\", \"TABLE\", \"TABLESPACE\", \"TABLESPACES\", \"TAG\", \"THEN\", \"THREADSAFE\", \"TO\", \"TRANSACTION\", \"TRANSFER\", \"TRIGGER\", \"TRIM\", \"TRIM_ARRAY\", \"TRUE\", \"TRUNCATE\", \"TRY_CAST\", \"TYPE\", \"UNDO\", \"UNION\", \"UNIQUE\", \"UNIT\", \"UNKNOWN\", \"UNNEST\", \"UNTIL\", \"UPDATE\", \"UPDATING\", \"URI\", \"USAGE\", \"USE\", \"USER\", \"USERID\", \"USING\", \"VALUE\", \"VALUES\", \"VARIABLE\", \"VARIANT\", \"VCAT\", \"VERSION\", \"VERSIONING\", \"VIEW\", \"VOLATILE\", \"WAIT\", \"WHEN\", \"WHENEVER\", \"WHERE\", \"WHILE\", \"WITH\", \"WITHIN\", \"WITHOUT\", \"WRAPPED\", \"WRAPPER\", \"WRITE\", \"WRKSTNNAME\", \"XMLAGG\", \"XMLATTRIBUTES\", \"XMLCAST\", \"XMLCOMMENT\", \"XMLCONCAT\", \"XMLDOCUMENT\", \"XMLELEMENT\", \"XMLFOREST\", \"XMLGROUP\", \"XMLNAMESPACES\", \"XMLPARSE\", \"XMLPI\", \"XMLROW\", \"XMLSERIALIZE\", \"XMLTABLE\", \"XMLTEXT\", \"XMLVALIDATE\", \"XSLTRANSFORM\", \"XSROBJECT\", \"YEAR\", \"YEARS\", \"YES\", \"ZONE\"];\nvar dataTypes3 = [\n// https://www.ibm.com/docs/en/i/7.2?topic=iaodsd-odbc-data-types-how-they-correspond-db2-i-database-types\n\"ARRAY\", \"BIGINT\", \"BINARY\", \"BIT\", \"BLOB\", \"BOOLEAN\", \"CCSID\", \"CHAR\", \"CHARACTER\", \"CLOB\", \"DATA\", \"DATALINK\", \"DATE\", \"DBCLOB\", \"DECFLOAT\", \"DECIMAL\", \"DEC\", \"DOUBLE\", \"DOUBLE PRECISION\", \"FLOAT\", \"GRAPHIC\", \"INT\", \"INTEGER\", \"LONG\", \"NUMERIC\", \"REAL\", \"ROWID\", \"SMALLINT\", \"TIME\", \"TIMESTAMP\", \"VARBINARY\", \"VARCHAR\", \"VARGRAPHIC\", \"XML\"];\n\n// src/languages/db2i/db2i.formatter.ts\nvar reservedSelect3 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses3 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"INTO\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER [SIBLINGS] BY [INPUT SEQUENCE]\", \"LIMIT\", \"OFFSET\", \"FETCH {FIRST | NEXT}\", \"FOR UPDATE [OF]\", \"FOR READ ONLY\", \"OPTIMIZE FOR\",\n// Data modification\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE INTO\", \"WHEN [NOT] MATCHED [THEN]\", \"UPDATE SET\", \"DELETE\", \"INSERT\",\n// Data definition - table\n\"FOR SYSTEM NAME\"]);\nvar standardOnelineClauses3 = expandPhrases([\"CREATE [OR REPLACE] TABLE\"]);\nvar tabularOnelineClauses3 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [RECURSIVE] VIEW\",\n// - update:\n\"UPDATE\", \"WHERE CURRENT OF\", \"WITH {NC | RR | RS | CS | UR}\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE\",\n// alter table:\n\"ALTER TABLE\", \"ADD [COLUMN]\", \"ALTER [COLUMN]\", \"DROP [COLUMN]\", \"SET DATA TYPE\",\n// for alter column\n\"SET {GENERATED ALWAYS | GENERATED BY DEFAULT}\",\n// for alter column\n\"SET NOT NULL\",\n// for alter column\n\"SET {NOT HIDDEN | IMPLICITLY HIDDEN}\",\n// for alter column\n\"SET FIELDPROC\",\n// for alter column\n\"DROP {DEFAULT | NOT NULL | GENERATED | IDENTITY | ROW CHANGE TIMESTAMP | FIELDPROC}\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// other\n\"SET [CURRENT] SCHEMA\", \"SET CURRENT_SCHEMA\",\n// https://www.ibm.com/docs/en/i/7.5?topic=reference-statements\n\"ALLOCATE CURSOR\", \"ALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL] SQL\", \"ALTER [SPECIFIC] {FUNCTION | PROCEDURE}\", \"ALTER {MASK | PERMISSION | SEQUENCE | TRIGGER}\", \"ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}\", \"BEGIN DECLARE SECTION\", \"CALL\", \"CLOSE\", \"COMMENT ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PARAMETER | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}\", \"COMMENT ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}\", \"COMMENT ON PARAMETER SPECIFIC {FUNCTION | PROCEDURE | ROUTINE}\", \"COMMENT ON [TABLE FUNCTION] RETURN COLUMN\", \"COMMENT ON [TABLE FUNCTION] RETURN COLUMN SPECIFIC [PROCEDURE | ROUTINE]\", \"COMMIT [WORK] [HOLD]\", \"CONNECT [TO | RESET] USER\", \"CREATE [OR REPLACE] {ALIAS | FUNCTION | MASK | PERMISSION | PROCEDURE | SEQUENCE | TRIGGER | VARIABLE}\", \"CREATE [ENCODED VECTOR] INDEX\", \"CREATE UNIQUE [WHERE NOT NULL] INDEX\", \"CREATE SCHEMA\", \"CREATE TYPE\", \"DEALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL]\", \"DECLARE CURSOR\", \"DECLARE GLOBAL TEMPORARY TABLE\", \"DECLARE\", \"DESCRIBE CURSOR\", \"DESCRIBE INPUT\", \"DESCRIBE [OUTPUT]\", \"DESCRIBE {PROCEDURE | ROUTINE}\", \"DESCRIBE TABLE\", \"DISCONNECT ALL [SQL]\", \"DISCONNECT [CURRENT]\", \"DROP {ALIAS | INDEX | MASK | PACKAGE | PERMISSION | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT} [IF EXISTS]\", \"DROP [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE} [IF EXISTS]\", \"END DECLARE SECTION\", \"EXECUTE [IMMEDIATE]\",\n// 'FETCH {NEXT | PRIOR | FIRST | LAST | BEFORE | AFTER | CURRENT} [FROM]',\n\"FREE LOCATOR\", \"GET [SQL] DESCRIPTOR [LOCAL | GLOBAL]\", \"GET [CURRENT | STACKED] DIAGNOSTICS\", \"GRANT {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}\", \"HOLD LOCATOR\", \"INCLUDE\", \"LABEL ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}\", \"LABEL ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}\", \"LOCK TABLE\", \"OPEN\", \"PREPARE\", \"REFRESH TABLE\", \"RELEASE\", \"RELEASE [TO] SAVEPOINT\", \"RENAME [TABLE | INDEX] TO\", \"REVOKE {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}\", \"ROLLBACK [WORK] [HOLD | TO SAVEPOINT]\", \"SAVEPOINT\", \"SET CONNECTION\", \"SET CURRENT {DEBUG MODE | DECFLOAT ROUNDING MODE | DEGREE | IMPLICIT XMLPARSE OPTION | TEMPORAL SYSTEM_TIME}\", \"SET [SQL] DESCRIPTOR [LOCAL | GLOBAL]\", \"SET ENCRYPTION PASSWORD\", \"SET OPTION\", \"SET {[CURRENT [FUNCTION]] PATH | CURRENT_PATH}\", \"SET RESULT SETS [WITH RETURN [TO CALLER | TO CLIENT]]\", \"SET SESSION AUTHORIZATION\", \"SET SESSION_USER\", \"SET TRANSACTION\", \"SIGNAL SQLSTATE [VALUE]\", \"TAG\", \"TRANSFER OWNERSHIP OF\", \"WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}\"]);\nvar reservedSetOperations3 = expandPhrases([\"UNION [ALL]\", \"EXCEPT [ALL]\", \"INTERSECT [ALL]\"]);\nvar reservedJoins3 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"[LEFT | RIGHT] EXCEPTION JOIN\", \"{INNER | CROSS} JOIN\"]);\nvar reservedPhrases3 = expandPhrases([\"ON DELETE\", \"ON UPDATE\", \"SET NULL\", \"{ROWS | RANGE} BETWEEN\"]);\nvar db2i = {\n  name: \"db2i\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect3,\n    reservedClauses: [...reservedClauses3, ...standardOnelineClauses3, ...tabularOnelineClauses3],\n    reservedSetOperations: reservedSetOperations3,\n    reservedJoins: reservedJoins3,\n    reservedPhrases: reservedPhrases3,\n    reservedKeywords: keywords3,\n    reservedDataTypes: dataTypes3,\n    reservedFunctionNames: functions3,\n    nestedBlockComments: true,\n    extraParens: [\"[]\"],\n    stringTypes: [{\n      quote: \"''-qq\",\n      prefixes: [\"G\", \"N\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"X\", \"BX\", \"GX\", \"UX\"],\n      requirePrefix: true\n    }],\n    identTypes: [`\"\"-qq`],\n    identChars: {\n      first: \"@#$\",\n      rest: \"@#$\"\n    },\n    paramTypes: {\n      positional: true,\n      named: [\":\"]\n    },\n    paramChars: {\n      first: \"@#$\",\n      rest: \"@#$\"\n    },\n    operators: [\"**\", \"\\xAC=\", \"\\xAC>\", \"\\xAC<\", \"!>\", \"!<\", \"||\", \"=>\"]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses3, ...tabularOnelineClauses3],\n    tabularOnelineClauses: tabularOnelineClauses3\n  }\n};\n\n// src/languages/hive/hive.functions.ts\nvar functions4 = [\n// https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF\n// math\n\"ABS\", \"ACOS\", \"ASIN\", \"ATAN\", \"BIN\", \"BROUND\", \"CBRT\", \"CEIL\", \"CEILING\", \"CONV\", \"COS\", \"DEGREES\",\n// 'E',\n\"EXP\", \"FACTORIAL\", \"FLOOR\", \"GREATEST\", \"HEX\", \"LEAST\", \"LN\", \"LOG\", \"LOG10\", \"LOG2\", \"NEGATIVE\", \"PI\", \"PMOD\", \"POSITIVE\", \"POW\", \"POWER\", \"RADIANS\", \"RAND\", \"ROUND\", \"SHIFTLEFT\", \"SHIFTRIGHT\", \"SHIFTRIGHTUNSIGNED\", \"SIGN\", \"SIN\", \"SQRT\", \"TAN\", \"UNHEX\", \"WIDTH_BUCKET\",\n// array\n\"ARRAY_CONTAINS\", \"MAP_KEYS\", \"MAP_VALUES\", \"SIZE\", \"SORT_ARRAY\",\n// conversion\n\"BINARY\", \"CAST\",\n// date\n\"ADD_MONTHS\", \"DATE\", \"DATE_ADD\", \"DATE_FORMAT\", \"DATE_SUB\", \"DATEDIFF\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFYEAR\", \"EXTRACT\", \"FROM_UNIXTIME\", \"FROM_UTC_TIMESTAMP\", \"HOUR\", \"LAST_DAY\", \"MINUTE\", \"MONTH\", \"MONTHS_BETWEEN\", \"NEXT_DAY\", \"QUARTER\", \"SECOND\", \"TIMESTAMP\", \"TO_DATE\", \"TO_UTC_TIMESTAMP\", \"TRUNC\", \"UNIX_TIMESTAMP\", \"WEEKOFYEAR\", \"YEAR\",\n// conditional\n\"ASSERT_TRUE\", \"COALESCE\", \"IF\", \"ISNOTNULL\", \"ISNULL\", \"NULLIF\", \"NVL\",\n// string\n\"ASCII\", \"BASE64\", \"CHARACTER_LENGTH\", \"CHR\", \"CONCAT\", \"CONCAT_WS\", \"CONTEXT_NGRAMS\", \"DECODE\", \"ELT\", \"ENCODE\", \"FIELD\", \"FIND_IN_SET\", \"FORMAT_NUMBER\", \"GET_JSON_OBJECT\", \"IN_FILE\", \"INITCAP\", \"INSTR\", \"LCASE\", \"LENGTH\", \"LEVENSHTEIN\", \"LOCATE\", \"LOWER\", \"LPAD\", \"LTRIM\", \"NGRAMS\", \"OCTET_LENGTH\", \"PARSE_URL\", \"PRINTF\", \"QUOTE\", \"REGEXP_EXTRACT\", \"REGEXP_REPLACE\", \"REPEAT\", \"REVERSE\", \"RPAD\", \"RTRIM\", \"SENTENCES\", \"SOUNDEX\", \"SPACE\", \"SPLIT\", \"STR_TO_MAP\", \"SUBSTR\", \"SUBSTRING\", \"TRANSLATE\", \"TRIM\", \"UCASE\", \"UNBASE64\", \"UPPER\",\n// masking\n\"MASK\", \"MASK_FIRST_N\", \"MASK_HASH\", \"MASK_LAST_N\", \"MASK_SHOW_FIRST_N\", \"MASK_SHOW_LAST_N\",\n// misc\n\"AES_DECRYPT\", \"AES_ENCRYPT\", \"CRC32\", \"CURRENT_DATABASE\", \"CURRENT_USER\", \"HASH\", \"JAVA_METHOD\", \"LOGGED_IN_USER\", \"MD5\", \"REFLECT\", \"SHA\", \"SHA1\", \"SHA2\", \"SURROGATE_KEY\", \"VERSION\",\n// aggregate\n\"AVG\", \"COLLECT_LIST\", \"COLLECT_SET\", \"CORR\", \"COUNT\", \"COVAR_POP\", \"COVAR_SAMP\", \"HISTOGRAM_NUMERIC\", \"MAX\", \"MIN\", \"NTILE\", \"PERCENTILE\", \"PERCENTILE_APPROX\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"SUM\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\",\n// table\n\"EXPLODE\", \"INLINE\", \"JSON_TUPLE\", \"PARSE_URL_TUPLE\", \"POSEXPLODE\", \"STACK\",\n// https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics\n\"LEAD\", \"LAG\", \"FIRST_VALUE\", \"LAST_VALUE\", \"RANK\", \"ROW_NUMBER\", \"DENSE_RANK\", \"CUME_DIST\", \"PERCENT_RANK\", \"NTILE\"];\n\n// src/languages/hive/hive.keywords.ts\nvar keywords4 = [\n// https://cwiki.apache.org/confluence/display/hive/languagemanual+ddl\n// Non-reserved keywords have proscribed meanings in. HiveQL, but can still be used as table or column names\n\"ADD\", \"ADMIN\", \"AFTER\", \"ANALYZE\", \"ARCHIVE\", \"ASC\", \"BEFORE\", \"BUCKET\", \"BUCKETS\", \"CASCADE\", \"CHANGE\", \"CLUSTER\", \"CLUSTERED\", \"CLUSTERSTATUS\", \"COLLECTION\", \"COLUMNS\", \"COMMENT\", \"COMPACT\", \"COMPACTIONS\", \"COMPUTE\", \"CONCATENATE\", \"CONTINUE\", \"DATA\", \"DATABASES\", \"DATETIME\", \"DAY\", \"DBPROPERTIES\", \"DEFERRED\", \"DEFINED\", \"DELIMITED\", \"DEPENDENCY\", \"DESC\", \"DIRECTORIES\", \"DIRECTORY\", \"DISABLE\", \"DISTRIBUTE\", \"ELEM_TYPE\", \"ENABLE\", \"ESCAPED\", \"EXCLUSIVE\", \"EXPLAIN\", \"EXPORT\", \"FIELDS\", \"FILE\", \"FILEFORMAT\", \"FIRST\", \"FORMAT\", \"FORMATTED\", \"FUNCTIONS\", \"HOLD_DDLTIME\", \"HOUR\", \"IDXPROPERTIES\", \"IGNORE\", \"INDEX\", \"INDEXES\", \"INPATH\", \"INPUTDRIVER\", \"INPUTFORMAT\", \"ITEMS\", \"JAR\", \"KEYS\", \"KEY_TYPE\", \"LIMIT\", \"LINES\", \"LOAD\", \"LOCATION\", \"LOCK\", \"LOCKS\", \"LOGICAL\", \"LONG\", \"MAPJOIN\", \"MATERIALIZED\", \"METADATA\", \"MINUS\", \"MINUTE\", \"MONTH\", \"MSCK\", \"NOSCAN\", \"NO_DROP\", \"OFFLINE\", \"OPTION\", \"OUTPUTDRIVER\", \"OUTPUTFORMAT\", \"OVERWRITE\", \"OWNER\", \"PARTITIONED\", \"PARTITIONS\", \"PLUS\", \"PRETTY\", \"PRINCIPALS\", \"PROTECTION\", \"PURGE\", \"READ\", \"READONLY\", \"REBUILD\", \"RECORDREADER\", \"RECORDWRITER\", \"RELOAD\", \"RENAME\", \"REPAIR\", \"REPLACE\", \"REPLICATION\", \"RESTRICT\", \"REWRITE\", \"ROLE\", \"ROLES\", \"SCHEMA\", \"SCHEMAS\", \"SECOND\", \"SEMI\", \"SERDE\", \"SERDEPROPERTIES\", \"SERVER\", \"SETS\", \"SHARED\", \"SHOW\", \"SHOW_DATABASE\", \"SKEWED\", \"SORT\", \"SORTED\", \"SSL\", \"STATISTICS\", \"STORED\", \"STREAMTABLE\", \"STRING\", \"TABLES\", \"TBLPROPERTIES\", \"TEMPORARY\", \"TERMINATED\", \"TINYINT\", \"TOUCH\", \"TRANSACTIONS\", \"UNARCHIVE\", \"UNDO\", \"UNIONTYPE\", \"UNLOCK\", \"UNSET\", \"UNSIGNED\", \"URI\", \"USE\", \"UTC\", \"UTCTIMESTAMP\", \"VALUE_TYPE\", \"VIEW\", \"WHILE\", \"YEAR\", \"AUTOCOMMIT\", \"ISOLATION\", \"LEVEL\", \"OFFSET\", \"SNAPSHOT\", \"TRANSACTION\", \"WORK\", \"WRITE\", \"ABORT\", \"KEY\", \"LAST\", \"NORELY\", \"NOVALIDATE\", \"NULLS\", \"RELY\", \"VALIDATE\", \"DETAIL\", \"DOW\", \"EXPRESSION\", \"OPERATOR\", \"QUARTER\", \"SUMMARY\", \"VECTORIZATION\", \"WEEK\", \"YEARS\", \"MONTHS\", \"WEEKS\", \"DAYS\", \"HOURS\", \"MINUTES\", \"SECONDS\", \"TIMESTAMPTZ\", \"ZONE\",\n// reserved\n\"ALL\", \"ALTER\", \"AND\", \"AS\", \"AUTHORIZATION\", \"BETWEEN\", \"BOTH\", \"BY\", \"CASE\", \"CAST\", \"COLUMN\", \"CONF\", \"CREATE\", \"CROSS\", \"CUBE\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIMESTAMP\", \"CURSOR\", \"DATABASE\", \"DELETE\", \"DESCRIBE\", \"DISTINCT\", \"DROP\", \"ELSE\", \"END\", \"EXCHANGE\", \"EXISTS\", \"EXTENDED\", \"EXTERNAL\", \"FALSE\", \"FETCH\", \"FOLLOWING\", \"FOR\", \"FROM\", \"FULL\", \"FUNCTION\", \"GRANT\", \"GROUP\", \"GROUPING\", \"HAVING\", \"IF\", \"IMPORT\", \"IN\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"JOIN\", \"LATERAL\", \"LEFT\", \"LESS\", \"LIKE\", \"LOCAL\", \"MACRO\", \"MORE\", \"NONE\", \"NOT\", \"NULL\", \"OF\", \"ON\", \"OR\", \"ORDER\", \"OUT\", \"OUTER\", \"OVER\", \"PARTIALSCAN\", \"PARTITION\", \"PERCENT\", \"PRECEDING\", \"PRESERVE\", \"PROCEDURE\", \"RANGE\", \"READS\", \"REDUCE\", \"REVOKE\", \"RIGHT\", \"ROLLUP\", \"ROW\", \"ROWS\", \"SELECT\", \"SET\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TO\", \"TRANSFORM\", \"TRIGGER\", \"TRUE\", \"TRUNCATE\", \"UNBOUNDED\", \"UNION\", \"UNIQUEJOIN\", \"UPDATE\", \"USER\", \"USING\", \"UTC_TMESTAMP\", \"VALUES\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\", \"COMMIT\", \"ONLY\", \"REGEXP\", \"RLIKE\", \"ROLLBACK\", \"START\", \"CACHE\", \"CONSTRAINT\", \"FOREIGN\", \"PRIMARY\", \"REFERENCES\", \"DAYOFWEEK\", \"EXTRACT\", \"FLOOR\", \"VIEWS\", \"TIME\", \"SYNC\",\n// fileTypes\n\"TEXTFILE\", \"SEQUENCEFILE\", \"ORC\", \"CSV\", \"TSV\", \"PARQUET\", \"AVRO\", \"RCFILE\", \"JSONFILE\", \"INPUTFORMAT\", \"OUTPUTFORMAT\"];\nvar dataTypes4 = [\n// https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types\n\"ARRAY\", \"BIGINT\", \"BINARY\", \"BOOLEAN\", \"CHAR\", \"DATE\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"INTEGER\", \"INTERVAL\", \"MAP\", \"NUMERIC\", \"PRECISION\", \"SMALLINT\", \"STRUCT\", \"TIMESTAMP\", \"VARCHAR\"];\n\n// src/languages/hive/hive.formatter.ts\nvar reservedSelect4 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses4 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"SORT BY\", \"CLUSTER BY\", \"DISTRIBUTE BY\", \"LIMIT\",\n// Data manipulation\n// - insert:\n//   Hive does not actually support plain INSERT INTO, only INSERT INTO TABLE\n//   but it's a nuisance to not support it, as all other dialects do.\n\"INSERT INTO [TABLE]\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE INTO\", \"WHEN [NOT] MATCHED [THEN]\", \"UPDATE SET\", \"INSERT [VALUES]\",\n// - insert overwrite directory:\n//   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Writingdataintothefilesystemfromqueries\n\"INSERT OVERWRITE [LOCAL] DIRECTORY\",\n// - load:\n//   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Loadingfilesintotables\n\"LOAD DATA [LOCAL] INPATH\", \"[OVERWRITE] INTO TABLE\"]);\nvar standardOnelineClauses4 = expandPhrases([\"CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses4 = expandPhrases([\n// - create:\n\"CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"RENAME TO\",\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// other\n\"ALTER\", \"CREATE\", \"USE\", \"DESCRIBE\", \"DROP\", \"FETCH\", \"SHOW\", \"STORED AS\", \"STORED BY\", \"ROW FORMAT\"]);\nvar reservedSetOperations4 = expandPhrases([\"UNION [ALL | DISTINCT]\"]);\nvar reservedJoins4 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\",\n// non-standard joins\n\"LEFT SEMI JOIN\"]);\nvar reservedPhrases4 = expandPhrases([\"{ROWS | RANGE} BETWEEN\"]);\nvar hive = {\n  name: \"hive\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect4,\n    reservedClauses: [...reservedClauses4, ...standardOnelineClauses4, ...tabularOnelineClauses4],\n    reservedSetOperations: reservedSetOperations4,\n    reservedJoins: reservedJoins4,\n    reservedPhrases: reservedPhrases4,\n    reservedKeywords: keywords4,\n    reservedDataTypes: dataTypes4,\n    reservedFunctionNames: functions4,\n    extraParens: [\"[]\"],\n    stringTypes: ['\"\"-bs', \"''-bs\"],\n    identTypes: [\"``\"],\n    variableTypes: [{\n      quote: \"{}\",\n      prefixes: [\"$\"],\n      requirePrefix: true\n    }],\n    operators: [\"%\", \"~\", \"^\", \"|\", \"&\", \"<=>\", \"==\", \"!\", \"||\"]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses4, ...tabularOnelineClauses4],\n    tabularOnelineClauses: tabularOnelineClauses4\n  }\n};\n\n// src/languages/mariadb/likeMariaDb.ts\nfunction postProcess2(tokens) {\n  return tokens.map((token, i) => {\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.SET(token) && nextToken.text === \"(\") {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */\n      });\n    }\n    const prevToken = tokens[i - 1] || EOF_TOKEN;\n    if (isToken.VALUES(token) && prevToken.text === \"=\") {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */\n      });\n    }\n    return token;\n  });\n}\n\n// src/languages/mariadb/mariadb.keywords.ts\nvar keywords5 = [\n// https://mariadb.com/kb/en/reserved-words/\n\"ACCESSIBLE\", \"ADD\", \"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"AS\", \"ASC\", \"ASENSITIVE\", \"BEFORE\", \"BETWEEN\", \"BOTH\", \"BY\", \"CALL\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"CONDITION\", \"CONSTRAINT\", \"CONTINUE\", \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_DATE\", \"CURRENT_ROLE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DATABASE\", \"DATABASES\", \"DAY_HOUR\", \"DAY_MICROSECOND\", \"DAY_MINUTE\", \"DAY_SECOND\", \"DECLARE\", \"DEFAULT\", \"DELAYED\", \"DELETE\", \"DELETE_DOMAIN_ID\", \"DESC\", \"DESCRIBE\", \"DETERMINISTIC\", \"DISTINCT\", \"DISTINCTROW\", \"DIV\", \"DO_DOMAIN_IDS\", \"DROP\", \"DUAL\", \"EACH\", \"ELSE\", \"ELSEIF\", \"ENCLOSED\", \"ESCAPED\", \"EXCEPT\", \"EXISTS\", \"EXIT\", \"EXPLAIN\", \"FALSE\", \"FETCH\", \"FOR\", \"FORCE\", \"FOREIGN\", \"FROM\", \"FULLTEXT\", \"GENERAL\", \"GRANT\", \"GROUP\", \"HAVING\", \"HIGH_PRIORITY\", \"HOUR_MICROSECOND\", \"HOUR_MINUTE\", \"HOUR_SECOND\", \"IF\", \"IGNORE\", \"IGNORE_DOMAIN_IDS\", \"IGNORE_SERVER_IDS\", \"IN\", \"INDEX\", \"INFILE\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"INTERSECT\", \"INTERVAL\", \"INTO\", \"IS\", \"ITERATE\", \"JOIN\", \"KEY\", \"KEYS\", \"KILL\", \"LEADING\", \"LEAVE\", \"LEFT\", \"LIKE\", \"LIMIT\", \"LINEAR\", \"LINES\", \"LOAD\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCK\", \"LOOP\", \"LOW_PRIORITY\", \"MASTER_HEARTBEAT_PERIOD\", \"MASTER_SSL_VERIFY_SERVER_CERT\", \"MATCH\", \"MAXVALUE\", \"MINUTE_MICROSECOND\", \"MINUTE_SECOND\", \"MOD\", \"MODIFIES\", \"NATURAL\", \"NOT\", \"NO_WRITE_TO_BINLOG\", \"NULL\", \"OFFSET\", \"ON\", \"OPTIMIZE\", \"OPTION\", \"OPTIONALLY\", \"OR\", \"ORDER\", \"OUT\", \"OUTER\", \"OUTFILE\", \"OVER\", \"PAGE_CHECKSUM\", \"PARSE_VCOL_EXPR\", \"PARTITION\", \"POSITION\", \"PRIMARY\", \"PROCEDURE\", \"PURGE\", \"RANGE\", \"READ\", \"READS\", \"READ_WRITE\", \"RECURSIVE\", \"REF_SYSTEM_ID\", \"REFERENCES\", \"REGEXP\", \"RELEASE\", \"RENAME\", \"REPEAT\", \"REPLACE\", \"REQUIRE\", \"RESIGNAL\", \"RESTRICT\", \"RETURN\", \"RETURNING\", \"REVOKE\", \"RIGHT\", \"RLIKE\", \"ROW_NUMBER\", \"ROWS\", \"SCHEMA\", \"SCHEMAS\", \"SECOND_MICROSECOND\", \"SELECT\", \"SENSITIVE\", \"SEPARATOR\", \"SET\", \"SHOW\", \"SIGNAL\", \"SLOW\", \"SPATIAL\", \"SPECIFIC\", \"SQL\", \"SQLEXCEPTION\", \"SQLSTATE\", \"SQLWARNING\", \"SQL_BIG_RESULT\", \"SQL_CALC_FOUND_ROWS\", \"SQL_SMALL_RESULT\", \"SSL\", \"STARTING\", \"STATS_AUTO_RECALC\", \"STATS_PERSISTENT\", \"STATS_SAMPLE_PAGES\", \"STRAIGHT_JOIN\", \"TABLE\", \"TERMINATED\", \"THEN\", \"TO\", \"TRAILING\", \"TRIGGER\", \"TRUE\", \"UNDO\", \"UNION\", \"UNIQUE\", \"UNLOCK\", \"UNSIGNED\", \"UPDATE\", \"USAGE\", \"USE\", \"USING\", \"UTC_DATE\", \"UTC_TIME\", \"UTC_TIMESTAMP\", \"VALUES\", \"WHEN\", \"WHERE\", \"WHILE\", \"WINDOW\", \"WITH\", \"WRITE\", \"XOR\", \"YEAR_MONTH\", \"ZEROFILL\"];\nvar dataTypes5 = [\n// https://mariadb.com/kb/en/data-types/\n\"BIGINT\", \"BINARY\", \"BIT\", \"BLOB\", \"CHAR BYTE\", \"CHAR\", \"CHARACTER\", \"DATETIME\", \"DEC\", \"DECIMAL\", \"DOUBLE PRECISION\", \"DOUBLE\", \"ENUM\", \"FIXED\", \"FLOAT\", \"FLOAT4\", \"FLOAT8\", \"INT\", \"INT1\", \"INT2\", \"INT3\", \"INT4\", \"INT8\", \"INTEGER\", \"LONG\", \"LONGBLOB\", \"LONGTEXT\", \"MEDIUMBLOB\", \"MEDIUMINT\", \"MEDIUMTEXT\", \"MIDDLEINT\", \"NATIONAL CHAR\", \"NATIONAL VARCHAR\", \"NUMERIC\", \"PRECISION\", \"REAL\", \"SMALLINT\", \"TEXT\", \"TIMESTAMP\", \"TINYBLOB\", \"TINYINT\", \"TINYTEXT\", \"VARBINARY\", \"VARCHAR\", \"VARCHARACTER\", \"VARYING\", \"YEAR\"\n// 'NUMBER', // ?? In oracle mode only\n// 'SET' // handled as special-case in postProcess\n];\n\n// src/languages/mariadb/mariadb.functions.ts\nvar functions5 = [\n// https://mariadb.com/kb/en/information-schema-sql_functions-table/\n\"ADDDATE\", \"ADD_MONTHS\", \"BIT_AND\", \"BIT_OR\", \"BIT_XOR\", \"CAST\", \"COUNT\", \"CUME_DIST\", \"CURDATE\", \"CURTIME\", \"DATE_ADD\", \"DATE_SUB\", \"DATE_FORMAT\", \"DECODE\", \"DENSE_RANK\", \"EXTRACT\", \"FIRST_VALUE\", \"GROUP_CONCAT\", \"JSON_ARRAYAGG\", \"JSON_OBJECTAGG\", \"LAG\", \"LEAD\", \"MAX\", \"MEDIAN\", \"MID\", \"MIN\", \"NOW\", \"NTH_VALUE\", \"NTILE\", \"POSITION\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"RANK\", \"ROW_NUMBER\", \"SESSION_USER\", \"STD\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"SUBDATE\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\", \"TRIM_ORACLE\", \"VARIANCE\", \"VAR_POP\", \"VAR_SAMP\", \"ABS\", \"ACOS\", \"ADDTIME\", \"AES_DECRYPT\", \"AES_ENCRYPT\", \"ASIN\", \"ATAN\", \"ATAN2\", \"BENCHMARK\", \"BIN\", \"BINLOG_GTID_POS\", \"BIT_COUNT\", \"BIT_LENGTH\", \"CEIL\", \"CEILING\", \"CHARACTER_LENGTH\", \"CHAR_LENGTH\", \"CHR\", \"COERCIBILITY\", \"COLUMN_CHECK\", \"COLUMN_EXISTS\", \"COLUMN_LIST\", \"COLUMN_JSON\", \"COMPRESS\", \"CONCAT\", \"CONCAT_OPERATOR_ORACLE\", \"CONCAT_WS\", \"CONNECTION_ID\", \"CONV\", \"CONVERT_TZ\", \"COS\", \"COT\", \"CRC32\", \"DATEDIFF\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"DEGREES\", \"DECODE_HISTOGRAM\", \"DECODE_ORACLE\", \"DES_DECRYPT\", \"DES_ENCRYPT\", \"ELT\", \"ENCODE\", \"ENCRYPT\", \"EXP\", \"EXPORT_SET\", \"EXTRACTVALUE\", \"FIELD\", \"FIND_IN_SET\", \"FLOOR\", \"FORMAT\", \"FOUND_ROWS\", \"FROM_BASE64\", \"FROM_DAYS\", \"FROM_UNIXTIME\", \"GET_LOCK\", \"GREATEST\", \"HEX\", \"IFNULL\", \"INSTR\", \"ISNULL\", \"IS_FREE_LOCK\", \"IS_USED_LOCK\", \"JSON_ARRAY\", \"JSON_ARRAY_APPEND\", \"JSON_ARRAY_INSERT\", \"JSON_COMPACT\", \"JSON_CONTAINS\", \"JSON_CONTAINS_PATH\", \"JSON_DEPTH\", \"JSON_DETAILED\", \"JSON_EXISTS\", \"JSON_EXTRACT\", \"JSON_INSERT\", \"JSON_KEYS\", \"JSON_LENGTH\", \"JSON_LOOSE\", \"JSON_MERGE\", \"JSON_MERGE_PATCH\", \"JSON_MERGE_PRESERVE\", \"JSON_QUERY\", \"JSON_QUOTE\", \"JSON_OBJECT\", \"JSON_REMOVE\", \"JSON_REPLACE\", \"JSON_SET\", \"JSON_SEARCH\", \"JSON_TYPE\", \"JSON_UNQUOTE\", \"JSON_VALID\", \"JSON_VALUE\", \"LAST_DAY\", \"LAST_INSERT_ID\", \"LCASE\", \"LEAST\", \"LENGTH\", \"LENGTHB\", \"LN\", \"LOAD_FILE\", \"LOCATE\", \"LOG\", \"LOG10\", \"LOG2\", \"LOWER\", \"LPAD\", \"LPAD_ORACLE\", \"LTRIM\", \"LTRIM_ORACLE\", \"MAKEDATE\", \"MAKETIME\", \"MAKE_SET\", \"MASTER_GTID_WAIT\", \"MASTER_POS_WAIT\", \"MD5\", \"MONTHNAME\", \"NAME_CONST\", \"NVL\", \"NVL2\", \"OCT\", \"OCTET_LENGTH\", \"ORD\", \"PERIOD_ADD\", \"PERIOD_DIFF\", \"PI\", \"POW\", \"POWER\", \"QUOTE\", \"REGEXP_INSTR\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"RADIANS\", \"RAND\", \"RELEASE_ALL_LOCKS\", \"RELEASE_LOCK\", \"REPLACE_ORACLE\", \"REVERSE\", \"ROUND\", \"RPAD\", \"RPAD_ORACLE\", \"RTRIM\", \"RTRIM_ORACLE\", \"SEC_TO_TIME\", \"SHA\", \"SHA1\", \"SHA2\", \"SIGN\", \"SIN\", \"SLEEP\", \"SOUNDEX\", \"SPACE\", \"SQRT\", \"STRCMP\", \"STR_TO_DATE\", \"SUBSTR_ORACLE\", \"SUBSTRING_INDEX\", \"SUBTIME\", \"SYS_GUID\", \"TAN\", \"TIMEDIFF\", \"TIME_FORMAT\", \"TIME_TO_SEC\", \"TO_BASE64\", \"TO_CHAR\", \"TO_DAYS\", \"TO_SECONDS\", \"UCASE\", \"UNCOMPRESS\", \"UNCOMPRESSED_LENGTH\", \"UNHEX\", \"UNIX_TIMESTAMP\", \"UPDATEXML\", \"UPPER\", \"UUID\", \"UUID_SHORT\", \"VERSION\", \"WEEKDAY\", \"WEEKOFYEAR\", \"WSREP_LAST_WRITTEN_GTID\", \"WSREP_LAST_SEEN_GTID\", \"WSREP_SYNC_WAIT_UPTO_GTID\", \"YEARWEEK\",\n// CASE expression shorthands\n\"COALESCE\", \"NULLIF\"];\n\n// src/languages/mariadb/mariadb.formatter.ts\nvar reservedSelect5 = expandPhrases([\"SELECT [ALL | DISTINCT | DISTINCTROW]\"]);\nvar reservedClauses5 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\", \"FETCH {FIRST | NEXT}\",\n// Data manipulation\n// - insert:\n\"INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]\", \"REPLACE [LOW_PRIORITY | DELAYED] [INTO]\", \"VALUES\", \"ON DUPLICATE KEY UPDATE\",\n// - update:\n\"SET\",\n// other\n\"RETURNING\"]);\nvar standardOnelineClauses5 = expandPhrases([\"CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses5 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE [LOW_PRIORITY] [IGNORE]\",\n// - delete:\n\"DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM\",\n// - drop table:\n\"DROP [TEMPORARY] TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]\", \"ADD [COLUMN] [IF NOT EXISTS]\", \"{CHANGE | MODIFY} [COLUMN] [IF EXISTS]\", \"DROP [COLUMN] [IF EXISTS]\", \"RENAME [TO]\", \"RENAME COLUMN\", \"ALTER [COLUMN]\", \"{SET | DROP} DEFAULT\",\n// for alter column\n\"SET {VISIBLE | INVISIBLE}\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// https://mariadb.com/docs/reference/mdb/sql-statements/\n\"ALTER DATABASE\", \"ALTER DATABASE COMMENT\", \"ALTER EVENT\", \"ALTER FUNCTION\", \"ALTER PROCEDURE\", \"ALTER SCHEMA\", \"ALTER SCHEMA COMMENT\", \"ALTER SEQUENCE\", \"ALTER SERVER\", \"ALTER USER\", \"ALTER VIEW\", \"ANALYZE\", \"ANALYZE TABLE\", \"BACKUP LOCK\", \"BACKUP STAGE\", \"BACKUP UNLOCK\", \"BEGIN\", \"BINLOG\", \"CACHE INDEX\", \"CALL\", \"CHANGE MASTER TO\", \"CHECK TABLE\", \"CHECK VIEW\", \"CHECKSUM TABLE\", \"COMMIT\", \"CREATE AGGREGATE FUNCTION\", \"CREATE DATABASE\", \"CREATE EVENT\", \"CREATE FUNCTION\", \"CREATE INDEX\", \"CREATE PROCEDURE\", \"CREATE ROLE\", \"CREATE SEQUENCE\", \"CREATE SERVER\", \"CREATE SPATIAL INDEX\", \"CREATE TRIGGER\", \"CREATE UNIQUE INDEX\", \"CREATE USER\", \"DEALLOCATE PREPARE\", \"DESCRIBE\", \"DROP DATABASE\", \"DROP EVENT\", \"DROP FUNCTION\", \"DROP INDEX\", \"DROP PREPARE\", \"DROP PROCEDURE\", \"DROP ROLE\", \"DROP SEQUENCE\", \"DROP SERVER\", \"DROP TRIGGER\", \"DROP USER\", \"DROP VIEW\", \"EXECUTE\", \"EXPLAIN\", \"FLUSH\", \"GET DIAGNOSTICS\", \"GET DIAGNOSTICS CONDITION\", \"GRANT\", \"HANDLER\", \"HELP\", \"INSTALL PLUGIN\", \"INSTALL SONAME\", \"KILL\", \"LOAD DATA INFILE\", \"LOAD INDEX INTO CACHE\", \"LOAD XML INFILE\", \"LOCK TABLE\", \"OPTIMIZE TABLE\", \"PREPARE\", \"PURGE BINARY LOGS\", \"PURGE MASTER LOGS\", \"RELEASE SAVEPOINT\", \"RENAME TABLE\", \"RENAME USER\", \"REPAIR TABLE\", \"REPAIR VIEW\", \"RESET MASTER\", \"RESET QUERY CACHE\", \"RESET REPLICA\", \"RESET SLAVE\", \"RESIGNAL\", \"REVOKE\", \"ROLLBACK\", \"SAVEPOINT\", \"SET CHARACTER SET\", \"SET DEFAULT ROLE\", \"SET GLOBAL TRANSACTION\", \"SET NAMES\", \"SET PASSWORD\", \"SET ROLE\", \"SET STATEMENT\", \"SET TRANSACTION\", \"SHOW\", \"SHOW ALL REPLICAS STATUS\", \"SHOW ALL SLAVES STATUS\", \"SHOW AUTHORS\", \"SHOW BINARY LOGS\", \"SHOW BINLOG EVENTS\", \"SHOW BINLOG STATUS\", \"SHOW CHARACTER SET\", \"SHOW CLIENT_STATISTICS\", \"SHOW COLLATION\", \"SHOW COLUMNS\", \"SHOW CONTRIBUTORS\", \"SHOW CREATE DATABASE\", \"SHOW CREATE EVENT\", \"SHOW CREATE FUNCTION\", \"SHOW CREATE PACKAGE\", \"SHOW CREATE PACKAGE BODY\", \"SHOW CREATE PROCEDURE\", \"SHOW CREATE SEQUENCE\", \"SHOW CREATE TABLE\", \"SHOW CREATE TRIGGER\", \"SHOW CREATE USER\", \"SHOW CREATE VIEW\", \"SHOW DATABASES\", \"SHOW ENGINE\", \"SHOW ENGINE INNODB STATUS\", \"SHOW ENGINES\", \"SHOW ERRORS\", \"SHOW EVENTS\", \"SHOW EXPLAIN\", \"SHOW FUNCTION CODE\", \"SHOW FUNCTION STATUS\", \"SHOW GRANTS\", \"SHOW INDEX\", \"SHOW INDEXES\", \"SHOW INDEX_STATISTICS\", \"SHOW KEYS\", \"SHOW LOCALES\", \"SHOW MASTER LOGS\", \"SHOW MASTER STATUS\", \"SHOW OPEN TABLES\", \"SHOW PACKAGE BODY CODE\", \"SHOW PACKAGE BODY STATUS\", \"SHOW PACKAGE STATUS\", \"SHOW PLUGINS\", \"SHOW PLUGINS SONAME\", \"SHOW PRIVILEGES\", \"SHOW PROCEDURE CODE\", \"SHOW PROCEDURE STATUS\", \"SHOW PROCESSLIST\", \"SHOW PROFILE\", \"SHOW PROFILES\", \"SHOW QUERY_RESPONSE_TIME\", \"SHOW RELAYLOG EVENTS\", \"SHOW REPLICA\", \"SHOW REPLICA HOSTS\", \"SHOW REPLICA STATUS\", \"SHOW SCHEMAS\", \"SHOW SLAVE\", \"SHOW SLAVE HOSTS\", \"SHOW SLAVE STATUS\", \"SHOW STATUS\", \"SHOW STORAGE ENGINES\", \"SHOW TABLE STATUS\", \"SHOW TABLES\", \"SHOW TRIGGERS\", \"SHOW USER_STATISTICS\", \"SHOW VARIABLES\", \"SHOW WARNINGS\", \"SHOW WSREP_MEMBERSHIP\", \"SHOW WSREP_STATUS\", \"SHUTDOWN\", \"SIGNAL\", \"START ALL REPLICAS\", \"START ALL SLAVES\", \"START REPLICA\", \"START SLAVE\", \"START TRANSACTION\", \"STOP ALL REPLICAS\", \"STOP ALL SLAVES\", \"STOP REPLICA\", \"STOP SLAVE\", \"UNINSTALL PLUGIN\", \"UNINSTALL SONAME\", \"UNLOCK TABLE\", \"USE\", \"XA BEGIN\", \"XA COMMIT\", \"XA END\", \"XA PREPARE\", \"XA RECOVER\", \"XA ROLLBACK\", \"XA START\"]);\nvar reservedSetOperations5 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT [ALL | DISTINCT]\", \"INTERSECT [ALL | DISTINCT]\", \"MINUS [ALL | DISTINCT]\"]);\nvar reservedJoins5 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL JOIN\", \"NATURAL {LEFT | RIGHT} [OUTER] JOIN\",\n// non-standard joins\n\"STRAIGHT_JOIN\"]);\nvar reservedPhrases5 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\", \"CHARACTER SET\", \"{ROWS | RANGE} BETWEEN\", \"IDENTIFIED BY\"]);\nvar mariadb = {\n  name: \"mariadb\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect5,\n    reservedClauses: [...reservedClauses5, ...standardOnelineClauses5, ...tabularOnelineClauses5],\n    reservedSetOperations: reservedSetOperations5,\n    reservedJoins: reservedJoins5,\n    reservedPhrases: reservedPhrases5,\n    supportsXor: true,\n    reservedKeywords: keywords5,\n    reservedDataTypes: dataTypes5,\n    reservedFunctionNames: functions5,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: ['\"\"-qq-bs', \"''-qq-bs\", {\n      quote: \"''-raw\",\n      prefixes: [\"B\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    identChars: {\n      first: \"$\",\n      rest: \"$\",\n      allowFirstCharNumber: true\n    },\n    variableTypes: [{\n      regex: \"@@?[A-Za-z0-9_.$]+\"\n    }, {\n      quote: '\"\"-qq-bs',\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"''-qq-bs\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"``\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }],\n    paramTypes: {\n      positional: true\n    },\n    lineCommentTypes: [\"--\", \"#\"],\n    operators: [\"%\", \":=\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"<=>\", \"&&\", \"||\", \"!\", \"*.*\"\n    // Not actually an operator\n    ],\n    postProcess: postProcess2\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses5, ...tabularOnelineClauses5],\n    tabularOnelineClauses: tabularOnelineClauses5\n  }\n};\n\n// src/languages/mysql/mysql.keywords.ts\nvar keywords6 = [\n// https://dev.mysql.com/doc/refman/8.0/en/keywords.html\n\"ACCESSIBLE\",\n// (R)\n\"ADD\",\n// (R)\n\"ALL\",\n// (R)\n\"ALTER\",\n// (R)\n\"ANALYZE\",\n// (R)\n\"AND\",\n// (R)\n\"AS\",\n// (R)\n\"ASC\",\n// (R)\n\"ASENSITIVE\",\n// (R)\n\"BEFORE\",\n// (R)\n\"BETWEEN\",\n// (R)\n\"BOTH\",\n// (R)\n\"BY\",\n// (R)\n\"CALL\",\n// (R)\n\"CASCADE\",\n// (R)\n\"CASE\",\n// (R)\n\"CHANGE\",\n// (R)\n\"CHECK\",\n// (R)\n\"COLLATE\",\n// (R)\n\"COLUMN\",\n// (R)\n\"CONDITION\",\n// (R)\n\"CONSTRAINT\",\n// (R)\n\"CONTINUE\",\n// (R)\n\"CONVERT\",\n// (R)\n\"CREATE\",\n// (R)\n\"CROSS\",\n// (R)\n\"CUBE\",\n// (R)\n\"CUME_DIST\",\n// (R)\n\"CURRENT_DATE\",\n// (R)\n\"CURRENT_TIME\",\n// (R)\n\"CURRENT_TIMESTAMP\",\n// (R)\n\"CURRENT_USER\",\n// (R)\n\"CURSOR\",\n// (R)\n\"DATABASE\",\n// (R)\n\"DATABASES\",\n// (R)\n\"DAY_HOUR\",\n// (R)\n\"DAY_MICROSECOND\",\n// (R)\n\"DAY_MINUTE\",\n// (R)\n\"DAY_SECOND\",\n// (R)\n\"DECLARE\",\n// (R)\n\"DEFAULT\",\n// (R)\n\"DELAYED\",\n// (R)\n\"DELETE\",\n// (R)\n\"DENSE_RANK\",\n// (R)\n\"DESC\",\n// (R)\n\"DESCRIBE\",\n// (R)\n\"DETERMINISTIC\",\n// (R)\n\"DISTINCT\",\n// (R)\n\"DISTINCTROW\",\n// (R)\n\"DIV\",\n// (R)\n\"DROP\",\n// (R)\n\"DUAL\",\n// (R)\n\"EACH\",\n// (R)\n\"ELSE\",\n// (R)\n\"ELSEIF\",\n// (R)\n\"EMPTY\",\n// (R)\n\"ENCLOSED\",\n// (R)\n\"ESCAPED\",\n// (R)\n\"EXCEPT\",\n// (R)\n\"EXISTS\",\n// (R)\n\"EXIT\",\n// (R)\n\"EXPLAIN\",\n// (R)\n\"FALSE\",\n// (R)\n\"FETCH\",\n// (R)\n\"FIRST_VALUE\",\n// (R)\n\"FOR\",\n// (R)\n\"FORCE\",\n// (R)\n\"FOREIGN\",\n// (R)\n\"FROM\",\n// (R)\n\"FULLTEXT\",\n// (R)\n\"FUNCTION\",\n// (R)\n\"GENERATED\",\n// (R)\n\"GET\",\n// (R)\n\"GRANT\",\n// (R)\n\"GROUP\",\n// (R)\n\"GROUPING\",\n// (R)\n\"GROUPS\",\n// (R)\n\"HAVING\",\n// (R)\n\"HIGH_PRIORITY\",\n// (R)\n\"HOUR_MICROSECOND\",\n// (R)\n\"HOUR_MINUTE\",\n// (R)\n\"HOUR_SECOND\",\n// (R)\n\"IF\",\n// (R)\n\"IGNORE\",\n// (R)\n\"IN\",\n// (R)\n\"INDEX\",\n// (R)\n\"INFILE\",\n// (R)\n\"INNER\",\n// (R)\n\"INOUT\",\n// (R)\n\"INSENSITIVE\",\n// (R)\n\"INSERT\",\n// (R)\n\"IN\",\n// <-- moved over from functions\n\"INTERSECT\",\n// (R)\n\"INTERVAL\",\n// (R)\n\"INTO\",\n// (R)\n\"IO_AFTER_GTIDS\",\n// (R)\n\"IO_BEFORE_GTIDS\",\n// (R)\n\"IS\",\n// (R)\n\"ITERATE\",\n// (R)\n\"JOIN\",\n// (R)\n\"JSON_TABLE\",\n// (R)\n\"KEY\",\n// (R)\n\"KEYS\",\n// (R)\n\"KILL\",\n// (R)\n\"LAG\",\n// (R)\n\"LAST_VALUE\",\n// (R)\n\"LATERAL\",\n// (R)\n\"LEAD\",\n// (R)\n\"LEADING\",\n// (R)\n\"LEAVE\",\n// (R)\n\"LEFT\",\n// (R)\n\"LIKE\",\n// (R)\n\"LIMIT\",\n// (R)\n\"LINEAR\",\n// (R)\n\"LINES\",\n// (R)\n\"LOAD\",\n// (R)\n\"LOCALTIME\",\n// (R)\n\"LOCALTIMESTAMP\",\n// (R)\n\"LOCK\",\n// (R)\n\"LONG\",\n// (R)\n\"LOOP\",\n// (R)\n\"LOW_PRIORITY\",\n// (R)\n\"MASTER_BIND\",\n// (R)\n\"MASTER_SSL_VERIFY_SERVER_CERT\",\n// (R)\n\"MATCH\",\n// (R)\n\"MAXVALUE\",\n// (R)\n\"MINUTE_MICROSECOND\",\n// (R)\n\"MINUTE_SECOND\",\n// (R)\n\"MOD\",\n// (R)\n\"MODIFIES\",\n// (R)\n\"NATURAL\",\n// (R)\n\"NOT\",\n// (R)\n\"NO_WRITE_TO_BINLOG\",\n// (R)\n\"NTH_VALUE\",\n// (R)\n\"NTILE\",\n// (R)\n\"NULL\",\n// (R)\n\"OF\",\n// (R)\n\"ON\",\n// (R)\n\"OPTIMIZE\",\n// (R)\n\"OPTIMIZER_COSTS\",\n// (R)\n\"OPTION\",\n// (R)\n\"OPTIONALLY\",\n// (R)\n\"OR\",\n// (R)\n\"ORDER\",\n// (R)\n\"OUT\",\n// (R)\n\"OUTER\",\n// (R)\n\"OUTFILE\",\n// (R)\n\"OVER\",\n// (R)\n\"PARTITION\",\n// (R)\n\"PERCENT_RANK\",\n// (R)\n\"PRIMARY\",\n// (R)\n\"PROCEDURE\",\n// (R)\n\"PURGE\",\n// (R)\n\"RANGE\",\n// (R)\n\"RANK\",\n// (R)\n\"READ\",\n// (R)\n\"READS\",\n// (R)\n\"READ_WRITE\",\n// (R)\n\"RECURSIVE\",\n// (R)\n\"REFERENCES\",\n// (R)\n\"REGEXP\",\n// (R)\n\"RELEASE\",\n// (R)\n\"RENAME\",\n// (R)\n\"REPEAT\",\n// (R)\n\"REPLACE\",\n// (R)\n\"REQUIRE\",\n// (R)\n\"RESIGNAL\",\n// (R)\n\"RESTRICT\",\n// (R)\n\"RETURN\",\n// (R)\n\"REVOKE\",\n// (R)\n\"RIGHT\",\n// (R)\n\"RLIKE\",\n// (R)\n\"ROW\",\n// (R)\n\"ROWS\",\n// (R)\n\"ROW_NUMBER\",\n// (R)\n\"SCHEMA\",\n// (R)\n\"SCHEMAS\",\n// (R)\n\"SECOND_MICROSECOND\",\n// (R)\n\"SELECT\",\n// (R)\n\"SENSITIVE\",\n// (R)\n\"SEPARATOR\",\n// (R)\n\"SET\",\n// (R)\n\"SHOW\",\n// (R)\n\"SIGNAL\",\n// (R)\n\"SPATIAL\",\n// (R)\n\"SPECIFIC\",\n// (R)\n\"SQL\",\n// (R)\n\"SQLEXCEPTION\",\n// (R)\n\"SQLSTATE\",\n// (R)\n\"SQLWARNING\",\n// (R)\n\"SQL_BIG_RESULT\",\n// (R)\n\"SQL_CALC_FOUND_ROWS\",\n// (R)\n\"SQL_SMALL_RESULT\",\n// (R)\n\"SSL\",\n// (R)\n\"STARTING\",\n// (R)\n\"STORED\",\n// (R)\n\"STRAIGHT_JOIN\",\n// (R)\n\"SYSTEM\",\n// (R)\n\"TABLE\",\n// (R)\n\"TERMINATED\",\n// (R)\n\"THEN\",\n// (R)\n\"TO\",\n// (R)\n\"TRAILING\",\n// (R)\n\"TRIGGER\",\n// (R)\n\"TRUE\",\n// (R)\n\"UNDO\",\n// (R)\n\"UNION\",\n// (R)\n\"UNIQUE\",\n// (R)\n\"UNLOCK\",\n// (R)\n\"UNSIGNED\",\n// (R)\n\"UPDATE\",\n// (R)\n\"USAGE\",\n// (R)\n\"USE\",\n// (R)\n\"USING\",\n// (R)\n\"UTC_DATE\",\n// (R)\n\"UTC_TIME\",\n// (R)\n\"UTC_TIMESTAMP\",\n// (R)\n\"VALUES\",\n// (R)\n\"VIRTUAL\",\n// (R)\n\"WHEN\",\n// (R)\n\"WHERE\",\n// (R)\n\"WHILE\",\n// (R)\n\"WINDOW\",\n// (R)\n\"WITH\",\n// (R)\n\"WRITE\",\n// (R)\n\"XOR\",\n// (R)\n\"YEAR_MONTH\",\n// (R)\n\"ZEROFILL\"\n// (R)\n];\nvar dataTypes6 = [\n// https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n\"BIGINT\",\n// (R)\n\"BINARY\",\n// (R)\n\"BIT\", \"BLOB\",\n// (R)\n\"BOOL\",\n// (R)\n\"BOOLEAN\",\n// (R)\n\"CHAR\",\n// (R)\n\"CHARACTER\",\n// (R)\n\"DATE\",\n// (R)\n\"DATETIME\",\n// (R)\n\"DEC\",\n// (R)\n\"DECIMAL\",\n// (R)\n\"DOUBLE PRECISION\", \"DOUBLE\",\n// (R)\n\"ENUM\", \"FIXED\", \"FLOAT\",\n// (R)\n\"FLOAT4\",\n// (R)\n\"FLOAT8\",\n// (R)\n\"INT\",\n// (R)\n\"INT1\",\n// (R)\n\"INT2\",\n// (R)\n\"INT3\",\n// (R)\n\"INT4\",\n// (R)\n\"INT8\",\n// (R)\n\"INTEGER\",\n// (R)\n\"LONGBLOB\",\n// (R)\n\"LONGTEXT\",\n// (R)\n\"MEDIUMBLOB\",\n// (R)\n\"MEDIUMINT\",\n// (R)\n\"MEDIUMTEXT\",\n// (R)\n\"MIDDLEINT\",\n// (R)\n\"NATIONAL CHAR\",\n// (R)\n\"NATIONAL VARCHAR\",\n// (R)\n\"NUMERIC\",\n// (R)\n\"PRECISION\",\n// (R)\n\"REAL\",\n// (R)\n\"SMALLINT\",\n// (R)\n\"TEXT\", \"TIME\", \"TIMESTAMP\",\n// (R)\n\"TINYBLOB\",\n// (R)\n\"TINYINT\",\n// (R)\n\"TINYTEXT\",\n// (R)\n\"VARBINARY\",\n// (R)\n\"VARCHAR\",\n// (R)\n\"VARCHARACTER\",\n// (R)\n\"VARYING\",\n// (R)\n\"YEAR\"\n// 'SET' // handled as special-case in postProcess\n];\n\n// src/languages/mysql/mysql.functions.ts\nvar functions6 = [\n// https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html\n\"ABS\", \"ACOS\", \"ADDDATE\", \"ADDTIME\", \"AES_DECRYPT\", \"AES_ENCRYPT\",\n// 'AND',\n\"ANY_VALUE\", \"ASCII\", \"ASIN\", \"ATAN\", \"ATAN2\", \"AVG\", \"BENCHMARK\", \"BIN\", \"BIN_TO_UUID\", \"BINARY\", \"BIT_AND\", \"BIT_COUNT\", \"BIT_LENGTH\", \"BIT_OR\", \"BIT_XOR\", \"CAN_ACCESS_COLUMN\", \"CAN_ACCESS_DATABASE\", \"CAN_ACCESS_TABLE\", \"CAN_ACCESS_USER\", \"CAN_ACCESS_VIEW\", \"CAST\", \"CEIL\", \"CEILING\", \"CHAR\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHARSET\", \"COALESCE\", \"COERCIBILITY\", \"COLLATION\", \"COMPRESS\", \"CONCAT\", \"CONCAT_WS\", \"CONNECTION_ID\", \"CONV\", \"CONVERT\", \"CONVERT_TZ\", \"COS\", \"COT\", \"COUNT\", \"CRC32\", \"CUME_DIST\", \"CURDATE\", \"CURRENT_DATE\", \"CURRENT_ROLE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURTIME\", \"DATABASE\", \"DATE\", \"DATE_ADD\", \"DATE_FORMAT\", \"DATE_SUB\", \"DATEDIFF\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"DEFAULT\", \"DEGREES\", \"DENSE_RANK\", \"DIV\", \"ELT\", \"EXP\", \"EXPORT_SET\", \"EXTRACT\", \"EXTRACTVALUE\", \"FIELD\", \"FIND_IN_SET\", \"FIRST_VALUE\", \"FLOOR\", \"FORMAT\", \"FORMAT_BYTES\", \"FORMAT_PICO_TIME\", \"FOUND_ROWS\", \"FROM_BASE64\", \"FROM_DAYS\", \"FROM_UNIXTIME\", \"GEOMCOLLECTION\", \"GEOMETRYCOLLECTION\", \"GET_DD_COLUMN_PRIVILEGES\", \"GET_DD_CREATE_OPTIONS\", \"GET_DD_INDEX_SUB_PART_LENGTH\", \"GET_FORMAT\", \"GET_LOCK\", \"GREATEST\", \"GROUP_CONCAT\", \"GROUPING\", \"GTID_SUBSET\", \"GTID_SUBTRACT\", \"HEX\", \"HOUR\", \"ICU_VERSION\", \"IF\", \"IFNULL\",\n// 'IN',\n\"INET_ATON\", \"INET_NTOA\", \"INET6_ATON\", \"INET6_NTOA\", \"INSERT\", \"INSTR\", \"INTERNAL_AUTO_INCREMENT\", \"INTERNAL_AVG_ROW_LENGTH\", \"INTERNAL_CHECK_TIME\", \"INTERNAL_CHECKSUM\", \"INTERNAL_DATA_FREE\", \"INTERNAL_DATA_LENGTH\", \"INTERNAL_DD_CHAR_LENGTH\", \"INTERNAL_GET_COMMENT_OR_ERROR\", \"INTERNAL_GET_ENABLED_ROLE_JSON\", \"INTERNAL_GET_HOSTNAME\", \"INTERNAL_GET_USERNAME\", \"INTERNAL_GET_VIEW_WARNING_OR_ERROR\", \"INTERNAL_INDEX_COLUMN_CARDINALITY\", \"INTERNAL_INDEX_LENGTH\", \"INTERNAL_IS_ENABLED_ROLE\", \"INTERNAL_IS_MANDATORY_ROLE\", \"INTERNAL_KEYS_DISABLED\", \"INTERNAL_MAX_DATA_LENGTH\", \"INTERNAL_TABLE_ROWS\", \"INTERNAL_UPDATE_TIME\", \"INTERVAL\", \"IS\", \"IS_FREE_LOCK\", \"IS_IPV4\", \"IS_IPV4_COMPAT\", \"IS_IPV4_MAPPED\", \"IS_IPV6\", \"IS NOT\", \"IS NOT NULL\", \"IS NULL\", \"IS_USED_LOCK\", \"IS_UUID\", \"ISNULL\", \"JSON_ARRAY\", \"JSON_ARRAY_APPEND\", \"JSON_ARRAY_INSERT\", \"JSON_ARRAYAGG\", \"JSON_CONTAINS\", \"JSON_CONTAINS_PATH\", \"JSON_DEPTH\", \"JSON_EXTRACT\", \"JSON_INSERT\", \"JSON_KEYS\", \"JSON_LENGTH\", \"JSON_MERGE\", \"JSON_MERGE_PATCH\", \"JSON_MERGE_PRESERVE\", \"JSON_OBJECT\", \"JSON_OBJECTAGG\", \"JSON_OVERLAPS\", \"JSON_PRETTY\", \"JSON_QUOTE\", \"JSON_REMOVE\", \"JSON_REPLACE\", \"JSON_SCHEMA_VALID\", \"JSON_SCHEMA_VALIDATION_REPORT\", \"JSON_SEARCH\", \"JSON_SET\", \"JSON_STORAGE_FREE\", \"JSON_STORAGE_SIZE\", \"JSON_TABLE\", \"JSON_TYPE\", \"JSON_UNQUOTE\", \"JSON_VALID\", \"JSON_VALUE\", \"LAG\", \"LAST_DAY\", \"LAST_INSERT_ID\", \"LAST_VALUE\", \"LCASE\", \"LEAD\", \"LEAST\", \"LEFT\", \"LENGTH\", \"LIKE\", \"LINESTRING\", \"LN\", \"LOAD_FILE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATE\", \"LOG\", \"LOG10\", \"LOG2\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MAKE_SET\", \"MAKEDATE\", \"MAKETIME\", \"MASTER_POS_WAIT\", \"MATCH\", \"MAX\", \"MBRCONTAINS\", \"MBRCOVEREDBY\", \"MBRCOVERS\", \"MBRDISJOINT\", \"MBREQUALS\", \"MBRINTERSECTS\", \"MBROVERLAPS\", \"MBRTOUCHES\", \"MBRWITHIN\", \"MD5\", \"MEMBER OF\", \"MICROSECOND\", \"MID\", \"MIN\", \"MINUTE\", \"MOD\", \"MONTH\", \"MONTHNAME\", \"MULTILINESTRING\", \"MULTIPOINT\", \"MULTIPOLYGON\", \"NAME_CONST\", \"NOT\", \"NOT IN\", \"NOT LIKE\", \"NOT REGEXP\", \"NOW\", \"NTH_VALUE\", \"NTILE\", \"NULLIF\", \"OCT\", \"OCTET_LENGTH\",\n// 'OR',\n\"ORD\", \"PERCENT_RANK\", \"PERIOD_ADD\", \"PERIOD_DIFF\", \"PI\", \"POINT\", \"POLYGON\", \"POSITION\", \"POW\", \"POWER\", \"PS_CURRENT_THREAD_ID\", \"PS_THREAD_ID\", \"QUARTER\", \"QUOTE\", \"RADIANS\", \"RAND\", \"RANDOM_BYTES\", \"RANK\", \"REGEXP\", \"REGEXP_INSTR\", \"REGEXP_LIKE\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"RELEASE_ALL_LOCKS\", \"RELEASE_LOCK\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RIGHT\", \"RLIKE\", \"ROLES_GRAPHML\", \"ROUND\", \"ROW_COUNT\", \"ROW_NUMBER\", \"RPAD\", \"RTRIM\", \"SCHEMA\", \"SEC_TO_TIME\", \"SECOND\", \"SESSION_USER\", \"SHA1\", \"SHA2\", \"SIGN\", \"SIN\", \"SLEEP\", \"SOUNDEX\", \"SOUNDS LIKE\", \"SOURCE_POS_WAIT\", \"SPACE\", \"SQRT\", \"ST_AREA\", \"ST_ASBINARY\", \"ST_ASGEOJSON\", \"ST_ASTEXT\", \"ST_BUFFER\", \"ST_BUFFER_STRATEGY\", \"ST_CENTROID\", \"ST_COLLECT\", \"ST_CONTAINS\", \"ST_CONVEXHULL\", \"ST_CROSSES\", \"ST_DIFFERENCE\", \"ST_DIMENSION\", \"ST_DISJOINT\", \"ST_DISTANCE\", \"ST_DISTANCE_SPHERE\", \"ST_ENDPOINT\", \"ST_ENVELOPE\", \"ST_EQUALS\", \"ST_EXTERIORRING\", \"ST_FRECHETDISTANCE\", \"ST_GEOHASH\", \"ST_GEOMCOLLFROMTEXT\", \"ST_GEOMCOLLFROMWKB\", \"ST_GEOMETRYN\", \"ST_GEOMETRYTYPE\", \"ST_GEOMFROMGEOJSON\", \"ST_GEOMFROMTEXT\", \"ST_GEOMFROMWKB\", \"ST_HAUSDORFFDISTANCE\", \"ST_INTERIORRINGN\", \"ST_INTERSECTION\", \"ST_INTERSECTS\", \"ST_ISCLOSED\", \"ST_ISEMPTY\", \"ST_ISSIMPLE\", \"ST_ISVALID\", \"ST_LATFROMGEOHASH\", \"ST_LATITUDE\", \"ST_LENGTH\", \"ST_LINEFROMTEXT\", \"ST_LINEFROMWKB\", \"ST_LINEINTERPOLATEPOINT\", \"ST_LINEINTERPOLATEPOINTS\", \"ST_LONGFROMGEOHASH\", \"ST_LONGITUDE\", \"ST_MAKEENVELOPE\", \"ST_MLINEFROMTEXT\", \"ST_MLINEFROMWKB\", \"ST_MPOINTFROMTEXT\", \"ST_MPOINTFROMWKB\", \"ST_MPOLYFROMTEXT\", \"ST_MPOLYFROMWKB\", \"ST_NUMGEOMETRIES\", \"ST_NUMINTERIORRING\", \"ST_NUMPOINTS\", \"ST_OVERLAPS\", \"ST_POINTATDISTANCE\", \"ST_POINTFROMGEOHASH\", \"ST_POINTFROMTEXT\", \"ST_POINTFROMWKB\", \"ST_POINTN\", \"ST_POLYFROMTEXT\", \"ST_POLYFROMWKB\", \"ST_SIMPLIFY\", \"ST_SRID\", \"ST_STARTPOINT\", \"ST_SWAPXY\", \"ST_SYMDIFFERENCE\", \"ST_TOUCHES\", \"ST_TRANSFORM\", \"ST_UNION\", \"ST_VALIDATE\", \"ST_WITHIN\", \"ST_X\", \"ST_Y\", \"STATEMENT_DIGEST\", \"STATEMENT_DIGEST_TEXT\", \"STD\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STR_TO_DATE\", \"STRCMP\", \"SUBDATE\", \"SUBSTR\", \"SUBSTRING\", \"SUBSTRING_INDEX\", \"SUBTIME\", \"SUM\", \"SYSDATE\", \"SYSTEM_USER\", \"TAN\", \"TIME\", \"TIME_FORMAT\", \"TIME_TO_SEC\", \"TIMEDIFF\", \"TIMESTAMP\", \"TIMESTAMPADD\", \"TIMESTAMPDIFF\", \"TO_BASE64\", \"TO_DAYS\", \"TO_SECONDS\", \"TRIM\", \"TRUNCATE\", \"UCASE\", \"UNCOMPRESS\", \"UNCOMPRESSED_LENGTH\", \"UNHEX\", \"UNIX_TIMESTAMP\", \"UPDATEXML\", \"UPPER\",\n// 'USER',\n\"UTC_DATE\", \"UTC_TIME\", \"UTC_TIMESTAMP\", \"UUID\", \"UUID_SHORT\", \"UUID_TO_BIN\", \"VALIDATE_PASSWORD_STRENGTH\", \"VALUES\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\", \"VERSION\", \"WAIT_FOR_EXECUTED_GTID_SET\", \"WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS\", \"WEEK\", \"WEEKDAY\", \"WEEKOFYEAR\", \"WEIGHT_STRING\",\n// 'XOR',\n\"YEAR\", \"YEARWEEK\"];\n\n// src/languages/mysql/mysql.formatter.ts\nvar reservedSelect6 = expandPhrases([\"SELECT [ALL | DISTINCT | DISTINCTROW]\"]);\nvar reservedClauses6 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]\", \"REPLACE [LOW_PRIORITY | DELAYED] [INTO]\", \"VALUES\", \"ON DUPLICATE KEY UPDATE\",\n// - update:\n\"SET\"]);\nvar standardOnelineClauses6 = expandPhrases([\"CREATE [TEMPORARY] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses6 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE [LOW_PRIORITY] [IGNORE]\",\n// - delete:\n\"DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM\",\n// - drop table:\n\"DROP [TEMPORARY] TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"ADD [COLUMN]\", \"{CHANGE | MODIFY} [COLUMN]\", \"DROP [COLUMN]\", \"RENAME [TO | AS]\", \"RENAME COLUMN\", \"ALTER [COLUMN]\", \"{SET | DROP} DEFAULT\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html\n\"ALTER DATABASE\", \"ALTER EVENT\", \"ALTER FUNCTION\", \"ALTER INSTANCE\", \"ALTER LOGFILE GROUP\", \"ALTER PROCEDURE\", \"ALTER RESOURCE GROUP\", \"ALTER SERVER\", \"ALTER TABLESPACE\", \"ALTER USER\", \"ALTER VIEW\", \"ANALYZE TABLE\", \"BINLOG\", \"CACHE INDEX\", \"CALL\", \"CHANGE MASTER TO\", \"CHANGE REPLICATION FILTER\", \"CHANGE REPLICATION SOURCE TO\", \"CHECK TABLE\", \"CHECKSUM TABLE\", \"CLONE\", \"COMMIT\", \"CREATE DATABASE\", \"CREATE EVENT\", \"CREATE FUNCTION\", \"CREATE FUNCTION\", \"CREATE INDEX\", \"CREATE LOGFILE GROUP\", \"CREATE PROCEDURE\", \"CREATE RESOURCE GROUP\", \"CREATE ROLE\", \"CREATE SERVER\", \"CREATE SPATIAL REFERENCE SYSTEM\", \"CREATE TABLESPACE\", \"CREATE TRIGGER\", \"CREATE USER\", \"DEALLOCATE PREPARE\", \"DESCRIBE\", \"DROP DATABASE\", \"DROP EVENT\", \"DROP FUNCTION\", \"DROP FUNCTION\", \"DROP INDEX\", \"DROP LOGFILE GROUP\", \"DROP PROCEDURE\", \"DROP RESOURCE GROUP\", \"DROP ROLE\", \"DROP SERVER\", \"DROP SPATIAL REFERENCE SYSTEM\", \"DROP TABLESPACE\", \"DROP TRIGGER\", \"DROP USER\", \"DROP VIEW\", \"EXECUTE\", \"EXPLAIN\", \"FLUSH\", \"GRANT\", \"HANDLER\", \"HELP\", \"IMPORT TABLE\", \"INSTALL COMPONENT\", \"INSTALL PLUGIN\", \"KILL\", \"LOAD DATA\", \"LOAD INDEX INTO CACHE\", \"LOAD XML\", \"LOCK INSTANCE FOR BACKUP\", \"LOCK TABLES\", \"MASTER_POS_WAIT\", \"OPTIMIZE TABLE\", \"PREPARE\", \"PURGE BINARY LOGS\", \"RELEASE SAVEPOINT\", \"RENAME TABLE\", \"RENAME USER\", \"REPAIR TABLE\", \"RESET\", \"RESET MASTER\", \"RESET PERSIST\", \"RESET REPLICA\", \"RESET SLAVE\", \"RESTART\", \"REVOKE\", \"ROLLBACK\", \"ROLLBACK TO SAVEPOINT\", \"SAVEPOINT\", \"SET CHARACTER SET\", \"SET DEFAULT ROLE\", \"SET NAMES\", \"SET PASSWORD\", \"SET RESOURCE GROUP\", \"SET ROLE\", \"SET TRANSACTION\", \"SHOW\", \"SHOW BINARY LOGS\", \"SHOW BINLOG EVENTS\", \"SHOW CHARACTER SET\", \"SHOW COLLATION\", \"SHOW COLUMNS\", \"SHOW CREATE DATABASE\", \"SHOW CREATE EVENT\", \"SHOW CREATE FUNCTION\", \"SHOW CREATE PROCEDURE\", \"SHOW CREATE TABLE\", \"SHOW CREATE TRIGGER\", \"SHOW CREATE USER\", \"SHOW CREATE VIEW\", \"SHOW DATABASES\", \"SHOW ENGINE\", \"SHOW ENGINES\", \"SHOW ERRORS\", \"SHOW EVENTS\", \"SHOW FUNCTION CODE\", \"SHOW FUNCTION STATUS\", \"SHOW GRANTS\", \"SHOW INDEX\", \"SHOW MASTER STATUS\", \"SHOW OPEN TABLES\", \"SHOW PLUGINS\", \"SHOW PRIVILEGES\", \"SHOW PROCEDURE CODE\", \"SHOW PROCEDURE STATUS\", \"SHOW PROCESSLIST\", \"SHOW PROFILE\", \"SHOW PROFILES\", \"SHOW RELAYLOG EVENTS\", \"SHOW REPLICA STATUS\", \"SHOW REPLICAS\", \"SHOW SLAVE\", \"SHOW SLAVE HOSTS\", \"SHOW STATUS\", \"SHOW TABLE STATUS\", \"SHOW TABLES\", \"SHOW TRIGGERS\", \"SHOW VARIABLES\", \"SHOW WARNINGS\", \"SHUTDOWN\", \"SOURCE_POS_WAIT\", \"START GROUP_REPLICATION\", \"START REPLICA\", \"START SLAVE\", \"START TRANSACTION\", \"STOP GROUP_REPLICATION\", \"STOP REPLICA\", \"STOP SLAVE\", \"TABLE\", \"UNINSTALL COMPONENT\", \"UNINSTALL PLUGIN\", \"UNLOCK INSTANCE\", \"UNLOCK TABLES\", \"USE\", \"XA\",\n// flow control\n// 'IF',\n\"ITERATE\", \"LEAVE\", \"LOOP\", \"REPEAT\", \"RETURN\", \"WHILE\"]);\nvar reservedSetOperations6 = expandPhrases([\"UNION [ALL | DISTINCT]\"]);\nvar reservedJoins6 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT} [OUTER] JOIN\",\n// non-standard joins\n\"STRAIGHT_JOIN\"]);\nvar reservedPhrases6 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL]\", \"CHARACTER SET\", \"{ROWS | RANGE} BETWEEN\", \"IDENTIFIED BY\"]);\nvar mysql = {\n  name: \"mysql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect6,\n    reservedClauses: [...reservedClauses6, ...standardOnelineClauses6, ...tabularOnelineClauses6],\n    reservedSetOperations: reservedSetOperations6,\n    reservedJoins: reservedJoins6,\n    reservedPhrases: reservedPhrases6,\n    supportsXor: true,\n    reservedKeywords: keywords6,\n    reservedDataTypes: dataTypes6,\n    reservedFunctionNames: functions6,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: ['\"\"-qq-bs', {\n      quote: \"''-qq-bs\",\n      prefixes: [\"N\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"B\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    identChars: {\n      first: \"$\",\n      rest: \"$\",\n      allowFirstCharNumber: true\n    },\n    variableTypes: [{\n      regex: \"@@?[A-Za-z0-9_.$]+\"\n    }, {\n      quote: '\"\"-qq-bs',\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"''-qq-bs\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"``\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }],\n    paramTypes: {\n      positional: true\n    },\n    lineCommentTypes: [\"--\", \"#\"],\n    operators: [\"%\", \":=\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"<=>\", \"->\", \"->>\", \"&&\", \"||\", \"!\", \"*.*\"\n    // Not actually an operator\n    ],\n    postProcess: postProcess2\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses6, ...tabularOnelineClauses6],\n    tabularOnelineClauses: tabularOnelineClauses6\n  }\n};\n\n// src/languages/tidb/tidb.keywords.ts\nvar keywords7 = [\n// https://docs.pingcap.com/tidb/stable/keywords\n\"ADD\",\n// (R)\n\"ALL\",\n// (R)\n\"ALTER\",\n// (R)\n\"ANALYZE\",\n// (R)\n\"AND\",\n// (R)\n\"ARRAY\",\n// (R)\n\"AS\",\n// (R)\n\"ASC\",\n// (R)\n\"BETWEEN\",\n// (R)\n\"BOTH\",\n// (R)\n\"BY\",\n// (R)\n\"CALL\",\n// (R)\n\"CASCADE\",\n// (R)\n\"CASE\",\n// (R)\n\"CHANGE\",\n// (R)\n\"CHECK\",\n// (R)\n\"COLLATE\",\n// (R)\n\"COLUMN\",\n// (R)\n\"CONSTRAINT\",\n// (R)\n\"CONTINUE\",\n// (R)\n\"CONVERT\",\n// (R)\n\"CREATE\",\n// (R)\n\"CROSS\",\n// (R)\n\"CURRENT_DATE\",\n// (R)\n\"CURRENT_ROLE\",\n// (R)\n\"CURRENT_TIME\",\n// (R)\n\"CURRENT_TIMESTAMP\",\n// (R)\n\"CURRENT_USER\",\n// (R)\n\"CURSOR\",\n// (R)\n\"DATABASE\",\n// (R)\n\"DATABASES\",\n// (R)\n\"DAY_HOUR\",\n// (R)\n\"DAY_MICROSECOND\",\n// (R)\n\"DAY_MINUTE\",\n// (R)\n\"DAY_SECOND\",\n// (R)\n\"DEFAULT\",\n// (R)\n\"DELAYED\",\n// (R)\n\"DELETE\",\n// (R)\n\"DESC\",\n// (R)\n\"DESCRIBE\",\n// (R)\n\"DISTINCT\",\n// (R)\n\"DISTINCTROW\",\n// (R)\n\"DIV\",\n// (R)\n\"DOUBLE\",\n// (R)\n\"DROP\",\n// (R)\n\"DUAL\",\n// (R)\n\"ELSE\",\n// (R)\n\"ELSEIF\",\n// (R)\n\"ENCLOSED\",\n// (R)\n\"ESCAPED\",\n// (R)\n\"EXCEPT\",\n// (R)\n\"EXISTS\",\n// (R)\n\"EXIT\",\n// (R)\n\"EXPLAIN\",\n// (R)\n\"FALSE\",\n// (R)\n\"FETCH\",\n// (R)\n\"FOR\",\n// (R)\n\"FORCE\",\n// (R)\n\"FOREIGN\",\n// (R)\n\"FROM\",\n// (R)\n\"FULLTEXT\",\n// (R)\n\"GENERATED\",\n// (R)\n\"GRANT\",\n// (R)\n\"GROUP\",\n// (R)\n\"GROUPS\",\n// (R)\n\"HAVING\",\n// (R)\n\"HIGH_PRIORITY\",\n// (R)\n\"HOUR_MICROSECOND\",\n// (R)\n\"HOUR_MINUTE\",\n// (R)\n\"HOUR_SECOND\",\n// (R)\n\"IF\",\n// (R)\n\"IGNORE\",\n// (R)\n\"ILIKE\",\n// (R)\n\"IN\",\n// (R)\n\"INDEX\",\n// (R)\n\"INFILE\",\n// (R)\n\"INNER\",\n// (R)\n\"INOUT\",\n// (R)\n\"INSERT\",\n// (R)\n\"INTERSECT\",\n// (R)\n\"INTERVAL\",\n// (R)\n\"INTO\",\n// (R)\n\"IS\",\n// (R)\n\"ITERATE\",\n// (R)\n\"JOIN\",\n// (R)\n\"KEY\",\n// (R)\n\"KEYS\",\n// (R)\n\"KILL\",\n// (R)\n\"LEADING\",\n// (R)\n\"LEAVE\",\n// (R)\n\"LEFT\",\n// (R)\n\"LIKE\",\n// (R)\n\"LIMIT\",\n// (R)\n\"LINEAR\",\n// (R)\n\"LINES\",\n// (R)\n\"LOAD\",\n// (R)\n\"LOCALTIME\",\n// (R)\n\"LOCALTIMESTAMP\",\n// (R)\n\"LOCK\",\n// (R)\n\"LONG\",\n// (R)\n\"LOW_PRIORITY\",\n// (R)\n\"MATCH\",\n// (R)\n\"MAXVALUE\",\n// (R)\n\"MINUTE_MICROSECOND\",\n// (R)\n\"MINUTE_SECOND\",\n// (R)\n\"MOD\",\n// (R)\n\"NATURAL\",\n// (R)\n\"NOT\",\n// (R)\n\"NO_WRITE_TO_BINLOG\",\n// (R)\n\"NULL\",\n// (R)\n\"OF\",\n// (R)\n\"ON\",\n// (R)\n\"OPTIMIZE\",\n// (R)\n\"OPTION\",\n// (R)\n\"OPTIONALLY\",\n// (R)\n\"OR\",\n// (R)\n\"ORDER\",\n// (R)\n\"OUT\",\n// (R)\n\"OUTER\",\n// (R)\n\"OUTFILE\",\n// (R)\n\"OVER\",\n// (R)\n\"PARTITION\",\n// (R)\n\"PRIMARY\",\n// (R)\n\"PROCEDURE\",\n// (R)\n\"RANGE\",\n// (R)\n\"READ\",\n// (R)\n\"RECURSIVE\",\n// (R)\n\"REFERENCES\",\n// (R)\n\"REGEXP\",\n// (R)\n\"RELEASE\",\n// (R)\n\"RENAME\",\n// (R)\n\"REPEAT\",\n// (R)\n\"REPLACE\",\n// (R)\n\"REQUIRE\",\n// (R)\n\"RESTRICT\",\n// (R)\n\"REVOKE\",\n// (R)\n\"RIGHT\",\n// (R)\n\"RLIKE\",\n// (R)\n\"ROW\",\n// (R)\n\"ROWS\",\n// (R)\n\"SECOND_MICROSECOND\",\n// (R)\n\"SELECT\",\n// (R)\n\"SET\",\n// (R)\n\"SHOW\",\n// (R)\n\"SPATIAL\",\n// (R)\n\"SQL\",\n// (R)\n\"SQLEXCEPTION\",\n// (R)\n\"SQLSTATE\",\n// (R)\n\"SQLWARNING\",\n// (R)\n\"SQL_BIG_RESULT\",\n// (R)\n\"SQL_CALC_FOUND_ROWS\",\n// (R)\n\"SQL_SMALL_RESULT\",\n// (R)\n\"SSL\",\n// (R)\n\"STARTING\",\n// (R)\n\"STATS_EXTENDED\",\n// (R)\n\"STORED\",\n// (R)\n\"STRAIGHT_JOIN\",\n// (R)\n\"TABLE\",\n// (R)\n\"TABLESAMPLE\",\n// (R)\n\"TERMINATED\",\n// (R)\n\"THEN\",\n// (R)\n\"TO\",\n// (R)\n\"TRAILING\",\n// (R)\n\"TRIGGER\",\n// (R)\n\"TRUE\",\n// (R)\n\"TiDB_CURRENT_TSO\",\n// (R)\n\"UNION\",\n// (R)\n\"UNIQUE\",\n// (R)\n\"UNLOCK\",\n// (R)\n\"UNSIGNED\",\n// (R)\n\"UNTIL\",\n// (R)\n\"UPDATE\",\n// (R)\n\"USAGE\",\n// (R)\n\"USE\",\n// (R)\n\"USING\",\n// (R)\n\"UTC_DATE\",\n// (R)\n\"UTC_TIME\",\n// (R)\n\"UTC_TIMESTAMP\",\n// (R)\n\"VALUES\",\n// (R)\n\"VIRTUAL\",\n// (R)\n\"WHEN\",\n// (R)\n\"WHERE\",\n// (R)\n\"WHILE\",\n// (R)\n\"WINDOW\",\n// (R)\n\"WITH\",\n// (R)\n\"WRITE\",\n// (R)\n\"XOR\",\n// (R)\n\"YEAR_MONTH\",\n// (R)\n\"ZEROFILL\"\n// (R)\n];\nvar dataTypes7 = [\n// https://docs.pingcap.com/tidb/stable/data-type-overview\n\"BIGINT\",\n// (R)\n\"BINARY\",\n// (R)\n\"BIT\", \"BLOB\",\n// (R)\n\"BOOL\",\n// (R)\n\"BOOLEAN\",\n// (R)\n\"CHAR\",\n// (R)\n\"CHARACTER\",\n// (R)\n\"DATE\",\n// (R)\n\"DATETIME\",\n// (R)\n\"DEC\",\n// (R)\n\"DECIMAL\",\n// (R)\n\"DOUBLE PRECISION\", \"DOUBLE\",\n// (R)\n\"ENUM\", \"FIXED\", \"INT\",\n// (R)\n\"INT1\",\n// (R)\n\"INT2\",\n// (R)\n\"INT3\",\n// (R)\n\"INT4\",\n// (R)\n\"INT8\",\n// (R)\n\"INTEGER\",\n// (R)\n\"LONGBLOB\",\n// (R)\n\"LONGTEXT\",\n// (R)\n\"MEDIUMBLOB\",\n// (R)\n\"MEDIUMINT\",\n// (R)\n\"MIDDLEINT\",\n// (R)\n\"NATIONAL CHAR\",\n// (R)\n\"NATIONAL VARCHAR\",\n// (R)\n\"NUMERIC\",\n// (R)\n\"PRECISION\",\n// (R)\n\"SMALLINT\",\n// (R)\n\"TEXT\", \"TIME\", \"TIMESTAMP\",\n// (R)\n\"TINYBLOB\",\n// (R)\n\"TINYINT\",\n// (R)\n\"TINYTEXT\",\n// (R)\n\"VARBINARY\",\n// (R)\n\"VARCHAR\",\n// (R)\n\"VARCHARACTER\",\n// (R)\n\"VARYING\",\n// (R)\n\"YEAR\"\n// 'SET' // handled as special-case in postProcess\n];\n\n// src/languages/tidb/tidb.functions.ts\nvar functions7 = [\n// https://docs.pingcap.com/tidb/stable/sql-statement-show-builtins\n// https://docs.pingcap.com/tidb/stable/functions-and-operators-overview\n// + MySQL aggregate functions: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html\n// + MySQL window functions: https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html\n\"ABS\", \"ACOS\", \"ADDDATE\", \"ADDTIME\", \"AES_DECRYPT\", \"AES_ENCRYPT\",\n// 'AND',\n\"ANY_VALUE\", \"ASCII\", \"ASIN\", \"ATAN\", \"ATAN2\", \"AVG\", \"BENCHMARK\", \"BIN\", \"BIN_TO_UUID\", \"BIT_AND\", \"BIT_COUNT\", \"BIT_LENGTH\", \"BIT_OR\", \"BIT_XOR\", \"BITAND\", \"BITNEG\", \"BITOR\", \"BITXOR\", \"CASE\", \"CAST\", \"CEIL\", \"CEILING\", \"CHAR_FUNC\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHARSET\", \"COALESCE\", \"COERCIBILITY\", \"COLLATION\", \"COMPRESS\", \"CONCAT\", \"CONCAT_WS\", \"CONNECTION_ID\", \"CONV\", \"CONVERT\", \"CONVERT_TZ\", \"COS\", \"COT\", \"COUNT\", \"CRC32\", \"CUME_DIST\", \"CURDATE\", \"CURRENT_DATE\", \"CURRENT_RESOURCE_GROUP\", \"CURRENT_ROLE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURTIME\", \"DATABASE\", \"DATE\", \"DATE_ADD\", \"DATE_FORMAT\", \"DATE_SUB\", \"DATEDIFF\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"DECODE\", \"DEFAULT_FUNC\", \"DEGREES\", \"DENSE_RANK\", \"DES_DECRYPT\", \"DES_ENCRYPT\", \"DIV\", \"ELT\", \"ENCODE\", \"ENCRYPT\", \"EQ\", \"EXP\", \"EXPORT_SET\", \"EXTRACT\", \"FIELD\", \"FIND_IN_SET\", \"FIRST_VALUE\", \"FLOOR\", \"FORMAT\", \"FORMAT_BYTES\", \"FORMAT_NANO_TIME\", \"FOUND_ROWS\", \"FROM_BASE64\", \"FROM_DAYS\", \"FROM_UNIXTIME\", \"GE\", \"GET_FORMAT\", \"GET_LOCK\", \"GETPARAM\", \"GREATEST\", \"GROUP_CONCAT\", \"GROUPING\", \"GT\", \"HEX\", \"HOUR\", \"IF\", \"IFNULL\", \"ILIKE\",\n// 'IN',\n\"INET6_ATON\", \"INET6_NTOA\", \"INET_ATON\", \"INET_NTOA\", \"INSERT_FUNC\", \"INSTR\", \"INTDIV\", \"INTERVAL\", \"IS_FREE_LOCK\", \"IS_IPV4\", \"IS_IPV4_COMPAT\", \"IS_IPV4_MAPPED\", \"IS_IPV6\", \"IS_USED_LOCK\", \"IS_UUID\", \"ISFALSE\", \"ISNULL\", \"ISTRUE\", \"JSON_ARRAY\", \"JSON_ARRAYAGG\", \"JSON_ARRAY_APPEND\", \"JSON_ARRAY_INSERT\", \"JSON_CONTAINS\", \"JSON_CONTAINS_PATH\", \"JSON_DEPTH\", \"JSON_EXTRACT\", \"JSON_INSERT\", \"JSON_KEYS\", \"JSON_LENGTH\", \"JSON_MEMBEROF\", \"JSON_MERGE\", \"JSON_MERGE_PATCH\", \"JSON_MERGE_PRESERVE\", \"JSON_OBJECT\", \"JSON_OBJECTAGG\", \"JSON_OVERLAPS\", \"JSON_PRETTY\", \"JSON_QUOTE\", \"JSON_REMOVE\", \"JSON_REPLACE\", \"JSON_SEARCH\", \"JSON_SET\", \"JSON_STORAGE_FREE\", \"JSON_STORAGE_SIZE\", \"JSON_TYPE\", \"JSON_UNQUOTE\", \"JSON_VALID\", \"LAG\", \"LAST_DAY\", \"LAST_INSERT_ID\", \"LAST_VALUE\", \"LASTVAL\", \"LCASE\", \"LE\", \"LEAD\", \"LEAST\", \"LEFT\", \"LEFTSHIFT\", \"LENGTH\", \"LIKE\", \"LN\", \"LOAD_FILE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATE\", \"LOG\", \"LOG10\", \"LOG2\", \"LOWER\", \"LPAD\", \"LT\", \"LTRIM\", \"MAKE_SET\", \"MAKEDATE\", \"MAKETIME\", \"MASTER_POS_WAIT\", \"MAX\", \"MD5\", \"MICROSECOND\", \"MID\", \"MIN\", \"MINUS\", \"MINUTE\", \"MOD\", \"MONTH\", \"MONTHNAME\", \"MUL\", \"NAME_CONST\", \"NE\", \"NEXTVAL\", \"NOT\", \"NOW\", \"NTH_VALUE\", \"NTILE\", \"NULLEQ\", \"OCT\", \"OCTET_LENGTH\", \"OLD_PASSWORD\",\n// 'OR',\n\"ORD\", \"PASSWORD_FUNC\", \"PERCENT_RANK\", \"PERIOD_ADD\", \"PERIOD_DIFF\", \"PI\", \"PLUS\", \"POSITION\", \"POW\", \"POWER\", \"QUARTER\", \"QUOTE\", \"RADIANS\", \"RAND\", \"RANDOM_BYTES\", \"RANK\", \"REGEXP\", \"REGEXP_INSTR\", \"REGEXP_LIKE\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"RELEASE_ALL_LOCKS\", \"RELEASE_LOCK\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RIGHT\", \"RIGHTSHIFT\", \"ROUND\", \"ROW_COUNT\", \"ROW_NUMBER\", \"RPAD\", \"RTRIM\", \"SCHEMA\", \"SEC_TO_TIME\", \"SECOND\", \"SESSION_USER\", \"SETVAL\", \"SETVAR\", \"SHA\", \"SHA1\", \"SHA2\", \"SIGN\", \"SIN\", \"SLEEP\", \"SM3\", \"SPACE\", \"SQRT\", \"STD\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STR_TO_DATE\", \"STRCMP\", \"SUBDATE\", \"SUBSTR\", \"SUBSTRING\", \"SUBSTRING_INDEX\", \"SUBTIME\", \"SUM\", \"SYSDATE\", \"SYSTEM_USER\", \"TAN\", \"TIDB_BOUNDED_STALENESS\", \"TIDB_CURRENT_TSO\", \"TIDB_DECODE_BINARY_PLAN\", \"TIDB_DECODE_KEY\", \"TIDB_DECODE_PLAN\", \"TIDB_DECODE_SQL_DIGESTS\", \"TIDB_ENCODE_SQL_DIGEST\", \"TIDB_IS_DDL_OWNER\", \"TIDB_PARSE_TSO\", \"TIDB_PARSE_TSO_LOGICAL\", \"TIDB_ROW_CHECKSUM\", \"TIDB_SHARD\", \"TIDB_VERSION\", \"TIME\", \"TIME_FORMAT\", \"TIME_TO_SEC\", \"TIMEDIFF\", \"TIMESTAMP\", \"TIMESTAMPADD\", \"TIMESTAMPDIFF\", \"TO_BASE64\", \"TO_DAYS\", \"TO_SECONDS\", \"TRANSLATE\", \"TRIM\", \"TRUNCATE\", \"UCASE\", \"UNARYMINUS\", \"UNCOMPRESS\", \"UNCOMPRESSED_LENGTH\", \"UNHEX\", \"UNIX_TIMESTAMP\", \"UPPER\",\n// 'USER',\n\"UTC_DATE\", \"UTC_TIME\", \"UTC_TIMESTAMP\", \"UUID\", \"UUID_SHORT\", \"UUID_TO_BIN\", \"VALIDATE_PASSWORD_STRENGTH\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\", \"VERSION\", \"VITESS_HASH\", \"WEEK\", \"WEEKDAY\", \"WEEKOFYEAR\", \"WEIGHT_STRING\",\n// 'XOR',\n\"YEAR\", \"YEARWEEK\"];\n\n// src/languages/tidb/tidb.formatter.ts\nvar reservedSelect7 = expandPhrases([\"SELECT [ALL | DISTINCT | DISTINCTROW]\"]);\nvar reservedClauses7 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]\", \"REPLACE [LOW_PRIORITY | DELAYED] [INTO]\", \"VALUES\", \"ON DUPLICATE KEY UPDATE\",\n// - update:\n\"SET\"]);\nvar standardOnelineClauses7 = expandPhrases([\"CREATE [TEMPORARY] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses7 = expandPhrases([\n// https://docs.pingcap.com/tidb/stable/sql-statement-create-view\n\"CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-update\n\"UPDATE [LOW_PRIORITY] [IGNORE]\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-delete\n\"DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-drop-table\n\"DROP [TEMPORARY] TABLE [IF EXISTS]\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-alter-table\n\"ALTER TABLE\", \"ADD [COLUMN]\", \"{CHANGE | MODIFY} [COLUMN]\", \"DROP [COLUMN]\", \"RENAME [TO | AS]\", \"RENAME COLUMN\", \"ALTER [COLUMN]\", \"{SET | DROP} DEFAULT\",\n// for alter column\n// https://docs.pingcap.com/tidb/stable/sql-statement-truncate\n\"TRUNCATE [TABLE]\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-alter-database\n\"ALTER DATABASE\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-alter-instance\n\"ALTER INSTANCE\", \"ALTER RESOURCE GROUP\", \"ALTER SEQUENCE\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-alter-user\n\"ALTER USER\", \"ALTER VIEW\", \"ANALYZE TABLE\", \"CHECK TABLE\", \"CHECKSUM TABLE\", \"COMMIT\", \"CREATE DATABASE\", \"CREATE INDEX\", \"CREATE RESOURCE GROUP\", \"CREATE ROLE\", \"CREATE SEQUENCE\", \"CREATE USER\", \"DEALLOCATE PREPARE\", \"DESCRIBE\", \"DROP DATABASE\", \"DROP INDEX\", \"DROP RESOURCE GROUP\", \"DROP ROLE\", \"DROP TABLESPACE\", \"DROP USER\", \"DROP VIEW\", \"EXPLAIN\", \"FLUSH\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-grant-privileges\n\"GRANT\", \"IMPORT TABLE\", \"INSTALL COMPONENT\", \"INSTALL PLUGIN\", \"KILL\", \"LOAD DATA\", \"LOCK INSTANCE FOR BACKUP\", \"LOCK TABLES\", \"OPTIMIZE TABLE\", \"PREPARE\", \"RELEASE SAVEPOINT\", \"RENAME TABLE\", \"RENAME USER\", \"REPAIR TABLE\", \"RESET\", \"REVOKE\", \"ROLLBACK\", \"ROLLBACK TO SAVEPOINT\", \"SAVEPOINT\", \"SET CHARACTER SET\", \"SET DEFAULT ROLE\", \"SET NAMES\", \"SET PASSWORD\", \"SET RESOURCE GROUP\", \"SET ROLE\", \"SET TRANSACTION\", \"SHOW\", \"SHOW BINARY LOGS\", \"SHOW BINLOG EVENTS\", \"SHOW CHARACTER SET\", \"SHOW COLLATION\", \"SHOW COLUMNS\", \"SHOW CREATE DATABASE\", \"SHOW CREATE TABLE\", \"SHOW CREATE USER\", \"SHOW CREATE VIEW\", \"SHOW DATABASES\", \"SHOW ENGINE\", \"SHOW ENGINES\", \"SHOW ERRORS\", \"SHOW EVENTS\", \"SHOW GRANTS\", \"SHOW INDEX\", \"SHOW MASTER STATUS\", \"SHOW OPEN TABLES\", \"SHOW PLUGINS\", \"SHOW PRIVILEGES\", \"SHOW PROCESSLIST\", \"SHOW PROFILE\", \"SHOW PROFILES\", \"SHOW STATUS\", \"SHOW TABLE STATUS\", \"SHOW TABLES\", \"SHOW TRIGGERS\", \"SHOW VARIABLES\", \"SHOW WARNINGS\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-table\n\"TABLE\", \"UNINSTALL COMPONENT\", \"UNINSTALL PLUGIN\", \"UNLOCK INSTANCE\", \"UNLOCK TABLES\",\n// https://docs.pingcap.com/tidb/stable/sql-statement-use\n\"USE\"]);\nvar reservedSetOperations7 = expandPhrases([\"UNION [ALL | DISTINCT]\"]);\nvar reservedJoins7 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT} [OUTER] JOIN\",\n// non-standard joins\n\"STRAIGHT_JOIN\"]);\nvar reservedPhrases7 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL]\", \"CHARACTER SET\", \"{ROWS | RANGE} BETWEEN\", \"IDENTIFIED BY\"]);\nvar tidb = {\n  name: \"tidb\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect7,\n    reservedClauses: [...reservedClauses7, ...standardOnelineClauses7, ...tabularOnelineClauses7],\n    reservedSetOperations: reservedSetOperations7,\n    reservedJoins: reservedJoins7,\n    reservedPhrases: reservedPhrases7,\n    supportsXor: true,\n    reservedKeywords: keywords7,\n    reservedDataTypes: dataTypes7,\n    reservedFunctionNames: functions7,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: ['\"\"-qq-bs', {\n      quote: \"''-qq-bs\",\n      prefixes: [\"N\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"B\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    identChars: {\n      first: \"$\",\n      rest: \"$\",\n      allowFirstCharNumber: true\n    },\n    variableTypes: [{\n      regex: \"@@?[A-Za-z0-9_.$]+\"\n    }, {\n      quote: '\"\"-qq-bs',\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"''-qq-bs\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }, {\n      quote: \"``\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }],\n    paramTypes: {\n      positional: true\n    },\n    lineCommentTypes: [\"--\", \"#\"],\n    operators: [\"%\", \":=\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"<=>\", \"->\", \"->>\", \"&&\", \"||\", \"!\", \"*.*\"\n    // Not actually an operator\n    ],\n    postProcess: postProcess2\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses7, ...tabularOnelineClauses7],\n    tabularOnelineClauses: tabularOnelineClauses7\n  }\n};\n\n// src/languages/n1ql/n1ql.functions.ts\nvar functions8 = [\n// https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/functions.html\n\"ABORT\", \"ABS\", \"ACOS\", \"ADVISOR\", \"ARRAY_AGG\", \"ARRAY_AGG\", \"ARRAY_APPEND\", \"ARRAY_AVG\", \"ARRAY_BINARY_SEARCH\", \"ARRAY_CONCAT\", \"ARRAY_CONTAINS\", \"ARRAY_COUNT\", \"ARRAY_DISTINCT\", \"ARRAY_EXCEPT\", \"ARRAY_FLATTEN\", \"ARRAY_IFNULL\", \"ARRAY_INSERT\", \"ARRAY_INTERSECT\", \"ARRAY_LENGTH\", \"ARRAY_MAX\", \"ARRAY_MIN\", \"ARRAY_MOVE\", \"ARRAY_POSITION\", \"ARRAY_PREPEND\", \"ARRAY_PUT\", \"ARRAY_RANGE\", \"ARRAY_REMOVE\", \"ARRAY_REPEAT\", \"ARRAY_REPLACE\", \"ARRAY_REVERSE\", \"ARRAY_SORT\", \"ARRAY_STAR\", \"ARRAY_SUM\", \"ARRAY_SYMDIFF\", \"ARRAY_SYMDIFF1\", \"ARRAY_SYMDIFFN\", \"ARRAY_UNION\", \"ASIN\", \"ATAN\", \"ATAN2\", \"AVG\", \"BASE64\", \"BASE64_DECODE\", \"BASE64_ENCODE\", \"BITAND \", \"BITCLEAR \", \"BITNOT \", \"BITOR \", \"BITSET \", \"BITSHIFT \", \"BITTEST \", \"BITXOR \", \"CEIL\", \"CLOCK_LOCAL\", \"CLOCK_MILLIS\", \"CLOCK_STR\", \"CLOCK_TZ\", \"CLOCK_UTC\", \"COALESCE\", \"CONCAT\", \"CONCAT2\", \"CONTAINS\", \"CONTAINS_TOKEN\", \"CONTAINS_TOKEN_LIKE\", \"CONTAINS_TOKEN_REGEXP\", \"COS\", \"COUNT\", \"COUNT\", \"COUNTN\", \"CUME_DIST\", \"CURL\", \"DATE_ADD_MILLIS\", \"DATE_ADD_STR\", \"DATE_DIFF_MILLIS\", \"DATE_DIFF_STR\", \"DATE_FORMAT_STR\", \"DATE_PART_MILLIS\", \"DATE_PART_STR\", \"DATE_RANGE_MILLIS\", \"DATE_RANGE_STR\", \"DATE_TRUNC_MILLIS\", \"DATE_TRUNC_STR\", \"DECODE\", \"DECODE_JSON\", \"DEGREES\", \"DENSE_RANK\", \"DURATION_TO_STR\",\n// 'E',\n\"ENCODED_SIZE\", \"ENCODE_JSON\", \"EXP\", \"FIRST_VALUE\", \"FLOOR\", \"GREATEST\", \"HAS_TOKEN\", \"IFINF\", \"IFMISSING\", \"IFMISSINGORNULL\", \"IFNAN\", \"IFNANORINF\", \"IFNULL\", \"INITCAP\", \"ISARRAY\", \"ISATOM\", \"ISBITSET\", \"ISBOOLEAN\", \"ISNUMBER\", \"ISOBJECT\", \"ISSTRING\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"LEAST\", \"LENGTH\", \"LN\", \"LOG\", \"LOWER\", \"LTRIM\", \"MAX\", \"MEAN\", \"MEDIAN\", \"META\", \"MILLIS\", \"MILLIS_TO_LOCAL\", \"MILLIS_TO_STR\", \"MILLIS_TO_TZ\", \"MILLIS_TO_UTC\", \"MILLIS_TO_ZONE_NAME\", \"MIN\", \"MISSINGIF\", \"NANIF\", \"NEGINFIF\", \"NOW_LOCAL\", \"NOW_MILLIS\", \"NOW_STR\", \"NOW_TZ\", \"NOW_UTC\", \"NTH_VALUE\", \"NTILE\", \"NULLIF\", \"NVL\", \"NVL2\", \"OBJECT_ADD\", \"OBJECT_CONCAT\", \"OBJECT_INNER_PAIRS\", \"OBJECT_INNER_VALUES\", \"OBJECT_LENGTH\", \"OBJECT_NAMES\", \"OBJECT_PAIRS\", \"OBJECT_PUT\", \"OBJECT_REMOVE\", \"OBJECT_RENAME\", \"OBJECT_REPLACE\", \"OBJECT_UNWRAP\", \"OBJECT_VALUES\", \"PAIRS\", \"PERCENT_RANK\", \"PI\", \"POLY_LENGTH\", \"POSINFIF\", \"POSITION\", \"POWER\", \"RADIANS\", \"RANDOM\", \"RANK\", \"RATIO_TO_REPORT\", \"REGEXP_CONTAINS\", \"REGEXP_LIKE\", \"REGEXP_MATCHES\", \"REGEXP_POSITION\", \"REGEXP_REPLACE\", \"REGEXP_SPLIT\", \"REGEX_CONTAINS\", \"REGEX_LIKE\", \"REGEX_MATCHES\", \"REGEX_POSITION\", \"REGEX_REPLACE\", \"REGEX_SPLIT\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"ROUND\", \"ROW_NUMBER\", \"RTRIM\", \"SEARCH\", \"SEARCH_META\", \"SEARCH_SCORE\", \"SIGN\", \"SIN\", \"SPLIT\", \"SQRT\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STR_TO_DURATION\", \"STR_TO_MILLIS\", \"STR_TO_TZ\", \"STR_TO_UTC\", \"STR_TO_ZONE_NAME\", \"SUBSTR\", \"SUFFIXES\", \"SUM\", \"TAN\", \"TITLE\", \"TOARRAY\", \"TOATOM\", \"TOBOOLEAN\", \"TOKENS\", \"TOKENS\", \"TONUMBER\", \"TOOBJECT\", \"TOSTRING\", \"TRIM\", \"TRUNC\",\n// 'TYPE', // disabled\n\"UPPER\", \"UUID\", \"VARIANCE\", \"VARIANCE_POP\", \"VARIANCE_SAMP\", \"VAR_POP\", \"VAR_SAMP\", \"WEEKDAY_MILLIS\", \"WEEKDAY_STR\",\n// type casting\n// not implemented in N1QL, but added here now for the sake of tests\n// https://docs.couchbase.com/server/current/analytics/3_query.html#Vs_SQL-92\n\"CAST\"];\n\n// src/languages/n1ql/n1ql.keywords.ts\nvar keywords8 = [\n// https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n\"ADVISE\", \"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"AT\", \"BEGIN\", \"BETWEEN\", \"BINARY\", \"BOOLEAN\", \"BREAK\", \"BUCKET\", \"BUILD\", \"BY\", \"CALL\", \"CASE\", \"CAST\", \"CLUSTER\", \"COLLATE\", \"COLLECTION\", \"COMMIT\", \"COMMITTED\", \"CONNECT\", \"CONTINUE\", \"CORRELATED\", \"COVER\", \"CREATE\", \"CURRENT\", \"DATABASE\", \"DATASET\", \"DATASTORE\", \"DECLARE\", \"DECREMENT\", \"DELETE\", \"DERIVED\", \"DESC\", \"DESCRIBE\", \"DISTINCT\", \"DO\", \"DROP\", \"EACH\", \"ELEMENT\", \"ELSE\", \"END\", \"EVERY\", \"EXCEPT\", \"EXCLUDE\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\", \"FALSE\", \"FETCH\", \"FILTER\", \"FIRST\", \"FLATTEN\", \"FLUSH\", \"FOLLOWING\", \"FOR\", \"FORCE\", \"FROM\", \"FTS\", \"FUNCTION\", \"GOLANG\", \"GRANT\", \"GROUP\", \"GROUPS\", \"GSI\", \"HASH\", \"HAVING\", \"IF\", \"IGNORE\", \"ILIKE\", \"IN\", \"INCLUDE\", \"INCREMENT\", \"INDEX\", \"INFER\", \"INLINE\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"ISOLATION\", \"JAVASCRIPT\", \"JOIN\", \"KEY\", \"KEYS\", \"KEYSPACE\", \"KNOWN\", \"LANGUAGE\", \"LAST\", \"LEFT\", \"LET\", \"LETTING\", \"LEVEL\", \"LIKE\", \"LIMIT\", \"LSM\", \"MAP\", \"MAPPING\", \"MATCHED\", \"MATERIALIZED\", \"MERGE\", \"MINUS\", \"MISSING\", \"NAMESPACE\", \"NEST\", \"NL\", \"NO\", \"NOT\", \"NTH_VALUE\", \"NULL\", \"NULLS\", \"NUMBER\", \"OBJECT\", \"OFFSET\", \"ON\", \"OPTION\", \"OPTIONS\", \"OR\", \"ORDER\", \"OTHERS\", \"OUTER\", \"OVER\", \"PARSE\", \"PARTITION\", \"PASSWORD\", \"PATH\", \"POOL\", \"PRECEDING\", \"PREPARE\", \"PRIMARY\", \"PRIVATE\", \"PRIVILEGE\", \"PROBE\", \"PROCEDURE\", \"PUBLIC\", \"RANGE\", \"RAW\", \"REALM\", \"REDUCE\", \"RENAME\", \"RESPECT\", \"RETURN\", \"RETURNING\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLLBACK\", \"ROW\", \"ROWS\", \"SATISFIES\", \"SAVEPOINT\", \"SCHEMA\", \"SCOPE\", \"SELECT\", \"SELF\", \"SEMI\", \"SET\", \"SHOW\", \"SOME\", \"START\", \"STATISTICS\", \"STRING\", \"SYSTEM\", \"THEN\", \"TIES\", \"TO\", \"TRAN\", \"TRANSACTION\", \"TRIGGER\", \"TRUE\", \"TRUNCATE\", \"UNBOUNDED\", \"UNDER\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UNNEST\", \"UNSET\", \"UPDATE\", \"UPSERT\", \"USE\", \"USER\", \"USING\", \"VALIDATE\", \"VALUE\", \"VALUED\", \"VALUES\", \"VIA\", \"VIEW\", \"WHEN\", \"WHERE\", \"WHILE\", \"WINDOW\", \"WITH\", \"WITHIN\", \"WORK\", \"XOR\"];\nvar dataTypes8 = [\n  // N1QL does not support any way of declaring types for columns.\n  // It does not support the CREATE TABLE statement nor the CAST() expression.\n  //\n  // It does have several keywords like ARRAY and OBJECT, which seem to refer to types,\n  // but they are used as operators. It also reserves several words like STRING and NUMBER,\n  // which it actually doesn't use.\n  //\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/datatypes.html\n];\n\n// src/languages/n1ql/n1ql.formatter.ts\nvar reservedSelect8 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses8 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE INTO\", \"WHEN [NOT] MATCHED THEN\", \"UPDATE SET\", \"INSERT\",\n// other\n\"NEST\", \"UNNEST\", \"RETURNING\"]);\nvar onelineClauses = expandPhrases([\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE FROM\",\n// - set schema:\n\"SET SCHEMA\",\n// https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n\"ADVISE\", \"ALTER INDEX\", \"BEGIN TRANSACTION\", \"BUILD INDEX\", \"COMMIT TRANSACTION\", \"CREATE COLLECTION\", \"CREATE FUNCTION\", \"CREATE INDEX\", \"CREATE PRIMARY INDEX\", \"CREATE SCOPE\", \"DROP COLLECTION\", \"DROP FUNCTION\", \"DROP INDEX\", \"DROP PRIMARY INDEX\", \"DROP SCOPE\", \"EXECUTE\", \"EXECUTE FUNCTION\", \"EXPLAIN\", \"GRANT\", \"INFER\", \"PREPARE\", \"REVOKE\", \"ROLLBACK TRANSACTION\", \"SAVEPOINT\", \"SET TRANSACTION\", \"UPDATE STATISTICS\", \"UPSERT\",\n// other\n\"LET\", \"SET CURRENT SCHEMA\", \"SHOW\", \"USE [PRIMARY] KEYS\"]);\nvar reservedSetOperations8 = expandPhrases([\"UNION [ALL]\", \"EXCEPT [ALL]\", \"INTERSECT [ALL]\"]);\nvar reservedJoins8 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT} [OUTER] JOIN\", \"INNER JOIN\"]);\nvar reservedPhrases8 = expandPhrases([\"{ROWS | RANGE | GROUPS} BETWEEN\"]);\nvar n1ql = {\n  name: \"n1ql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect8,\n    reservedClauses: [...reservedClauses8, ...onelineClauses],\n    reservedSetOperations: reservedSetOperations8,\n    reservedJoins: reservedJoins8,\n    reservedPhrases: reservedPhrases8,\n    supportsXor: true,\n    reservedKeywords: keywords8,\n    reservedDataTypes: dataTypes8,\n    reservedFunctionNames: functions8,\n    // NOTE: single quotes are actually not supported in N1QL,\n    // but we support them anyway as all other SQL dialects do,\n    // which simplifies writing tests that are shared between all dialects.\n    stringTypes: ['\"\"-bs', \"''-bs\"],\n    identTypes: [\"``\"],\n    extraParens: [\"[]\", \"{}\"],\n    paramTypes: {\n      positional: true,\n      numbered: [\"$\"],\n      named: [\"$\"]\n    },\n    lineCommentTypes: [\"#\", \"--\"],\n    operators: [\"%\", \"==\", \":\", \"||\"]\n  },\n  formatOptions: {\n    onelineClauses\n  }\n};\n\n// src/languages/plsql/plsql.keywords.ts\nvar keywords9 = [\n// https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/reservewords.htm\n// 'A',\n\"ADD\", \"AGENT\", \"AGGREGATE\", \"ALL\", \"ALTER\", \"AND\", \"ANY\", \"ARROW\", \"AS\", \"ASC\", \"AT\", \"ATTRIBUTE\", \"AUTHID\", \"AVG\", \"BEGIN\", \"BETWEEN\", \"BLOCK\", \"BODY\", \"BOTH\", \"BOUND\", \"BULK\", \"BY\", \"BYTE\",\n// 'C',\n\"CALL\", \"CALLING\", \"CASCADE\", \"CASE\", \"CHARSET\", \"CHARSETFORM\", \"CHARSETID\", \"CHECK\", \"CLOSE\", \"CLUSTER\", \"CLUSTERS\", \"COLAUTH\", \"COLLECT\", \"COLUMNS\", \"COMMENT\", \"COMMIT\", \"COMMITTED\", \"COMPILED\", \"COMPRESS\", \"CONNECT\", \"CONSTANT\", \"CONSTRUCTOR\", \"CONTEXT\", \"CONVERT\", \"COUNT\", \"CRASH\", \"CREATE\", \"CURRENT\", \"CURSOR\", \"CUSTOMDATUM\", \"DANGLING\", \"DATA\", \"DAY\", \"DECLARE\", \"DEFAULT\", \"DEFINE\", \"DELETE\", \"DESC\", \"DETERMINISTIC\", \"DISTINCT\", \"DROP\", \"DURATION\", \"ELEMENT\", \"ELSE\", \"ELSIF\", \"EMPTY\", \"END\", \"ESCAPE\", \"EXCEPT\", \"EXCEPTION\", \"EXCEPTIONS\", \"EXCLUSIVE\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXTERNAL\", \"FETCH\", \"FINAL\", \"FIXED\", \"FOR\", \"FORALL\", \"FORCE\", \"FORM\", \"FROM\", \"FUNCTION\", \"GENERAL\", \"GOTO\", \"GRANT\", \"GROUP\", \"HASH\", \"HAVING\", \"HEAP\", \"HIDDEN\", \"HOUR\", \"IDENTIFIED\", \"IF\", \"IMMEDIATE\", \"IN\", \"INCLUDING\", \"INDEX\", \"INDEXES\", \"INDICATOR\", \"INDICES\", \"INFINITE\", \"INSERT\", \"INSTANTIABLE\", \"INTERFACE\", \"INTERSECT\", \"INTERVAL\", \"INTO\", \"INVALIDATE\", \"IS\", \"ISOLATION\", \"JAVA\", \"LANGUAGE\", \"LARGE\", \"LEADING\", \"LENGTH\", \"LEVEL\", \"LIBRARY\", \"LIKE\", \"LIKE2\", \"LIKE4\", \"LIKEC\", \"LIMIT\", \"LIMITED\", \"LOCAL\", \"LOCK\", \"LOOP\", \"MAP\", \"MAX\", \"MAXLEN\", \"MEMBER\", \"MERGE\", \"MIN\", \"MINUS\", \"MINUTE\", \"MOD\", \"MODE\", \"MODIFY\", \"MONTH\", \"MULTISET\", \"NAME\", \"NAN\", \"NATIONAL\", \"NATIVE\", \"NEW\", \"NOCOMPRESS\", \"NOCOPY\", \"NOT\", \"NOWAIT\", \"NULL\", \"OBJECT\", \"OCICOLL\", \"OCIDATE\", \"OCIDATETIME\", \"OCIDURATION\", \"OCIINTERVAL\", \"OCILOBLOCATOR\", \"OCINUMBER\", \"OCIRAW\", \"OCIREF\", \"OCIREFCURSOR\", \"OCIROWID\", \"OCISTRING\", \"OCITYPE\", \"OF\", \"ON\", \"ONLY\", \"OPAQUE\", \"OPEN\", \"OPERATOR\", \"OPTION\", \"OR\", \"ORACLE\", \"ORADATA\", \"ORDER\", \"OVERLAPS\", \"ORGANIZATION\", \"ORLANY\", \"ORLVARY\", \"OTHERS\", \"OUT\", \"OVERRIDING\", \"PACKAGE\", \"PARALLEL_ENABLE\", \"PARAMETER\", \"PARAMETERS\", \"PARTITION\", \"PASCAL\", \"PIPE\", \"PIPELINED\", \"PRAGMA\", \"PRIOR\", \"PRIVATE\", \"PROCEDURE\", \"PUBLIC\", \"RAISE\", \"RANGE\", \"READ\", \"RECORD\", \"REF\", \"REFERENCE\", \"REM\", \"REMAINDER\", \"RENAME\", \"RESOURCE\", \"RESULT\", \"RETURN\", \"RETURNING\", \"REVERSE\", \"REVOKE\", \"ROLLBACK\", \"ROW\", \"SAMPLE\", \"SAVE\", \"SAVEPOINT\", \"SB1\", \"SB2\", \"SB4\", \"SECOND\", \"SEGMENT\", \"SELECT\", \"SELF\", \"SEPARATE\", \"SEQUENCE\", \"SERIALIZABLE\", \"SET\", \"SHARE\", \"SHORT\", \"SIZE\", \"SIZE_T\", \"SOME\", \"SPARSE\", \"SQL\", \"SQLCODE\", \"SQLDATA\", \"SQLNAME\", \"SQLSTATE\", \"STANDARD\", \"START\", \"STATIC\", \"STDDEV\", \"STORED\", \"STRING\", \"STRUCT\", \"STYLE\", \"SUBMULTISET\", \"SUBPARTITION\", \"SUBSTITUTABLE\", \"SUBTYPE\", \"SUM\", \"SYNONYM\", \"TABAUTH\", \"TABLE\", \"TDO\", \"THE\", \"THEN\", \"TIME\", \"TIMEZONE_ABBR\", \"TIMEZONE_HOUR\", \"TIMEZONE_MINUTE\", \"TIMEZONE_REGION\", \"TO\", \"TRAILING\", \"TRANSAC\", \"TRANSACTIONAL\", \"TRUSTED\", \"TYPE\", \"UB1\", \"UB2\", \"UB4\", \"UNDER\", \"UNION\", \"UNIQUE\", \"UNSIGNED\", \"UNTRUSTED\", \"UPDATE\", \"USE\", \"USING\", \"VALIST\", \"VALUE\", \"VALUES\", \"VARIABLE\", \"VARIANCE\", \"VARRAY\", \"VIEW\", \"VIEWS\", \"VOID\", \"WHEN\", \"WHERE\", \"WHILE\", \"WITH\", \"WORK\", \"WRAPPED\", \"WRITE\", \"YEAR\", \"ZONE\"];\nvar dataTypes9 = [\n// https://www.ibm.com/docs/en/db2/10.5?topic=plsql-data-types\n\"ARRAY\", \"BFILE_BASE\", \"BINARY\", \"BLOB_BASE\", \"CHAR VARYING\", \"CHAR_BASE\", \"CHAR\", \"CHARACTER VARYING\", \"CHARACTER\", \"CLOB_BASE\", \"DATE_BASE\", \"DATE\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"INTERVAL DAY\", \"INTERVAL YEAR\", \"LONG\", \"NATIONAL CHAR VARYING\", \"NATIONAL CHAR\", \"NATIONAL CHARACTER VARYING\", \"NATIONAL CHARACTER\", \"NCHAR VARYING\", \"NCHAR\", \"NCHAR\", \"NUMBER_BASE\", \"NUMBER\", \"NUMBERIC\", \"NVARCHAR\", \"PRECISION\", \"RAW\", \"TIMESTAMP\", \"UROWID\", \"VARCHAR\", \"VARCHAR2\"];\n\n// src/languages/plsql/plsql.functions.ts\nvar functions9 = [\n// https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions001.htm\n// numeric\n\"ABS\", \"ACOS\", \"ASIN\", \"ATAN\", \"ATAN2\", \"BITAND\", \"CEIL\", \"COS\", \"COSH\", \"EXP\", \"FLOOR\", \"LN\", \"LOG\", \"MOD\", \"NANVL\", \"POWER\", \"REMAINDER\", \"ROUND\", \"SIGN\", \"SIN\", \"SINH\", \"SQRT\", \"TAN\", \"TANH\", \"TRUNC\", \"WIDTH_BUCKET\",\n// character\n\"CHR\", \"CONCAT\", \"INITCAP\", \"LOWER\", \"LPAD\", \"LTRIM\", \"NLS_INITCAP\", \"NLS_LOWER\", \"NLSSORT\", \"NLS_UPPER\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REPLACE\", \"RPAD\", \"RTRIM\", \"SOUNDEX\", \"SUBSTR\", \"TRANSLATE\", \"TREAT\", \"TRIM\", \"UPPER\", \"NLS_CHARSET_DECL_LEN\", \"NLS_CHARSET_ID\", \"NLS_CHARSET_NAME\", \"ASCII\", \"INSTR\", \"LENGTH\", \"REGEXP_INSTR\",\n// datetime\n\"ADD_MONTHS\", \"CURRENT_DATE\", \"CURRENT_TIMESTAMP\", \"DBTIMEZONE\", \"EXTRACT\", \"FROM_TZ\", \"LAST_DAY\", \"LOCALTIMESTAMP\", \"MONTHS_BETWEEN\", \"NEW_TIME\", \"NEXT_DAY\", \"NUMTODSINTERVAL\", \"NUMTOYMINTERVAL\", \"ROUND\", \"SESSIONTIMEZONE\", \"SYS_EXTRACT_UTC\", \"SYSDATE\", \"SYSTIMESTAMP\", \"TO_CHAR\", \"TO_TIMESTAMP\", \"TO_TIMESTAMP_TZ\", \"TO_DSINTERVAL\", \"TO_YMINTERVAL\", \"TRUNC\", \"TZ_OFFSET\",\n// comparison\n\"GREATEST\", \"LEAST\",\n// conversion\n\"ASCIISTR\", \"BIN_TO_NUM\", \"CAST\", \"CHARTOROWID\", \"COMPOSE\", \"CONVERT\", \"DECOMPOSE\", \"HEXTORAW\", \"NUMTODSINTERVAL\", \"NUMTOYMINTERVAL\", \"RAWTOHEX\", \"RAWTONHEX\", \"ROWIDTOCHAR\", \"ROWIDTONCHAR\", \"SCN_TO_TIMESTAMP\", \"TIMESTAMP_TO_SCN\", \"TO_BINARY_DOUBLE\", \"TO_BINARY_FLOAT\", \"TO_CHAR\", \"TO_CLOB\", \"TO_DATE\", \"TO_DSINTERVAL\", \"TO_LOB\", \"TO_MULTI_BYTE\", \"TO_NCHAR\", \"TO_NCLOB\", \"TO_NUMBER\", \"TO_DSINTERVAL\", \"TO_SINGLE_BYTE\", \"TO_TIMESTAMP\", \"TO_TIMESTAMP_TZ\", \"TO_YMINTERVAL\", \"TO_YMINTERVAL\", \"TRANSLATE\", \"UNISTR\",\n// largeObject\n\"BFILENAME\", \"EMPTY_BLOB,\", \"EMPTY_CLOB\",\n// collection\n\"CARDINALITY\", \"COLLECT\", \"POWERMULTISET\", \"POWERMULTISET_BY_CARDINALITY\", \"SET\",\n// hierarchical\n\"SYS_CONNECT_BY_PATH\",\n// dataMining\n\"CLUSTER_ID\", \"CLUSTER_PROBABILITY\", \"CLUSTER_SET\", \"FEATURE_ID\", \"FEATURE_SET\", \"FEATURE_VALUE\", \"PREDICTION\", \"PREDICTION_COST\", \"PREDICTION_DETAILS\", \"PREDICTION_PROBABILITY\", \"PREDICTION_SET\",\n// xml\n\"APPENDCHILDXML\", \"DELETEXML\", \"DEPTH\", \"EXTRACT\", \"EXISTSNODE\", \"EXTRACTVALUE\", \"INSERTCHILDXML\", \"INSERTXMLBEFORE\", \"PATH\", \"SYS_DBURIGEN\", \"SYS_XMLAGG\", \"SYS_XMLGEN\", \"UPDATEXML\", \"XMLAGG\", \"XMLCDATA\", \"XMLCOLATTVAL\", \"XMLCOMMENT\", \"XMLCONCAT\", \"XMLFOREST\", \"XMLPARSE\", \"XMLPI\", \"XMLQUERY\", \"XMLROOT\", \"XMLSEQUENCE\", \"XMLSERIALIZE\", \"XMLTABLE\", \"XMLTRANSFORM\",\n// encoding\n\"DECODE\", \"DUMP\", \"ORA_HASH\", \"VSIZE\",\n// nullRelated\n\"COALESCE\", \"LNNVL\", \"NULLIF\", \"NVL\", \"NVL2\",\n// env\n\"SYS_CONTEXT\", \"SYS_GUID\", \"SYS_TYPEID\", \"UID\", \"USER\", \"USERENV\",\n// aggregate\n\"AVG\", \"COLLECT\", \"CORR\", \"CORR_S\", \"CORR_K\", \"COUNT\", \"COVAR_POP\", \"COVAR_SAMP\", \"CUME_DIST\", \"DENSE_RANK\", \"FIRST\", \"GROUP_ID\", \"GROUPING\", \"GROUPING_ID\", \"LAST\", \"MAX\", \"MEDIAN\", \"MIN\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERCENT_RANK\", \"RANK\", \"REGR_SLOPE\", \"REGR_INTERCEPT\", \"REGR_COUNT\", \"REGR_R2\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_SXX\", \"REGR_SYY\", \"REGR_SXY\", \"STATS_BINOMIAL_TEST\", \"STATS_CROSSTAB\", \"STATS_F_TEST\", \"STATS_KS_TEST\", \"STATS_MODE\", \"STATS_MW_TEST\", \"STATS_ONE_WAY_ANOVA\", \"STATS_T_TEST_ONE\", \"STATS_T_TEST_PAIRED\", \"STATS_T_TEST_INDEP\", \"STATS_T_TEST_INDEPU\", \"STATS_WSR_TEST\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"SUM\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\",\n// Windowing functions (minus the ones already listed in aggregates)\n// window\n\"FIRST_VALUE\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"NTILE\", \"RATIO_TO_REPORT\", \"ROW_NUMBER\",\n// objectReference\n\"DEREF\", \"MAKE_REF\", \"REF\", \"REFTOHEX\", \"VALUE\",\n// model\n\"CV\", \"ITERATION_NUMBER\", \"PRESENTNNV\", \"PRESENTV\", \"PREVIOUS\"];\n\n// src/languages/plsql/plsql.formatter.ts\nvar reservedSelect9 = expandPhrases([\"SELECT [ALL | DISTINCT | UNIQUE]\"]);\nvar reservedClauses9 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER [SIBLINGS] BY\", \"OFFSET\", \"FETCH {FIRST | NEXT}\", \"FOR UPDATE [OF]\",\n// Data manipulation\n// - insert:\n\"INSERT [INTO | ALL INTO]\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE [INTO]\", \"WHEN [NOT] MATCHED [THEN]\", \"UPDATE SET\",\n// other\n\"RETURNING\"]);\nvar standardOnelineClauses8 = expandPhrases([\"CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE\"]);\nvar tabularOnelineClauses8 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW\", \"CREATE MATERIALIZED VIEW\",\n// - update:\n\"UPDATE [ONLY]\",\n// - delete:\n\"DELETE FROM [ONLY]\",\n// - drop table:\n\"DROP TABLE\",\n// - alter table:\n\"ALTER TABLE\", \"ADD\", \"DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}\", \"MODIFY\", \"RENAME TO\", \"RENAME COLUMN\",\n// - truncate:\n\"TRUNCATE TABLE\",\n// other\n\"SET SCHEMA\", \"BEGIN\", \"CONNECT BY\", \"DECLARE\", \"EXCEPT\", \"EXCEPTION\", \"LOOP\", \"START WITH\"]);\nvar reservedSetOperations9 = expandPhrases([\"UNION [ALL]\", \"MINUS\", \"INTERSECT\"]);\nvar reservedJoins9 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\",\n// non-standard joins\n\"{CROSS | OUTER} APPLY\"]);\nvar reservedPhrases9 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL]\", \"ON COMMIT\", \"{ROWS | RANGE} BETWEEN\"]);\nvar plsql = {\n  name: \"plsql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect9,\n    reservedClauses: [...reservedClauses9, ...standardOnelineClauses8, ...tabularOnelineClauses8],\n    reservedSetOperations: reservedSetOperations9,\n    reservedJoins: reservedJoins9,\n    reservedPhrases: reservedPhrases9,\n    supportsXor: true,\n    reservedKeywords: keywords9,\n    reservedDataTypes: dataTypes9,\n    reservedFunctionNames: functions9,\n    stringTypes: [{\n      quote: \"''-qq\",\n      prefixes: [\"N\"]\n    }, {\n      quote: \"q''\",\n      prefixes: [\"N\"]\n    }],\n    // PL/SQL doesn't actually support escaping of quotes in identifiers,\n    // but for the sake of simpler testing we'll support this anyway\n    // as all other SQL dialects with \"identifiers\" do.\n    identTypes: [`\"\"-qq`],\n    identChars: {\n      rest: \"$#\"\n    },\n    variableTypes: [{\n      regex: \"&{1,2}[A-Za-z][A-Za-z0-9_$#]*\"\n    }],\n    paramTypes: {\n      numbered: [\":\"],\n      named: [\":\"]\n    },\n    operators: [\"**\", \":=\", \"%\", \"~=\", \"^=\",\n    // '..', // Conflicts with float followed by dot (so \"2..3\" gets parsed as [\"2.\", \".\", \"3\"])\n    \">>\", \"<<\", \"=>\", \"@\", \"||\"],\n    postProcess: postProcess3\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"@\"],\n    onelineClauses: [...standardOnelineClauses8, ...tabularOnelineClauses8],\n    tabularOnelineClauses: tabularOnelineClauses8\n  }\n};\nfunction postProcess3(tokens) {\n  let previousReservedToken = EOF_TOKEN;\n  return tokens.map(token => {\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_KEYWORD\" /* RESERVED_KEYWORD */\n      });\n    }\n    if (isReserved(token.type)) {\n      previousReservedToken = token;\n    }\n    return token;\n  });\n}\n\n// src/languages/postgresql/postgresql.functions.ts\nvar functions10 = [\n// https://www.postgresql.org/docs/14/functions.html\n//\n// https://www.postgresql.org/docs/14/functions-math.html\n\"ABS\", \"ACOS\", \"ACOSD\", \"ACOSH\", \"ASIN\", \"ASIND\", \"ASINH\", \"ATAN\", \"ATAN2\", \"ATAN2D\", \"ATAND\", \"ATANH\", \"CBRT\", \"CEIL\", \"CEILING\", \"COS\", \"COSD\", \"COSH\", \"COT\", \"COTD\", \"DEGREES\", \"DIV\", \"EXP\", \"FACTORIAL\", \"FLOOR\", \"GCD\", \"LCM\", \"LN\", \"LOG\", \"LOG10\", \"MIN_SCALE\", \"MOD\", \"PI\", \"POWER\", \"RADIANS\", \"RANDOM\", \"ROUND\", \"SCALE\", \"SETSEED\", \"SIGN\", \"SIN\", \"SIND\", \"SINH\", \"SQRT\", \"TAN\", \"TAND\", \"TANH\", \"TRIM_SCALE\", \"TRUNC\", \"WIDTH_BUCKET\",\n// https://www.postgresql.org/docs/14/functions-string.html\n\"ABS\", \"ASCII\", \"BIT_LENGTH\", \"BTRIM\", \"CHARACTER_LENGTH\", \"CHAR_LENGTH\", \"CHR\", \"CONCAT\", \"CONCAT_WS\", \"FORMAT\", \"INITCAP\", \"LEFT\", \"LENGTH\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MD5\", \"NORMALIZE\", \"OCTET_LENGTH\", \"OVERLAY\", \"PARSE_IDENT\", \"PG_CLIENT_ENCODING\", \"POSITION\", \"QUOTE_IDENT\", \"QUOTE_LITERAL\", \"QUOTE_NULLABLE\", \"REGEXP_MATCH\", \"REGEXP_MATCHES\", \"REGEXP_REPLACE\", \"REGEXP_SPLIT_TO_ARRAY\", \"REGEXP_SPLIT_TO_TABLE\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RIGHT\", \"RPAD\", \"RTRIM\", \"SPLIT_PART\", \"SPRINTF\", \"STARTS_WITH\", \"STRING_AGG\", \"STRING_TO_ARRAY\", \"STRING_TO_TABLE\", \"STRPOS\", \"SUBSTR\", \"SUBSTRING\", \"TO_ASCII\", \"TO_HEX\", \"TRANSLATE\", \"TRIM\", \"UNISTR\", \"UPPER\",\n// https://www.postgresql.org/docs/14/functions-binarystring.html\n\"BIT_COUNT\", \"BIT_LENGTH\", \"BTRIM\", \"CONVERT\", \"CONVERT_FROM\", \"CONVERT_TO\", \"DECODE\", \"ENCODE\", \"GET_BIT\", \"GET_BYTE\", \"LENGTH\", \"LTRIM\", \"MD5\", \"OCTET_LENGTH\", \"OVERLAY\", \"POSITION\", \"RTRIM\", \"SET_BIT\", \"SET_BYTE\", \"SHA224\", \"SHA256\", \"SHA384\", \"SHA512\", \"STRING_AGG\", \"SUBSTR\", \"SUBSTRING\", \"TRIM\",\n// https://www.postgresql.org/docs/14/functions-bitstring.html\n\"BIT_COUNT\", \"BIT_LENGTH\", \"GET_BIT\", \"LENGTH\", \"OCTET_LENGTH\", \"OVERLAY\", \"POSITION\", \"SET_BIT\", \"SUBSTRING\",\n// https://www.postgresql.org/docs/14/functions-matching.html\n\"REGEXP_MATCH\", \"REGEXP_MATCHES\", \"REGEXP_REPLACE\", \"REGEXP_SPLIT_TO_ARRAY\", \"REGEXP_SPLIT_TO_TABLE\",\n// https://www.postgresql.org/docs/14/functions-formatting.html\n\"TO_CHAR\", \"TO_DATE\", \"TO_NUMBER\", \"TO_TIMESTAMP\",\n// https://www.postgresql.org/docs/14/functions-datetime.html\n// 'AGE',\n\"CLOCK_TIMESTAMP\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"DATE_BIN\", \"DATE_PART\", \"DATE_TRUNC\", \"EXTRACT\", \"ISFINITE\", \"JUSTIFY_DAYS\", \"JUSTIFY_HOURS\", \"JUSTIFY_INTERVAL\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"MAKE_DATE\", \"MAKE_INTERVAL\", \"MAKE_TIME\", \"MAKE_TIMESTAMP\", \"MAKE_TIMESTAMPTZ\", \"NOW\", \"PG_SLEEP\", \"PG_SLEEP_FOR\", \"PG_SLEEP_UNTIL\", \"STATEMENT_TIMESTAMP\", \"TIMEOFDAY\", \"TO_TIMESTAMP\", \"TRANSACTION_TIMESTAMP\",\n// https://www.postgresql.org/docs/14/functions-enum.html\n\"ENUM_FIRST\", \"ENUM_LAST\", \"ENUM_RANGE\",\n// https://www.postgresql.org/docs/14/functions-geometry.html\n\"AREA\", \"BOUND_BOX\", \"BOX\", \"CENTER\", \"CIRCLE\", \"DIAGONAL\", \"DIAMETER\", \"HEIGHT\", \"ISCLOSED\", \"ISOPEN\", \"LENGTH\", \"LINE\", \"LSEG\", \"NPOINTS\", \"PATH\", \"PCLOSE\", \"POINT\", \"POLYGON\", \"POPEN\", \"RADIUS\", \"SLOPE\", \"WIDTH\",\n// https://www.postgresql.org/docs/14/functions-net.html\n\"ABBREV\", \"BROADCAST\", \"FAMILY\", \"HOST\", \"HOSTMASK\", \"INET_MERGE\", \"INET_SAME_FAMILY\", \"MACADDR8_SET7BIT\", \"MASKLEN\", \"NETMASK\", \"NETWORK\", \"SET_MASKLEN\",\n// 'TEXT', // excluded because it's also a data type name\n\"TRUNC\",\n// https://www.postgresql.org/docs/14/functions-textsearch.html\n\"ARRAY_TO_TSVECTOR\", \"GET_CURRENT_TS_CONFIG\", \"JSONB_TO_TSVECTOR\", \"JSON_TO_TSVECTOR\", \"LENGTH\", \"NUMNODE\", \"PHRASETO_TSQUERY\", \"PLAINTO_TSQUERY\", \"QUERYTREE\", \"SETWEIGHT\", \"STRIP\", \"TO_TSQUERY\", \"TO_TSVECTOR\", \"TSQUERY_PHRASE\", \"TSVECTOR_TO_ARRAY\", \"TS_DEBUG\", \"TS_DELETE\", \"TS_FILTER\", \"TS_HEADLINE\", \"TS_LEXIZE\", \"TS_PARSE\", \"TS_RANK\", \"TS_RANK_CD\", \"TS_REWRITE\", \"TS_STAT\", \"TS_TOKEN_TYPE\", \"WEBSEARCH_TO_TSQUERY\",\n// https://www.postgresql.org/docs/14/functions-uuid.html\n\"UUID\",\n// https://www.postgresql.org/docs/14/functions-xml.html\n\"CURSOR_TO_XML\", \"CURSOR_TO_XMLSCHEMA\", \"DATABASE_TO_XML\", \"DATABASE_TO_XMLSCHEMA\", \"DATABASE_TO_XML_AND_XMLSCHEMA\", \"NEXTVAL\", \"QUERY_TO_XML\", \"QUERY_TO_XMLSCHEMA\", \"QUERY_TO_XML_AND_XMLSCHEMA\", \"SCHEMA_TO_XML\", \"SCHEMA_TO_XMLSCHEMA\", \"SCHEMA_TO_XML_AND_XMLSCHEMA\", \"STRING\", \"TABLE_TO_XML\", \"TABLE_TO_XMLSCHEMA\", \"TABLE_TO_XML_AND_XMLSCHEMA\", \"XMLAGG\", \"XMLCOMMENT\", \"XMLCONCAT\", \"XMLELEMENT\", \"XMLEXISTS\", \"XMLFOREST\", \"XMLPARSE\", \"XMLPI\", \"XMLROOT\", \"XMLSERIALIZE\", \"XMLTABLE\", \"XML_IS_WELL_FORMED\", \"XML_IS_WELL_FORMED_CONTENT\", \"XML_IS_WELL_FORMED_DOCUMENT\", \"XPATH\", \"XPATH_EXISTS\",\n// https://www.postgresql.org/docs/14/functions-json.html\n\"ARRAY_TO_JSON\", \"JSONB_AGG\", \"JSONB_ARRAY_ELEMENTS\", \"JSONB_ARRAY_ELEMENTS_TEXT\", \"JSONB_ARRAY_LENGTH\", \"JSONB_BUILD_ARRAY\", \"JSONB_BUILD_OBJECT\", \"JSONB_EACH\", \"JSONB_EACH_TEXT\", \"JSONB_EXTRACT_PATH\", \"JSONB_EXTRACT_PATH_TEXT\", \"JSONB_INSERT\", \"JSONB_OBJECT\", \"JSONB_OBJECT_AGG\", \"JSONB_OBJECT_KEYS\", \"JSONB_PATH_EXISTS\", \"JSONB_PATH_EXISTS_TZ\", \"JSONB_PATH_MATCH\", \"JSONB_PATH_MATCH_TZ\", \"JSONB_PATH_QUERY\", \"JSONB_PATH_QUERY_ARRAY\", \"JSONB_PATH_QUERY_ARRAY_TZ\", \"JSONB_PATH_QUERY_FIRST\", \"JSONB_PATH_QUERY_FIRST_TZ\", \"JSONB_PATH_QUERY_TZ\", \"JSONB_POPULATE_RECORD\", \"JSONB_POPULATE_RECORDSET\", \"JSONB_PRETTY\", \"JSONB_SET\", \"JSONB_SET_LAX\", \"JSONB_STRIP_NULLS\", \"JSONB_TO_RECORD\", \"JSONB_TO_RECORDSET\", \"JSONB_TYPEOF\", \"JSON_AGG\", \"JSON_ARRAY_ELEMENTS\", \"JSON_ARRAY_ELEMENTS_TEXT\", \"JSON_ARRAY_LENGTH\", \"JSON_BUILD_ARRAY\", \"JSON_BUILD_OBJECT\", \"JSON_EACH\", \"JSON_EACH_TEXT\", \"JSON_EXTRACT_PATH\", \"JSON_EXTRACT_PATH_TEXT\", \"JSON_OBJECT\", \"JSON_OBJECT_AGG\", \"JSON_OBJECT_KEYS\", \"JSON_POPULATE_RECORD\", \"JSON_POPULATE_RECORDSET\", \"JSON_STRIP_NULLS\", \"JSON_TO_RECORD\", \"JSON_TO_RECORDSET\", \"JSON_TYPEOF\", \"ROW_TO_JSON\", \"TO_JSON\", \"TO_JSONB\", \"TO_TIMESTAMP\",\n// https://www.postgresql.org/docs/14/functions-sequence.html\n\"CURRVAL\", \"LASTVAL\", \"NEXTVAL\", \"SETVAL\",\n// https://www.postgresql.org/docs/14/functions-conditional.html\n// 'CASE',\n\"COALESCE\", \"GREATEST\", \"LEAST\", \"NULLIF\",\n// https://www.postgresql.org/docs/14/functions-array.html\n\"ARRAY_AGG\", \"ARRAY_APPEND\", \"ARRAY_CAT\", \"ARRAY_DIMS\", \"ARRAY_FILL\", \"ARRAY_LENGTH\", \"ARRAY_LOWER\", \"ARRAY_NDIMS\", \"ARRAY_POSITION\", \"ARRAY_POSITIONS\", \"ARRAY_PREPEND\", \"ARRAY_REMOVE\", \"ARRAY_REPLACE\", \"ARRAY_TO_STRING\", \"ARRAY_UPPER\", \"CARDINALITY\", \"STRING_TO_ARRAY\", \"TRIM_ARRAY\", \"UNNEST\",\n// https://www.postgresql.org/docs/14/functions-range.html\n\"ISEMPTY\", \"LOWER\", \"LOWER_INC\", \"LOWER_INF\", \"MULTIRANGE\", \"RANGE_MERGE\", \"UPPER\", \"UPPER_INC\", \"UPPER_INF\",\n// https://www.postgresql.org/docs/14/functions-aggregate.html\n// 'ANY',\n\"ARRAY_AGG\", \"AVG\", \"BIT_AND\", \"BIT_OR\", \"BIT_XOR\", \"BOOL_AND\", \"BOOL_OR\", \"COALESCE\", \"CORR\", \"COUNT\", \"COVAR_POP\", \"COVAR_SAMP\", \"CUME_DIST\", \"DENSE_RANK\", \"EVERY\", \"GROUPING\", \"JSONB_AGG\", \"JSONB_OBJECT_AGG\", \"JSON_AGG\", \"JSON_OBJECT_AGG\", \"MAX\", \"MIN\", \"MODE\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERCENT_RANK\", \"RANGE_AGG\", \"RANGE_INTERSECT_AGG\", \"RANK\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\",\n// 'SOME',\n\"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STRING_AGG\", \"SUM\", \"TO_JSON\", \"TO_JSONB\", \"VARIANCE\", \"VAR_POP\", \"VAR_SAMP\", \"XMLAGG\",\n// https://www.postgresql.org/docs/14/functions-window.html\n\"CUME_DIST\", \"DENSE_RANK\", \"FIRST_VALUE\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"NTH_VALUE\", \"NTILE\", \"PERCENT_RANK\", \"RANK\", \"ROW_NUMBER\",\n// https://www.postgresql.org/docs/14/functions-srf.html\n\"GENERATE_SERIES\", \"GENERATE_SUBSCRIPTS\",\n// https://www.postgresql.org/docs/14/functions-info.html\n\"ACLDEFAULT\", \"ACLEXPLODE\", \"COL_DESCRIPTION\", \"CURRENT_CATALOG\", \"CURRENT_DATABASE\", \"CURRENT_QUERY\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_SCHEMAS\", \"CURRENT_USER\", \"FORMAT_TYPE\", \"HAS_ANY_COLUMN_PRIVILEGE\", \"HAS_COLUMN_PRIVILEGE\", \"HAS_DATABASE_PRIVILEGE\", \"HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE\", \"HAS_FUNCTION_PRIVILEGE\", \"HAS_LANGUAGE_PRIVILEGE\", \"HAS_SCHEMA_PRIVILEGE\", \"HAS_SEQUENCE_PRIVILEGE\", \"HAS_SERVER_PRIVILEGE\", \"HAS_TABLESPACE_PRIVILEGE\", \"HAS_TABLE_PRIVILEGE\", \"HAS_TYPE_PRIVILEGE\", \"INET_CLIENT_ADDR\", \"INET_CLIENT_PORT\", \"INET_SERVER_ADDR\", \"INET_SERVER_PORT\", \"MAKEACLITEM\", \"OBJ_DESCRIPTION\", \"PG_BACKEND_PID\", \"PG_BLOCKING_PIDS\", \"PG_COLLATION_IS_VISIBLE\", \"PG_CONF_LOAD_TIME\", \"PG_CONTROL_CHECKPOINT\", \"PG_CONTROL_INIT\", \"PG_CONTROL_SYSTEM\", \"PG_CONVERSION_IS_VISIBLE\", \"PG_CURRENT_LOGFILE\", \"PG_CURRENT_SNAPSHOT\", \"PG_CURRENT_XACT_ID\", \"PG_CURRENT_XACT_ID_IF_ASSIGNED\", \"PG_DESCRIBE_OBJECT\", \"PG_FUNCTION_IS_VISIBLE\", \"PG_GET_CATALOG_FOREIGN_KEYS\", \"PG_GET_CONSTRAINTDEF\", \"PG_GET_EXPR\", \"PG_GET_FUNCTIONDEF\", \"PG_GET_FUNCTION_ARGUMENTS\", \"PG_GET_FUNCTION_IDENTITY_ARGUMENTS\", \"PG_GET_FUNCTION_RESULT\", \"PG_GET_INDEXDEF\", \"PG_GET_KEYWORDS\", \"PG_GET_OBJECT_ADDRESS\", \"PG_GET_OWNED_SEQUENCE\", \"PG_GET_RULEDEF\", \"PG_GET_SERIAL_SEQUENCE\", \"PG_GET_STATISTICSOBJDEF\", \"PG_GET_TRIGGERDEF\", \"PG_GET_USERBYID\", \"PG_GET_VIEWDEF\", \"PG_HAS_ROLE\", \"PG_IDENTIFY_OBJECT\", \"PG_IDENTIFY_OBJECT_AS_ADDRESS\", \"PG_INDEXAM_HAS_PROPERTY\", \"PG_INDEX_COLUMN_HAS_PROPERTY\", \"PG_INDEX_HAS_PROPERTY\", \"PG_IS_OTHER_TEMP_SCHEMA\", \"PG_JIT_AVAILABLE\", \"PG_LAST_COMMITTED_XACT\", \"PG_LISTENING_CHANNELS\", \"PG_MY_TEMP_SCHEMA\", \"PG_NOTIFICATION_QUEUE_USAGE\", \"PG_OPCLASS_IS_VISIBLE\", \"PG_OPERATOR_IS_VISIBLE\", \"PG_OPFAMILY_IS_VISIBLE\", \"PG_OPTIONS_TO_TABLE\", \"PG_POSTMASTER_START_TIME\", \"PG_SAFE_SNAPSHOT_BLOCKING_PIDS\", \"PG_SNAPSHOT_XIP\", \"PG_SNAPSHOT_XMAX\", \"PG_SNAPSHOT_XMIN\", \"PG_STATISTICS_OBJ_IS_VISIBLE\", \"PG_TABLESPACE_DATABASES\", \"PG_TABLESPACE_LOCATION\", \"PG_TABLE_IS_VISIBLE\", \"PG_TRIGGER_DEPTH\", \"PG_TS_CONFIG_IS_VISIBLE\", \"PG_TS_DICT_IS_VISIBLE\", \"PG_TS_PARSER_IS_VISIBLE\", \"PG_TS_TEMPLATE_IS_VISIBLE\", \"PG_TYPEOF\", \"PG_TYPE_IS_VISIBLE\", \"PG_VISIBLE_IN_SNAPSHOT\", \"PG_XACT_COMMIT_TIMESTAMP\", \"PG_XACT_COMMIT_TIMESTAMP_ORIGIN\", \"PG_XACT_STATUS\", \"PQSERVERVERSION\", \"ROW_SECURITY_ACTIVE\", \"SESSION_USER\", \"SHOBJ_DESCRIPTION\", \"TO_REGCLASS\", \"TO_REGCOLLATION\", \"TO_REGNAMESPACE\", \"TO_REGOPER\", \"TO_REGOPERATOR\", \"TO_REGPROC\", \"TO_REGPROCEDURE\", \"TO_REGROLE\", \"TO_REGTYPE\", \"TXID_CURRENT\", \"TXID_CURRENT_IF_ASSIGNED\", \"TXID_CURRENT_SNAPSHOT\", \"TXID_SNAPSHOT_XIP\", \"TXID_SNAPSHOT_XMAX\", \"TXID_SNAPSHOT_XMIN\", \"TXID_STATUS\", \"TXID_VISIBLE_IN_SNAPSHOT\", \"USER\", \"VERSION\",\n// https://www.postgresql.org/docs/14/functions-admin.html\n\"BRIN_DESUMMARIZE_RANGE\", \"BRIN_SUMMARIZE_NEW_VALUES\", \"BRIN_SUMMARIZE_RANGE\", \"CONVERT_FROM\", \"CURRENT_SETTING\", \"GIN_CLEAN_PENDING_LIST\", \"PG_ADVISORY_LOCK\", \"PG_ADVISORY_LOCK_SHARED\", \"PG_ADVISORY_UNLOCK\", \"PG_ADVISORY_UNLOCK_ALL\", \"PG_ADVISORY_UNLOCK_SHARED\", \"PG_ADVISORY_XACT_LOCK\", \"PG_ADVISORY_XACT_LOCK_SHARED\", \"PG_BACKUP_START_TIME\", \"PG_CANCEL_BACKEND\", \"PG_COLLATION_ACTUAL_VERSION\", \"PG_COLUMN_COMPRESSION\", \"PG_COLUMN_SIZE\", \"PG_COPY_LOGICAL_REPLICATION_SLOT\", \"PG_COPY_PHYSICAL_REPLICATION_SLOT\", \"PG_CREATE_LOGICAL_REPLICATION_SLOT\", \"PG_CREATE_PHYSICAL_REPLICATION_SLOT\", \"PG_CREATE_RESTORE_POINT\", \"PG_CURRENT_WAL_FLUSH_LSN\", \"PG_CURRENT_WAL_INSERT_LSN\", \"PG_CURRENT_WAL_LSN\", \"PG_DATABASE_SIZE\", \"PG_DROP_REPLICATION_SLOT\", \"PG_EXPORT_SNAPSHOT\", \"PG_FILENODE_RELATION\", \"PG_GET_WAL_REPLAY_PAUSE_STATE\", \"PG_IMPORT_SYSTEM_COLLATIONS\", \"PG_INDEXES_SIZE\", \"PG_IS_IN_BACKUP\", \"PG_IS_IN_RECOVERY\", \"PG_IS_WAL_REPLAY_PAUSED\", \"PG_LAST_WAL_RECEIVE_LSN\", \"PG_LAST_WAL_REPLAY_LSN\", \"PG_LAST_XACT_REPLAY_TIMESTAMP\", \"PG_LOGICAL_EMIT_MESSAGE\", \"PG_LOGICAL_SLOT_GET_BINARY_CHANGES\", \"PG_LOGICAL_SLOT_GET_CHANGES\", \"PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES\", \"PG_LOGICAL_SLOT_PEEK_CHANGES\", \"PG_LOG_BACKEND_MEMORY_CONTEXTS\", \"PG_LS_ARCHIVE_STATUSDIR\", \"PG_LS_DIR\", \"PG_LS_LOGDIR\", \"PG_LS_TMPDIR\", \"PG_LS_WALDIR\", \"PG_PARTITION_ANCESTORS\", \"PG_PARTITION_ROOT\", \"PG_PARTITION_TREE\", \"PG_PROMOTE\", \"PG_READ_BINARY_FILE\", \"PG_READ_FILE\", \"PG_RELATION_FILENODE\", \"PG_RELATION_FILEPATH\", \"PG_RELATION_SIZE\", \"PG_RELOAD_CONF\", \"PG_REPLICATION_ORIGIN_ADVANCE\", \"PG_REPLICATION_ORIGIN_CREATE\", \"PG_REPLICATION_ORIGIN_DROP\", \"PG_REPLICATION_ORIGIN_OID\", \"PG_REPLICATION_ORIGIN_PROGRESS\", \"PG_REPLICATION_ORIGIN_SESSION_IS_SETUP\", \"PG_REPLICATION_ORIGIN_SESSION_PROGRESS\", \"PG_REPLICATION_ORIGIN_SESSION_RESET\", \"PG_REPLICATION_ORIGIN_SESSION_SETUP\", \"PG_REPLICATION_ORIGIN_XACT_RESET\", \"PG_REPLICATION_ORIGIN_XACT_SETUP\", \"PG_REPLICATION_SLOT_ADVANCE\", \"PG_ROTATE_LOGFILE\", \"PG_SIZE_BYTES\", \"PG_SIZE_PRETTY\", \"PG_START_BACKUP\", \"PG_STAT_FILE\", \"PG_STOP_BACKUP\", \"PG_SWITCH_WAL\", \"PG_TABLESPACE_SIZE\", \"PG_TABLE_SIZE\", \"PG_TERMINATE_BACKEND\", \"PG_TOTAL_RELATION_SIZE\", \"PG_TRY_ADVISORY_LOCK\", \"PG_TRY_ADVISORY_LOCK_SHARED\", \"PG_TRY_ADVISORY_XACT_LOCK\", \"PG_TRY_ADVISORY_XACT_LOCK_SHARED\", \"PG_WALFILE_NAME\", \"PG_WALFILE_NAME_OFFSET\", \"PG_WAL_LSN_DIFF\", \"PG_WAL_REPLAY_PAUSE\", \"PG_WAL_REPLAY_RESUME\", \"SET_CONFIG\",\n// https://www.postgresql.org/docs/14/functions-trigger.html\n\"SUPPRESS_REDUNDANT_UPDATES_TRIGGER\", \"TSVECTOR_UPDATE_TRIGGER\", \"TSVECTOR_UPDATE_TRIGGER_COLUMN\",\n// https://www.postgresql.org/docs/14/functions-event-triggers.html\n\"PG_EVENT_TRIGGER_DDL_COMMANDS\", \"PG_EVENT_TRIGGER_DROPPED_OBJECTS\", \"PG_EVENT_TRIGGER_TABLE_REWRITE_OID\", \"PG_EVENT_TRIGGER_TABLE_REWRITE_REASON\", \"PG_GET_OBJECT_ADDRESS\",\n// https://www.postgresql.org/docs/14/functions-statistics.html\n\"PG_MCV_LIST_ITEMS\",\n// cast\n\"CAST\"];\n\n// src/languages/postgresql/postgresql.keywords.ts\nvar keywords10 = [\n// https://www.postgresql.org/docs/14/sql-keywords-appendix.html\n\"ALL\",\n// reserved\n\"ANALYSE\",\n// reserved\n\"ANALYZE\",\n// reserved\n\"AND\",\n// reserved\n\"ANY\",\n// reserved\n\"AS\",\n// reserved, requires AS\n\"ASC\",\n// reserved\n\"ASYMMETRIC\",\n// reserved\n\"AUTHORIZATION\",\n// reserved (can be function or type)\n\"BETWEEN\",\n// (cannot be function or type)\n\"BINARY\",\n// reserved (can be function or type)\n\"BOTH\",\n// reserved\n\"CASE\",\n// reserved\n\"CAST\",\n// reserved\n\"CHECK\",\n// reserved\n\"COLLATE\",\n// reserved\n\"COLLATION\",\n// reserved (can be function or type)\n\"COLUMN\",\n// reserved\n\"CONCURRENTLY\",\n// reserved (can be function or type)\n\"CONSTRAINT\",\n// reserved\n\"CREATE\",\n// reserved, requires AS\n\"CROSS\",\n// reserved (can be function or type)\n\"CURRENT_CATALOG\",\n// reserved\n\"CURRENT_DATE\",\n// reserved\n\"CURRENT_ROLE\",\n// reserved\n\"CURRENT_SCHEMA\",\n// reserved (can be function or type)\n\"CURRENT_TIME\",\n// reserved\n\"CURRENT_TIMESTAMP\",\n// reserved\n\"CURRENT_USER\",\n// reserved\n\"DAY\",\n// requires AS\n\"DEFAULT\",\n// reserved\n\"DEFERRABLE\",\n// reserved\n\"DESC\",\n// reserved\n\"DISTINCT\",\n// reserved\n\"DO\",\n// reserved\n\"ELSE\",\n// reserved\n\"END\",\n// reserved\n\"EXCEPT\",\n// reserved, requires AS\n\"EXISTS\",\n// (cannot be function or type)\n\"FALSE\",\n// reserved\n\"FETCH\",\n// reserved, requires AS\n\"FILTER\",\n// requires AS\n\"FOR\",\n// reserved, requires AS\n\"FOREIGN\",\n// reserved\n\"FREEZE\",\n// reserved (can be function or type)\n\"FROM\",\n// reserved, requires AS\n\"FULL\",\n// reserved (can be function or type)\n\"GRANT\",\n// reserved, requires AS\n\"GROUP\",\n// reserved, requires AS\n\"HAVING\",\n// reserved, requires AS\n\"HOUR\",\n// requires AS\n\"ILIKE\",\n// reserved (can be function or type)\n\"IN\",\n// reserved\n\"INITIALLY\",\n// reserved\n\"INNER\",\n// reserved (can be function or type)\n\"INOUT\",\n// (cannot be function or type)\n\"INTERSECT\",\n// reserved, requires AS\n\"INTO\",\n// reserved, requires AS\n\"IS\",\n// reserved (can be function or type)\n\"ISNULL\",\n// reserved (can be function or type), requires AS\n\"JOIN\",\n// reserved (can be function or type)\n\"LATERAL\",\n// reserved\n\"LEADING\",\n// reserved\n\"LEFT\",\n// reserved (can be function or type)\n\"LIKE\",\n// reserved (can be function or type)\n\"LIMIT\",\n// reserved, requires AS\n\"LOCALTIME\",\n// reserved\n\"LOCALTIMESTAMP\",\n// reserved\n\"MINUTE\",\n// requires AS\n\"MONTH\",\n// requires AS\n\"NATURAL\",\n// reserved (can be function or type)\n\"NOT\",\n// reserved\n\"NOTNULL\",\n// reserved (can be function or type), requires AS\n\"NULL\",\n// reserved\n\"NULLIF\",\n// (cannot be function or type)\n\"OFFSET\",\n// reserved, requires AS\n\"ON\",\n// reserved, requires AS\n\"ONLY\",\n// reserved\n\"OR\",\n// reserved\n\"ORDER\",\n// reserved, requires AS\n\"OUT\",\n// (cannot be function or type)\n\"OUTER\",\n// reserved (can be function or type)\n\"OVER\",\n// requires AS\n\"OVERLAPS\",\n// reserved (can be function or type), requires AS\n\"PLACING\",\n// reserved\n\"PRIMARY\",\n// reserved\n\"REFERENCES\",\n// reserved\n\"RETURNING\",\n// reserved, requires AS\n\"RIGHT\",\n// reserved (can be function or type)\n\"ROW\",\n// (cannot be function or type)\n\"SECOND\",\n// requires AS\n\"SELECT\",\n// reserved\n\"SESSION_USER\",\n// reserved\n\"SIMILAR\",\n// reserved (can be function or type)\n\"SOME\",\n// reserved\n\"SYMMETRIC\",\n// reserved\n\"TABLE\",\n// reserved\n\"TABLESAMPLE\",\n// reserved (can be function or type)\n\"THEN\",\n// reserved\n\"TO\",\n// reserved, requires AS\n\"TRAILING\",\n// reserved\n\"TRUE\",\n// reserved\n\"UNION\",\n// reserved, requires AS\n\"UNIQUE\",\n// reserved\n\"USER\",\n// reserved\n\"USING\",\n// reserved\n\"VALUES\",\n// (cannot be function or type)\n\"VARIADIC\",\n// reserved\n\"VERBOSE\",\n// reserved (can be function or type)\n\"WHEN\",\n// reserved\n\"WHERE\",\n// reserved, requires AS\n\"WINDOW\",\n// reserved, requires AS\n\"WITH\",\n// reserved, requires AS\n\"WITHIN\",\n// requires AS\n\"WITHOUT\",\n// requires AS\n\"YEAR\"\n// requires AS\n];\nvar dataTypes10 = [\n// https://www.postgresql.org/docs/current/datatype.html\n\"ARRAY\",\n// reserved, requires AS\n\"BIGINT\",\n// (cannot be function or type)\n\"BIT\",\n// (cannot be function or type)\n\"BIT VARYING\", \"BOOL\",\n// (cannot be function or type)\n\"BOOLEAN\",\n// (cannot be function or type)\n\"CHAR\",\n// (cannot be function or type), requires AS\n\"CHARACTER\",\n// (cannot be function or type), requires AS\n\"CHARACTER VARYING\", \"DECIMAL\",\n// (cannot be function or type)\n\"DEC\",\n// (cannot be function or type)\n\"DOUBLE\", \"ENUM\", \"FLOAT\",\n// (cannot be function or type)\n\"INT\",\n// (cannot be function or type)\n\"INTEGER\",\n// (cannot be function or type)\n\"INTERVAL\",\n// (cannot be function or type)\n\"NCHAR\",\n// (cannot be function or type)\n\"NUMERIC\",\n// (cannot be function or type)\n\"PRECISION\",\n// (cannot be function or type), requires AS\n\"REAL\",\n// (cannot be function or type)\n\"SMALLINT\",\n// (cannot be function or type)\n\"TEXT\", \"TIME\",\n// (cannot be function or type)\n\"TIMESTAMP\",\n// (cannot be function or type)\n\"TIMESTAMPTZ\",\n// (cannot be function or type)\n\"VARCHAR\",\n// (cannot be function or type)\n\"XML\", \"ZONE\"];\n\n// src/languages/postgresql/postgresql.formatter.ts\nvar reservedSelect10 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses10 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY [ALL | DISTINCT]\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\", \"FETCH {FIRST | NEXT}\", \"FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]\",\n// Data manipulation\n// - insert:\n\"INSERT INTO\", \"VALUES\", \"DEFAULT VALUES\",\n// - update:\n\"SET\",\n// other\n\"RETURNING\"]);\nvar standardOnelineClauses9 = expandPhrases([\"CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses9 = expandPhrases([\n// - create\n\"CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW\", \"CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE [ONLY]\", \"WHERE CURRENT OF\",\n// - insert:\n\"ON CONFLICT\",\n// - delete:\n\"DELETE FROM [ONLY]\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE [IF EXISTS] [ONLY]\", \"ALTER TABLE ALL IN TABLESPACE\", \"RENAME [COLUMN]\", \"RENAME TO\", \"ADD [COLUMN] [IF NOT EXISTS]\", \"DROP [COLUMN] [IF EXISTS]\", \"ALTER [COLUMN]\", \"SET DATA TYPE\",\n// for alter column\n\"{SET | DROP} DEFAULT\",\n// for alter column\n\"{SET | DROP} NOT NULL\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE] [ONLY]\",\n// other\n\"SET SCHEMA\", \"AFTER\",\n// https://www.postgresql.org/docs/14/sql-commands.html\n\"ABORT\", \"ALTER AGGREGATE\", \"ALTER COLLATION\", \"ALTER CONVERSION\", \"ALTER DATABASE\", \"ALTER DEFAULT PRIVILEGES\", \"ALTER DOMAIN\", \"ALTER EVENT TRIGGER\", \"ALTER EXTENSION\", \"ALTER FOREIGN DATA WRAPPER\", \"ALTER FOREIGN TABLE\", \"ALTER FUNCTION\", \"ALTER GROUP\", \"ALTER INDEX\", \"ALTER LANGUAGE\", \"ALTER LARGE OBJECT\", \"ALTER MATERIALIZED VIEW\", \"ALTER OPERATOR\", \"ALTER OPERATOR CLASS\", \"ALTER OPERATOR FAMILY\", \"ALTER POLICY\", \"ALTER PROCEDURE\", \"ALTER PUBLICATION\", \"ALTER ROLE\", \"ALTER ROUTINE\", \"ALTER RULE\", \"ALTER SCHEMA\", \"ALTER SEQUENCE\", \"ALTER SERVER\", \"ALTER STATISTICS\", \"ALTER SUBSCRIPTION\", \"ALTER SYSTEM\", \"ALTER TABLESPACE\", \"ALTER TEXT SEARCH CONFIGURATION\", \"ALTER TEXT SEARCH DICTIONARY\", \"ALTER TEXT SEARCH PARSER\", \"ALTER TEXT SEARCH TEMPLATE\", \"ALTER TRIGGER\", \"ALTER TYPE\", \"ALTER USER\", \"ALTER USER MAPPING\", \"ALTER VIEW\", \"ANALYZE\", \"BEGIN\", \"CALL\", \"CHECKPOINT\", \"CLOSE\", \"CLUSTER\", \"COMMIT\", \"COMMIT PREPARED\", \"COPY\", \"CREATE ACCESS METHOD\", \"CREATE AGGREGATE\", \"CREATE CAST\", \"CREATE COLLATION\", \"CREATE CONVERSION\", \"CREATE DATABASE\", \"CREATE DOMAIN\", \"CREATE EVENT TRIGGER\", \"CREATE EXTENSION\", \"CREATE FOREIGN DATA WRAPPER\", \"CREATE FOREIGN TABLE\", \"CREATE [OR REPLACE] FUNCTION\", \"CREATE GROUP\", \"CREATE INDEX\", \"CREATE LANGUAGE\", \"CREATE OPERATOR\", \"CREATE OPERATOR CLASS\", \"CREATE OPERATOR FAMILY\", \"CREATE POLICY\", \"CREATE PROCEDURE\", \"CREATE PUBLICATION\", \"CREATE ROLE\", \"CREATE RULE\", \"CREATE SCHEMA\", \"CREATE SEQUENCE\", \"CREATE SERVER\", \"CREATE STATISTICS\", \"CREATE SUBSCRIPTION\", \"CREATE TABLESPACE\", \"CREATE TEXT SEARCH CONFIGURATION\", \"CREATE TEXT SEARCH DICTIONARY\", \"CREATE TEXT SEARCH PARSER\", \"CREATE TEXT SEARCH TEMPLATE\", \"CREATE TRANSFORM\", \"CREATE TRIGGER\", \"CREATE TYPE\", \"CREATE USER\", \"CREATE USER MAPPING\", \"DEALLOCATE\", \"DECLARE\", \"DISCARD\", \"DROP ACCESS METHOD\", \"DROP AGGREGATE\", \"DROP CAST\", \"DROP COLLATION\", \"DROP CONVERSION\", \"DROP DATABASE\", \"DROP DOMAIN\", \"DROP EVENT TRIGGER\", \"DROP EXTENSION\", \"DROP FOREIGN DATA WRAPPER\", \"DROP FOREIGN TABLE\", \"DROP FUNCTION\", \"DROP GROUP\", \"DROP IDENTITY\", \"DROP INDEX\", \"DROP LANGUAGE\", \"DROP MATERIALIZED VIEW [IF EXISTS]\", \"DROP OPERATOR\", \"DROP OPERATOR CLASS\", \"DROP OPERATOR FAMILY\", \"DROP OWNED\", \"DROP POLICY\", \"DROP PROCEDURE\", \"DROP PUBLICATION\", \"DROP ROLE\", \"DROP ROUTINE\", \"DROP RULE\", \"DROP SCHEMA\", \"DROP SEQUENCE\", \"DROP SERVER\", \"DROP STATISTICS\", \"DROP SUBSCRIPTION\", \"DROP TABLESPACE\", \"DROP TEXT SEARCH CONFIGURATION\", \"DROP TEXT SEARCH DICTIONARY\", \"DROP TEXT SEARCH PARSER\", \"DROP TEXT SEARCH TEMPLATE\", \"DROP TRANSFORM\", \"DROP TRIGGER\", \"DROP TYPE\", \"DROP USER\", \"DROP USER MAPPING\", \"DROP VIEW\", \"EXECUTE\", \"EXPLAIN\", \"FETCH\", \"GRANT\", \"IMPORT FOREIGN SCHEMA\", \"LISTEN\", \"LOAD\", \"LOCK\", \"MOVE\", \"NOTIFY\", \"OVERRIDING SYSTEM VALUE\", \"PREPARE\", \"PREPARE TRANSACTION\", \"REASSIGN OWNED\", \"REFRESH MATERIALIZED VIEW\", \"REINDEX\", \"RELEASE SAVEPOINT\", \"RESET [ALL|ROLE|SESSION AUTHORIZATION]\", \"REVOKE\", \"ROLLBACK\", \"ROLLBACK PREPARED\", \"ROLLBACK TO SAVEPOINT\", \"SAVEPOINT\", \"SECURITY LABEL\", \"SELECT INTO\", \"SET CONSTRAINTS\", \"SET ROLE\", \"SET SESSION AUTHORIZATION\", \"SET TRANSACTION\", \"SHOW\", \"START TRANSACTION\", \"UNLISTEN\", \"VACUUM\"]);\nvar reservedSetOperations10 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT [ALL | DISTINCT]\", \"INTERSECT [ALL | DISTINCT]\"]);\nvar reservedJoins10 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\"]);\nvar reservedPhrases10 = expandPhrases([\"PRIMARY KEY\", \"GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY\", \"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\", \"DO {NOTHING | UPDATE}\", \"AS MATERIALIZED\", \"{ROWS | RANGE | GROUPS} BETWEEN\",\n// https://www.postgresql.org/docs/current/datatype-datetime.html\n\"[TIMESTAMP | TIME] {WITH | WITHOUT} TIME ZONE\",\n// comparison operator\n\"IS [NOT] DISTINCT FROM\", \"NULLS {FIRST | LAST}\", \"WITH ORDINALITY\"]);\nvar postgresql = {\n  name: \"postgresql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect10,\n    reservedClauses: [...reservedClauses10, ...standardOnelineClauses9, ...tabularOnelineClauses9],\n    reservedSetOperations: reservedSetOperations10,\n    reservedJoins: reservedJoins10,\n    reservedPhrases: reservedPhrases10,\n    reservedKeywords: keywords10,\n    reservedDataTypes: dataTypes10,\n    reservedFunctionNames: functions10,\n    nestedBlockComments: true,\n    extraParens: [\"[]\"],\n    stringTypes: [\"$$\", {\n      quote: \"''-qq\",\n      prefixes: [\"U&\"]\n    }, {\n      quote: \"''-qq-bs\",\n      prefixes: [\"E\"],\n      requirePrefix: true\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"B\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [{\n      quote: '\"\"-qq',\n      prefixes: [\"U&\"]\n    }],\n    identChars: {\n      rest: \"$\"\n    },\n    paramTypes: {\n      numbered: [\"$\"]\n    },\n    operators: [\n    // Arithmetic\n    \"%\", \"^\", \"|/\", \"||/\", \"@\",\n    // Assignment\n    \":=\",\n    // Bitwise\n    \"&\", \"|\", \"#\", \"~\", \"<<\", \">>\",\n    // Byte comparison\n    \"~>~\", \"~<~\", \"~>=~\", \"~<=~\",\n    // Geometric\n    \"@-@\", \"@@\", \"##\", \"<->\", \"&&\", \"&<\", \"&>\", \"<<|\", \"&<|\", \"|>>\", \"|&>\", \"<^\", \"^>\", \"?#\", \"?-\", \"?|\", \"?-|\", \"?||\", \"@>\", \"<@\", \"~=\",\n    // JSON\n    \"?\", \"@?\", \"?&\", \"->\", \"->>\", \"#>\", \"#>>\", \"#-\",\n    // Named function params\n    \"=>\",\n    // Network address\n    \">>=\", \"<<=\",\n    // Pattern matching\n    \"~~\", \"~~*\", \"!~~\", \"!~~*\",\n    // POSIX RegExp\n    \"~\", \"~*\", \"!~\", \"!~*\",\n    // Range/multirange\n    \"-|-\",\n    // String concatenation\n    \"||\",\n    // Text search\n    \"@@@\", \"!!\", \"^@\",\n    // Trigram/trigraph\n    \"<%\", \"%>\", \"<<%\", \"%>>\", \"<<->\", \"<->>\", \"<<<->\", \"<->>>\",\n    // Type cast\n    \"::\", \":\",\n    // Custom operators defined by pgvector extension\n    // https://github.com/pgvector/pgvector#querying\n    \"<#>\", \"<=>\", \"<+>\", \"<~>\", \"<%>\"],\n    operatorKeyword: true\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"::\", \":\"],\n    onelineClauses: [...standardOnelineClauses9, ...tabularOnelineClauses9],\n    tabularOnelineClauses: tabularOnelineClauses9\n  }\n};\n\n// src/languages/redshift/redshift.functions.ts\nvar functions11 = [\n// https://docs.aws.amazon.com/redshift/latest/dg/c_Aggregate_Functions.html\n\"ANY_VALUE\", \"APPROXIMATE PERCENTILE_DISC\", \"AVG\", \"COUNT\", \"LISTAGG\", \"MAX\", \"MEDIAN\", \"MIN\", \"PERCENTILE_CONT\", \"STDDEV_SAMP\", \"STDDEV_POP\", \"SUM\", \"VAR_SAMP\", \"VAR_POP\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_Array_Functions.html\n\"array\", \"array_concat\", \"array_flatten\", \"get_array_length\", \"split_to_array\", \"subarray\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_bitwise_aggregate_functions.html\n\"BIT_AND\", \"BIT_OR\", \"BOOL_AND\", \"BOOL_OR\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_conditional_expressions.html\n\"COALESCE\", \"DECODE\", \"GREATEST\", \"LEAST\", \"NVL\", \"NVL2\", \"NULLIF\",\n// https://docs.aws.amazon.com/redshift/latest/dg/Date_functions_header.html\n\"ADD_MONTHS\", \"AT TIME ZONE\", \"CONVERT_TIMEZONE\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"DATE_CMP\", \"DATE_CMP_TIMESTAMP\", \"DATE_CMP_TIMESTAMPTZ\", \"DATE_PART_YEAR\", \"DATEADD\", \"DATEDIFF\", \"DATE_PART\", \"DATE_TRUNC\", \"EXTRACT\", \"GETDATE\", \"INTERVAL_CMP\", \"LAST_DAY\", \"MONTHS_BETWEEN\", \"NEXT_DAY\", \"SYSDATE\", \"TIMEOFDAY\", \"TIMESTAMP_CMP\", \"TIMESTAMP_CMP_DATE\", \"TIMESTAMP_CMP_TIMESTAMPTZ\", \"TIMESTAMPTZ_CMP\", \"TIMESTAMPTZ_CMP_DATE\", \"TIMESTAMPTZ_CMP_TIMESTAMP\", \"TIMEZONE\", \"TO_TIMESTAMP\", \"TRUNC\",\n// https://docs.aws.amazon.com/redshift/latest/dg/geospatial-functions.html\n\"AddBBox\", \"DropBBox\", \"GeometryType\", \"ST_AddPoint\", \"ST_Angle\", \"ST_Area\", \"ST_AsBinary\", \"ST_AsEWKB\", \"ST_AsEWKT\", \"ST_AsGeoJSON\", \"ST_AsText\", \"ST_Azimuth\", \"ST_Boundary\", \"ST_Collect\", \"ST_Contains\", \"ST_ContainsProperly\", \"ST_ConvexHull\", \"ST_CoveredBy\", \"ST_Covers\", \"ST_Crosses\", \"ST_Dimension\", \"ST_Disjoint\", \"ST_Distance\", \"ST_DistanceSphere\", \"ST_DWithin\", \"ST_EndPoint\", \"ST_Envelope\", \"ST_Equals\", \"ST_ExteriorRing\", \"ST_Force2D\", \"ST_Force3D\", \"ST_Force3DM\", \"ST_Force3DZ\", \"ST_Force4D\", \"ST_GeometryN\", \"ST_GeometryType\", \"ST_GeomFromEWKB\", \"ST_GeomFromEWKT\", \"ST_GeomFromText\", \"ST_GeomFromWKB\", \"ST_InteriorRingN\", \"ST_Intersects\", \"ST_IsPolygonCCW\", \"ST_IsPolygonCW\", \"ST_IsClosed\", \"ST_IsCollection\", \"ST_IsEmpty\", \"ST_IsSimple\", \"ST_IsValid\", \"ST_Length\", \"ST_LengthSphere\", \"ST_Length2D\", \"ST_LineFromMultiPoint\", \"ST_LineInterpolatePoint\", \"ST_M\", \"ST_MakeEnvelope\", \"ST_MakeLine\", \"ST_MakePoint\", \"ST_MakePolygon\", \"ST_MemSize\", \"ST_MMax\", \"ST_MMin\", \"ST_Multi\", \"ST_NDims\", \"ST_NPoints\", \"ST_NRings\", \"ST_NumGeometries\", \"ST_NumInteriorRings\", \"ST_NumPoints\", \"ST_Perimeter\", \"ST_Perimeter2D\", \"ST_Point\", \"ST_PointN\", \"ST_Points\", \"ST_Polygon\", \"ST_RemovePoint\", \"ST_Reverse\", \"ST_SetPoint\", \"ST_SetSRID\", \"ST_Simplify\", \"ST_SRID\", \"ST_StartPoint\", \"ST_Touches\", \"ST_Within\", \"ST_X\", \"ST_XMax\", \"ST_XMin\", \"ST_Y\", \"ST_YMax\", \"ST_YMin\", \"ST_Z\", \"ST_ZMax\", \"ST_ZMin\", \"SupportsBBox\",\n// https://docs.aws.amazon.com/redshift/latest/dg/hash-functions.html\n\"CHECKSUM\", \"FUNC_SHA1\", \"FNV_HASH\", \"MD5\", \"SHA\", \"SHA1\", \"SHA2\",\n// https://docs.aws.amazon.com/redshift/latest/dg/hyperloglog-functions.html\n\"HLL\", \"HLL_CREATE_SKETCH\", \"HLL_CARDINALITY\", \"HLL_COMBINE\",\n// https://docs.aws.amazon.com/redshift/latest/dg/json-functions.html\n\"IS_VALID_JSON\", \"IS_VALID_JSON_ARRAY\", \"JSON_ARRAY_LENGTH\", \"JSON_EXTRACT_ARRAY_ELEMENT_TEXT\", \"JSON_EXTRACT_PATH_TEXT\", \"JSON_PARSE\", \"JSON_SERIALIZE\",\n// https://docs.aws.amazon.com/redshift/latest/dg/Math_functions.html\n\"ABS\", \"ACOS\", \"ASIN\", \"ATAN\", \"ATAN2\", \"CBRT\", \"CEILING\", \"CEIL\", \"COS\", \"COT\", \"DEGREES\", \"DEXP\", \"DLOG1\", \"DLOG10\", \"EXP\", \"FLOOR\", \"LN\", \"LOG\", \"MOD\", \"PI\", \"POWER\", \"RADIANS\", \"RANDOM\", \"ROUND\", \"SIN\", \"SIGN\", \"SQRT\", \"TAN\", \"TO_HEX\", \"TRUNC\",\n// https://docs.aws.amazon.com/redshift/latest/dg/ml-function.html\n\"EXPLAIN_MODEL\",\n// https://docs.aws.amazon.com/redshift/latest/dg/String_functions_header.html\n\"ASCII\", \"BPCHARCMP\", \"BTRIM\", \"BTTEXT_PATTERN_CMP\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHARINDEX\", \"CHR\", \"COLLATE\", \"CONCAT\", \"CRC32\", \"DIFFERENCE\", \"INITCAP\", \"LEFT\", \"RIGHT\", \"LEN\", \"LENGTH\", \"LOWER\", \"LPAD\", \"RPAD\", \"LTRIM\", \"OCTETINDEX\", \"OCTET_LENGTH\", \"POSITION\", \"QUOTE_IDENT\", \"QUOTE_LITERAL\", \"REGEXP_COUNT\", \"REGEXP_INSTR\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REPEAT\", \"REPLACE\", \"REPLICATE\", \"REVERSE\", \"RTRIM\", \"SOUNDEX\", \"SPLIT_PART\", \"STRPOS\", \"STRTOL\", \"SUBSTRING\", \"TEXTLEN\", \"TRANSLATE\", \"TRIM\", \"UPPER\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_Type_Info_Functions.html\n\"decimal_precision\", \"decimal_scale\", \"is_array\", \"is_bigint\", \"is_boolean\", \"is_char\", \"is_decimal\", \"is_float\", \"is_integer\", \"is_object\", \"is_scalar\", \"is_smallint\", \"is_varchar\", \"json_typeof\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html\n\"AVG\", \"COUNT\", \"CUME_DIST\", \"DENSE_RANK\", \"FIRST_VALUE\", \"LAST_VALUE\", \"LAG\", \"LEAD\", \"LISTAGG\", \"MAX\", \"MEDIAN\", \"MIN\", \"NTH_VALUE\", \"NTILE\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"RANK\", \"RATIO_TO_REPORT\", \"ROW_NUMBER\", \"STDDEV_SAMP\", \"STDDEV_POP\", \"SUM\", \"VAR_SAMP\", \"VAR_POP\",\n// https://docs.aws.amazon.com/redshift/latest/dg/r_Data_type_formatting.html\n\"CAST\", \"CONVERT\", \"TO_CHAR\", \"TO_DATE\", \"TO_NUMBER\", \"TEXT_TO_INT_ALT\", \"TEXT_TO_NUMERIC_ALT\",\n// https://docs.aws.amazon.com/redshift/latest/dg/r_System_administration_functions.html\n\"CHANGE_QUERY_PRIORITY\", \"CHANGE_SESSION_PRIORITY\", \"CHANGE_USER_PRIORITY\", \"CURRENT_SETTING\", \"PG_CANCEL_BACKEND\", \"PG_TERMINATE_BACKEND\", \"REBOOT_CLUSTER\", \"SET_CONFIG\",\n// https://docs.aws.amazon.com/redshift/latest/dg/r_System_information_functions.html\n\"CURRENT_AWS_ACCOUNT\", \"CURRENT_DATABASE\", \"CURRENT_NAMESPACE\", \"CURRENT_SCHEMA\", \"CURRENT_SCHEMAS\", \"CURRENT_USER\", \"CURRENT_USER_ID\", \"HAS_ASSUMEROLE_PRIVILEGE\", \"HAS_DATABASE_PRIVILEGE\", \"HAS_SCHEMA_PRIVILEGE\", \"HAS_TABLE_PRIVILEGE\", \"PG_BACKEND_PID\", \"PG_GET_COLS\", \"PG_GET_GRANTEE_BY_IAM_ROLE\", \"PG_GET_IAM_ROLE_BY_USER\", \"PG_GET_LATE_BINDING_VIEW_COLS\", \"PG_LAST_COPY_COUNT\", \"PG_LAST_COPY_ID\", \"PG_LAST_UNLOAD_ID\", \"PG_LAST_QUERY_ID\", \"PG_LAST_UNLOAD_COUNT\", \"SESSION_USER\", \"SLICE_NUM\", \"USER\", \"VERSION\"];\n\n// src/languages/redshift/redshift.keywords.ts\nvar keywords11 = [\n// https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\n\"AES128\", \"AES256\", \"ALL\", \"ALLOWOVERWRITE\", \"ANY\", \"AS\", \"ASC\", \"AUTHORIZATION\", \"BACKUP\", \"BETWEEN\", \"BINARY\", \"BOTH\", \"CHECK\", \"COLUMN\", \"CONSTRAINT\", \"CREATE\", \"CROSS\", \"DEFAULT\", \"DEFERRABLE\", \"DEFLATE\", \"DEFRAG\", \"DESC\", \"DISABLE\", \"DISTINCT\", \"DO\", \"ENABLE\", \"ENCODE\", \"ENCRYPT\", \"ENCRYPTION\", \"EXPLICIT\", \"FALSE\", \"FOR\", \"FOREIGN\", \"FREEZE\", \"FROM\", \"FULL\", \"GLOBALDICT256\", \"GLOBALDICT64K\", \"GROUP\", \"IDENTITY\", \"IGNORE\", \"ILIKE\", \"IN\", \"INITIALLY\", \"INNER\", \"INTO\", \"IS\", \"ISNULL\", \"LANGUAGE\", \"LEADING\", \"LIKE\", \"LIMIT\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LUN\", \"LUNS\", \"MINUS\", \"NATURAL\", \"NEW\", \"NOT\", \"NOTNULL\", \"NULL\", \"NULLS\", \"OFF\", \"OFFLINE\", \"OFFSET\", \"OID\", \"OLD\", \"ON\", \"ONLY\", \"OPEN\", \"ORDER\", \"OUTER\", \"OVERLAPS\", \"PARALLEL\", \"PARTITION\", \"PERCENT\", \"PERMISSIONS\", \"PLACING\", \"PRIMARY\", \"RECOVER\", \"REFERENCES\", \"REJECTLOG\", \"RESORT\", \"RESPECT\", \"RESTORE\", \"SIMILAR\", \"SNAPSHOT\", \"SOME\", \"SYSTEM\", \"TABLE\", \"TAG\", \"TDES\", \"THEN\", \"TIMESTAMP\", \"TO\", \"TOP\", \"TRAILING\", \"TRUE\", \"UNIQUE\", \"USING\", \"VERBOSE\", \"WALLET\", \"WITHOUT\",\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n\"ACCEPTANYDATE\", \"ACCEPTINVCHARS\", \"BLANKSASNULL\", \"DATEFORMAT\", \"EMPTYASNULL\", \"ENCODING\", \"ESCAPE\", \"EXPLICIT_IDS\", \"FILLRECORD\", \"IGNOREBLANKLINES\", \"IGNOREHEADER\", \"REMOVEQUOTES\", \"ROUNDEC\", \"TIMEFORMAT\", \"TRIMBLANKS\", \"TRUNCATECOLUMNS\",\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-load.html\n\"COMPROWS\", \"COMPUPDATE\", \"MAXERROR\", \"NOLOAD\", \"STATUPDATE\",\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html\n\"FORMAT\", \"CSV\", \"DELIMITER\", \"FIXEDWIDTH\", \"SHAPEFILE\", \"AVRO\", \"JSON\", \"PARQUET\", \"ORC\",\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-authorization.html\n\"ACCESS_KEY_ID\", \"CREDENTIALS\", \"ENCRYPTED\", \"IAM_ROLE\", \"MASTER_SYMMETRIC_KEY\", \"SECRET_ACCESS_KEY\", \"SESSION_TOKEN\",\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-file-compression.html\n\"BZIP2\", \"GZIP\", \"LZOP\", \"ZSTD\",\n// https://docs.aws.amazon.com/redshift/latest/dg/r_COPY-alphabetical-parm-list.html\n\"MANIFEST\", \"READRATIO\", \"REGION\", \"SSH\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html\n\"RAW\", \"AZ64\", \"BYTEDICT\", \"DELTA\", \"DELTA32K\", \"LZO\", \"MOSTLY8\", \"MOSTLY16\", \"MOSTLY32\", \"RUNLENGTH\", \"TEXT255\", \"TEXT32K\",\n// misc\n// CREATE EXTERNAL SCHEMA (https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html)\n\"CATALOG_ROLE\", \"SECRET_ARN\", \"EXTERNAL\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_choosing_dist_sort.html\n\"AUTO\", \"EVEN\", \"KEY\", \"PREDICATE\",\n// ANALYZE | ANALYSE (https://docs.aws.amazon.com/redshift/latest/dg/r_ANALYZE.html)\n// unknown\n\"COMPRESSION\"\n/**\n * Other keywords not included:\n * STL: https://docs.aws.amazon.com/redshift/latest/dg/c_intro_STL_tables.html\n * SVCS: https://docs.aws.amazon.com/redshift/latest/dg/svcs_views.html\n * SVL: https://docs.aws.amazon.com/redshift/latest/dg/svl_views.html\n * SVV: https://docs.aws.amazon.com/redshift/latest/dg/svv_views.html\n */];\nvar dataTypes11 = [\n// https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-text-and-bpchar-types\n\"ARRAY\", \"BIGINT\", \"BPCHAR\", \"CHAR\", \"CHARACTER VARYING\", \"CHARACTER\", \"DECIMAL\", \"INT\", \"INT2\", \"INT4\", \"INT8\", \"INTEGER\", \"NCHAR\", \"NUMERIC\", \"NVARCHAR\", \"SMALLINT\", \"TEXT\", \"VARBYTE\", \"VARCHAR\"];\n\n// src/languages/redshift/redshift.formatter.ts\nvar reservedSelect11 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses11 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\"]);\nvar standardOnelineClauses10 = expandPhrases([\"CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses10 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE | MATERIALIZED] VIEW\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE [FROM]\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"ALTER TABLE APPEND\", \"ADD [COLUMN]\", \"DROP [COLUMN]\", \"RENAME TO\", \"RENAME COLUMN\", \"ALTER COLUMN\", \"TYPE\",\n// for alter column\n\"ENCODE\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// https://docs.aws.amazon.com/redshift/latest/dg/c_SQL_commands.html\n\"ABORT\", \"ALTER DATABASE\", \"ALTER DATASHARE\", \"ALTER DEFAULT PRIVILEGES\", \"ALTER GROUP\", \"ALTER MATERIALIZED VIEW\", \"ALTER PROCEDURE\", \"ALTER SCHEMA\", \"ALTER USER\", \"ANALYSE\", \"ANALYZE\", \"ANALYSE COMPRESSION\", \"ANALYZE COMPRESSION\", \"BEGIN\", \"CALL\", \"CANCEL\", \"CLOSE\", \"COMMIT\", \"COPY\", \"CREATE DATABASE\", \"CREATE DATASHARE\", \"CREATE EXTERNAL FUNCTION\", \"CREATE EXTERNAL SCHEMA\", \"CREATE EXTERNAL TABLE\", \"CREATE FUNCTION\", \"CREATE GROUP\", \"CREATE LIBRARY\", \"CREATE MODEL\", \"CREATE PROCEDURE\", \"CREATE SCHEMA\", \"CREATE USER\", \"DEALLOCATE\", \"DECLARE\", \"DESC DATASHARE\", \"DROP DATABASE\", \"DROP DATASHARE\", \"DROP FUNCTION\", \"DROP GROUP\", \"DROP LIBRARY\", \"DROP MODEL\", \"DROP MATERIALIZED VIEW\", \"DROP PROCEDURE\", \"DROP SCHEMA\", \"DROP USER\", \"DROP VIEW\", \"DROP\", \"EXECUTE\", \"EXPLAIN\", \"FETCH\", \"GRANT\", \"LOCK\", \"PREPARE\", \"REFRESH MATERIALIZED VIEW\", \"RESET\", \"REVOKE\", \"ROLLBACK\", \"SELECT INTO\", \"SET SESSION AUTHORIZATION\", \"SET SESSION CHARACTERISTICS\", \"SHOW\", \"SHOW EXTERNAL TABLE\", \"SHOW MODEL\", \"SHOW DATASHARES\", \"SHOW PROCEDURE\", \"SHOW TABLE\", \"SHOW VIEW\", \"START TRANSACTION\", \"UNLOAD\", \"VACUUM\"]);\nvar reservedSetOperations11 = expandPhrases([\"UNION [ALL]\", \"EXCEPT\", \"INTERSECT\", \"MINUS\"]);\nvar reservedJoins11 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\"]);\nvar reservedPhrases11 = expandPhrases([\n// https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n\"NULL AS\",\n// https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html\n\"DATA CATALOG\", \"HIVE METASTORE\",\n// in window specifications\n\"{ROWS | RANGE} BETWEEN\"]);\nvar redshift = {\n  name: \"redshift\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect11,\n    reservedClauses: [...reservedClauses11, ...standardOnelineClauses10, ...tabularOnelineClauses10],\n    reservedSetOperations: reservedSetOperations11,\n    reservedJoins: reservedJoins11,\n    reservedPhrases: reservedPhrases11,\n    reservedKeywords: keywords11,\n    reservedDataTypes: dataTypes11,\n    reservedFunctionNames: functions11,\n    stringTypes: [\"''-qq\"],\n    identTypes: [`\"\"-qq`],\n    identChars: {\n      first: \"#\"\n    },\n    paramTypes: {\n      numbered: [\"$\"]\n    },\n    operators: [\"^\", \"%\", \"@\", \"|/\", \"||/\", \"&\", \"|\",\n    // '#', conflicts with first char of identifier\n    \"~\", \"<<\", \">>\", \"||\", \"::\"]\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"::\"],\n    onelineClauses: [...standardOnelineClauses10, ...tabularOnelineClauses10],\n    tabularOnelineClauses: tabularOnelineClauses10\n  }\n};\n\n// src/languages/spark/spark.keywords.ts\nvar keywords12 = [\n// https://deepkb.com/CO_000013/en/kb/IMPORT-fbfa59f0-2bf1-31fe-bb7b-0f9efe9932c6/spark-sql-keywords\n\"ADD\", \"AFTER\", \"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"ANTI\", \"ANY\", \"ARCHIVE\", \"AS\", \"ASC\", \"AT\", \"AUTHORIZATION\", \"BETWEEN\", \"BOTH\", \"BUCKET\", \"BUCKETS\", \"BY\", \"CACHE\", \"CASCADE\", \"CAST\", \"CHANGE\", \"CHECK\", \"CLEAR\", \"CLUSTER\", \"CLUSTERED\", \"CODEGEN\", \"COLLATE\", \"COLLECTION\", \"COLUMN\", \"COLUMNS\", \"COMMENT\", \"COMMIT\", \"COMPACT\", \"COMPACTIONS\", \"COMPUTE\", \"CONCATENATE\", \"CONSTRAINT\", \"COST\", \"CREATE\", \"CROSS\", \"CUBE\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"DATA\", \"DATABASE\", \"DATABASES\", \"DAY\", \"DBPROPERTIES\", \"DEFINED\", \"DELETE\", \"DELIMITED\", \"DESC\", \"DESCRIBE\", \"DFS\", \"DIRECTORIES\", \"DIRECTORY\", \"DISTINCT\", \"DISTRIBUTE\", \"DIV\", \"DROP\", \"ESCAPE\", \"ESCAPED\", \"EXCEPT\", \"EXCHANGE\", \"EXISTS\", \"EXPORT\", \"EXTENDED\", \"EXTERNAL\", \"EXTRACT\", \"FALSE\", \"FETCH\", \"FIELDS\", \"FILTER\", \"FILEFORMAT\", \"FIRST\", \"FIRST_VALUE\", \"FOLLOWING\", \"FOR\", \"FOREIGN\", \"FORMAT\", \"FORMATTED\", \"FULL\", \"FUNCTION\", \"FUNCTIONS\", \"GLOBAL\", \"GRANT\", \"GROUP\", \"GROUPING\", \"HOUR\", \"IF\", \"IGNORE\", \"IMPORT\", \"IN\", \"INDEX\", \"INDEXES\", \"INNER\", \"INPATH\", \"INPUTFORMAT\", \"INTERSECT\", \"INTO\", \"IS\", \"ITEMS\", \"KEYS\", \"LAST\", \"LAST_VALUE\", \"LATERAL\", \"LAZY\", \"LEADING\", \"LEFT\", \"LIKE\", \"LINES\", \"LIST\", \"LOCAL\", \"LOCATION\", \"LOCK\", \"LOCKS\", \"LOGICAL\", \"MACRO\", \"MATCHED\", \"MERGE\", \"MINUTE\", \"MONTH\", \"MSCK\", \"NAMESPACE\", \"NAMESPACES\", \"NATURAL\", \"NO\", \"NOT\", \"NULL\", \"NULLS\", \"OF\", \"ONLY\", \"OPTION\", \"OPTIONS\", \"OR\", \"ORDER\", \"OUT\", \"OUTER\", \"OUTPUTFORMAT\", \"OVER\", \"OVERLAPS\", \"OVERLAY\", \"OVERWRITE\", \"OWNER\", \"PARTITION\", \"PARTITIONED\", \"PARTITIONS\", \"PERCENT\", \"PLACING\", \"POSITION\", \"PRECEDING\", \"PRIMARY\", \"PRINCIPALS\", \"PROPERTIES\", \"PURGE\", \"QUERY\", \"RANGE\", \"RECORDREADER\", \"RECORDWRITER\", \"RECOVER\", \"REDUCE\", \"REFERENCES\", \"RENAME\", \"REPAIR\", \"REPLACE\", \"RESPECT\", \"RESTRICT\", \"REVOKE\", \"RIGHT\", \"RLIKE\", \"ROLE\", \"ROLES\", \"ROLLBACK\", \"ROLLUP\", \"ROW\", \"ROWS\", \"SCHEMA\", \"SECOND\", \"SELECT\", \"SEMI\", \"SEPARATED\", \"SERDE\", \"SERDEPROPERTIES\", \"SESSION_USER\", \"SETS\", \"SHOW\", \"SKEWED\", \"SOME\", \"SORT\", \"SORTED\", \"START\", \"STATISTICS\", \"STORED\", \"STRATIFY\", \"SUBSTR\", \"SUBSTRING\", \"TABLE\", \"TABLES\", \"TBLPROPERTIES\", \"TEMPORARY\", \"TERMINATED\", \"THEN\", \"TO\", \"TOUCH\", \"TRAILING\", \"TRANSACTION\", \"TRANSACTIONS\", \"TRIM\", \"TRUE\", \"TRUNCATE\", \"UNARCHIVE\", \"UNBOUNDED\", \"UNCACHE\", \"UNIQUE\", \"UNKNOWN\", \"UNLOCK\", \"UNSET\", \"USE\", \"USER\", \"USING\", \"VIEW\", \"WINDOW\", \"YEAR\",\n// other\n\"ANALYSE\", \"ARRAY_ZIP\", \"COALESCE\", \"CONTAINS\", \"CONVERT\", \"DAYS\", \"DAY_HOUR\", \"DAY_MINUTE\", \"DAY_SECOND\", \"DECODE\", \"DEFAULT\", \"DISTINCTROW\", \"ENCODE\", \"EXPLODE\", \"EXPLODE_OUTER\", \"FIXED\", \"GREATEST\", \"GROUP_CONCAT\", \"HOURS\", \"HOUR_MINUTE\", \"HOUR_SECOND\", \"IFNULL\", \"LEAST\", \"LEVEL\", \"MINUTE_SECOND\", \"NULLIF\", \"OFFSET\", \"ON\", \"OPTIMIZE\", \"REGEXP\", \"SEPARATOR\", \"SIZE\", \"TYPE\", \"TYPES\", \"UNSIGNED\", \"VARIABLES\", \"YEAR_MONTH\"];\nvar dataTypes12 = [\n// https://spark.apache.org/docs/latest/sql-ref-datatypes.html\n\"ARRAY\", \"BIGINT\", \"BINARY\", \"BOOLEAN\", \"BYTE\", \"CHAR\", \"DATE\", \"DEC\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"INTEGER\", \"INTERVAL\", \"LONG\", \"MAP\", \"NUMERIC\", \"REAL\", \"SHORT\", \"SMALLINT\", \"STRING\", \"STRUCT\", \"TIMESTAMP_LTZ\", \"TIMESTAMP_NTZ\", \"TIMESTAMP\", \"TINYINT\", \"VARCHAR\"\n// No varchar type in Spark, only STRING. Added for the sake of tests\n];\n\n// src/languages/spark/spark.functions.ts\nvar functions12 = [\n// http://spark.apache.org/docs/latest/sql-ref-functions.html\n//\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#aggregate-functions\n// 'ANY',\n\"APPROX_COUNT_DISTINCT\", \"APPROX_PERCENTILE\", \"AVG\", \"BIT_AND\", \"BIT_OR\", \"BIT_XOR\", \"BOOL_AND\", \"BOOL_OR\", \"COLLECT_LIST\", \"COLLECT_SET\", \"CORR\", \"COUNT\", \"COUNT\", \"COUNT\", \"COUNT_IF\", \"COUNT_MIN_SKETCH\", \"COVAR_POP\", \"COVAR_SAMP\", \"EVERY\", \"FIRST\", \"FIRST_VALUE\", \"GROUPING\", \"GROUPING_ID\", \"KURTOSIS\", \"LAST\", \"LAST_VALUE\", \"MAX\", \"MAX_BY\", \"MEAN\", \"MIN\", \"MIN_BY\", \"PERCENTILE\", \"PERCENTILE\", \"PERCENTILE_APPROX\", \"SKEWNESS\",\n// 'SOME',\n\"STD\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"SUM\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\",\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#window-functions\n\"CUME_DIST\", \"DENSE_RANK\", \"LAG\", \"LEAD\", \"NTH_VALUE\", \"NTILE\", \"PERCENT_RANK\", \"RANK\", \"ROW_NUMBER\",\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#array-functions\n\"ARRAY\", \"ARRAY_CONTAINS\", \"ARRAY_DISTINCT\", \"ARRAY_EXCEPT\", \"ARRAY_INTERSECT\", \"ARRAY_JOIN\", \"ARRAY_MAX\", \"ARRAY_MIN\", \"ARRAY_POSITION\", \"ARRAY_REMOVE\", \"ARRAY_REPEAT\", \"ARRAY_UNION\", \"ARRAYS_OVERLAP\", \"ARRAYS_ZIP\", \"FLATTEN\", \"SEQUENCE\", \"SHUFFLE\", \"SLICE\", \"SORT_ARRAY\",\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#map-functions\n\"ELEMENT_AT\", \"ELEMENT_AT\", \"MAP_CONCAT\", \"MAP_ENTRIES\", \"MAP_FROM_ARRAYS\", \"MAP_FROM_ENTRIES\", \"MAP_KEYS\", \"MAP_VALUES\", \"STR_TO_MAP\",\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#date-and-timestamp-functions\n\"ADD_MONTHS\", \"CURRENT_DATE\", \"CURRENT_DATE\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"DATE_ADD\", \"DATE_FORMAT\", \"DATE_FROM_UNIX_DATE\", \"DATE_PART\", \"DATE_SUB\", \"DATE_TRUNC\", \"DATEDIFF\", \"DAY\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"EXTRACT\", \"FROM_UNIXTIME\", \"FROM_UTC_TIMESTAMP\", \"HOUR\", \"LAST_DAY\", \"MAKE_DATE\", \"MAKE_DT_INTERVAL\", \"MAKE_INTERVAL\", \"MAKE_TIMESTAMP\", \"MAKE_YM_INTERVAL\", \"MINUTE\", \"MONTH\", \"MONTHS_BETWEEN\", \"NEXT_DAY\", \"NOW\", \"QUARTER\", \"SECOND\", \"SESSION_WINDOW\", \"TIMESTAMP_MICROS\", \"TIMESTAMP_MILLIS\", \"TIMESTAMP_SECONDS\", \"TO_DATE\", \"TO_TIMESTAMP\", \"TO_UNIX_TIMESTAMP\", \"TO_UTC_TIMESTAMP\", \"TRUNC\", \"UNIX_DATE\", \"UNIX_MICROS\", \"UNIX_MILLIS\", \"UNIX_SECONDS\", \"UNIX_TIMESTAMP\", \"WEEKDAY\", \"WEEKOFYEAR\", \"WINDOW\", \"YEAR\",\n// http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#json-functions\n\"FROM_JSON\", \"GET_JSON_OBJECT\", \"JSON_ARRAY_LENGTH\", \"JSON_OBJECT_KEYS\", \"JSON_TUPLE\", \"SCHEMA_OF_JSON\", \"TO_JSON\",\n// http://spark.apache.org/docs/latest/api/sql/index.html\n\"ABS\", \"ACOS\", \"ACOSH\", \"AGGREGATE\", \"ARRAY_SORT\", \"ASCII\", \"ASIN\", \"ASINH\", \"ASSERT_TRUE\", \"ATAN\", \"ATAN2\", \"ATANH\", \"BASE64\", \"BIN\", \"BIT_COUNT\", \"BIT_GET\", \"BIT_LENGTH\", \"BROUND\", \"BTRIM\", \"CARDINALITY\", \"CBRT\", \"CEIL\", \"CEILING\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CHR\", \"CONCAT\", \"CONCAT_WS\", \"CONV\", \"COS\", \"COSH\", \"COT\", \"CRC32\", \"CURRENT_CATALOG\", \"CURRENT_DATABASE\", \"CURRENT_USER\", \"DEGREES\",\n// 'E',\n\"ELT\", \"EXP\", \"EXPM1\", \"FACTORIAL\", \"FIND_IN_SET\", \"FLOOR\", \"FORALL\", \"FORMAT_NUMBER\", \"FORMAT_STRING\", \"FROM_CSV\", \"GETBIT\", \"HASH\", \"HEX\", \"HYPOT\", \"INITCAP\", \"INLINE\", \"INLINE_OUTER\", \"INPUT_FILE_BLOCK_LENGTH\", \"INPUT_FILE_BLOCK_START\", \"INPUT_FILE_NAME\", \"INSTR\", \"ISNAN\", \"ISNOTNULL\", \"ISNULL\", \"JAVA_METHOD\", \"LCASE\", \"LEFT\", \"LENGTH\", \"LEVENSHTEIN\", \"LN\", \"LOCATE\", \"LOG\", \"LOG10\", \"LOG1P\", \"LOG2\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MAP_FILTER\", \"MAP_ZIP_WITH\", \"MD5\", \"MOD\", \"MONOTONICALLY_INCREASING_ID\", \"NAMED_STRUCT\", \"NANVL\", \"NEGATIVE\", \"NVL\", \"NVL2\", \"OCTET_LENGTH\", \"OVERLAY\", \"PARSE_URL\", \"PI\", \"PMOD\", \"POSEXPLODE\", \"POSEXPLODE_OUTER\", \"POSITION\", \"POSITIVE\", \"POW\", \"POWER\", \"PRINTF\", \"RADIANS\", \"RAISE_ERROR\", \"RAND\", \"RANDN\", \"RANDOM\", \"REFLECT\", \"REGEXP_EXTRACT\", \"REGEXP_EXTRACT_ALL\", \"REGEXP_LIKE\", \"REGEXP_REPLACE\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RIGHT\", \"RINT\", \"ROUND\", \"RPAD\", \"RTRIM\", \"SCHEMA_OF_CSV\", \"SENTENCES\", \"SHA\", \"SHA1\", \"SHA2\", \"SHIFTLEFT\", \"SHIFTRIGHT\", \"SHIFTRIGHTUNSIGNED\", \"SIGN\", \"SIGNUM\", \"SIN\", \"SINH\", \"SOUNDEX\", \"SPACE\", \"SPARK_PARTITION_ID\", \"SPLIT\", \"SQRT\", \"STACK\", \"SUBSTR\", \"SUBSTRING\", \"SUBSTRING_INDEX\", \"TAN\", \"TANH\", \"TO_CSV\", \"TRANSFORM_KEYS\", \"TRANSFORM_VALUES\", \"TRANSLATE\", \"TRIM\", \"TRY_ADD\", \"TRY_DIVIDE\", \"TYPEOF\", \"UCASE\", \"UNBASE64\", \"UNHEX\", \"UPPER\", \"UUID\", \"VERSION\", \"WIDTH_BUCKET\", \"XPATH\", \"XPATH_BOOLEAN\", \"XPATH_DOUBLE\", \"XPATH_FLOAT\", \"XPATH_INT\", \"XPATH_LONG\", \"XPATH_NUMBER\", \"XPATH_SHORT\", \"XPATH_STRING\", \"XXHASH64\", \"ZIP_WITH\",\n// cast\n\"CAST\",\n// Shorthand functions to use in place of CASE expression\n\"COALESCE\", \"NULLIF\"];\n\n// src/languages/spark/spark.formatter.ts\nvar reservedSelect12 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses12 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"SORT BY\", \"CLUSTER BY\", \"DISTRIBUTE BY\", \"LIMIT\",\n// Data manipulation\n// - insert:\n\"INSERT [INTO | OVERWRITE] [TABLE]\", \"VALUES\",\n// - insert overwrite directory:\n//   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-insert-overwrite-directory.html\n\"INSERT OVERWRITE [LOCAL] DIRECTORY\",\n// - load:\n//   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-load.html\n\"LOAD DATA [LOCAL] INPATH\", \"[OVERWRITE] INTO TABLE\"]);\nvar standardOnelineClauses11 = expandPhrases([\"CREATE [EXTERNAL] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses11 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"ADD COLUMNS\", \"DROP {COLUMN | COLUMNS}\", \"RENAME TO\", \"RENAME COLUMN\", \"ALTER COLUMN\",\n// - truncate:\n\"TRUNCATE TABLE\",\n// other\n\"LATERAL VIEW\", \"ALTER DATABASE\", \"ALTER VIEW\", \"CREATE DATABASE\", \"CREATE FUNCTION\", \"DROP DATABASE\", \"DROP FUNCTION\", \"DROP VIEW\", \"REPAIR TABLE\", \"USE DATABASE\",\n// Data Retrieval\n\"TABLESAMPLE\", \"PIVOT\", \"TRANSFORM\", \"EXPLAIN\",\n// Auxiliary\n\"ADD FILE\", \"ADD JAR\", \"ANALYZE TABLE\", \"CACHE TABLE\", \"CLEAR CACHE\", \"DESCRIBE DATABASE\", \"DESCRIBE FUNCTION\", \"DESCRIBE QUERY\", \"DESCRIBE TABLE\", \"LIST FILE\", \"LIST JAR\", \"REFRESH\", \"REFRESH TABLE\", \"REFRESH FUNCTION\", \"RESET\", \"SHOW COLUMNS\", \"SHOW CREATE TABLE\", \"SHOW DATABASES\", \"SHOW FUNCTIONS\", \"SHOW PARTITIONS\", \"SHOW TABLE EXTENDED\", \"SHOW TABLES\", \"SHOW TBLPROPERTIES\", \"SHOW VIEWS\", \"UNCACHE TABLE\"]);\nvar reservedSetOperations12 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT [ALL | DISTINCT]\", \"INTERSECT [ALL | DISTINCT]\"]);\nvar reservedJoins12 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\",\n// non-standard-joins\n\"[LEFT] {ANTI | SEMI} JOIN\", \"NATURAL [LEFT] {ANTI | SEMI} JOIN\"]);\nvar reservedPhrases12 = expandPhrases([\"ON DELETE\", \"ON UPDATE\", \"CURRENT ROW\", \"{ROWS | RANGE} BETWEEN\"]);\nvar spark = {\n  name: \"spark\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect12,\n    reservedClauses: [...reservedClauses12, ...standardOnelineClauses11, ...tabularOnelineClauses11],\n    reservedSetOperations: reservedSetOperations12,\n    reservedJoins: reservedJoins12,\n    reservedPhrases: reservedPhrases12,\n    supportsXor: true,\n    reservedKeywords: keywords12,\n    reservedDataTypes: dataTypes12,\n    reservedFunctionNames: functions12,\n    extraParens: [\"[]\"],\n    stringTypes: [\"''-bs\", '\"\"-bs', {\n      quote: \"''-raw\",\n      prefixes: [\"R\", \"X\"],\n      requirePrefix: true\n    }, {\n      quote: '\"\"-raw',\n      prefixes: [\"R\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    variableTypes: [{\n      quote: \"{}\",\n      prefixes: [\"$\"],\n      requirePrefix: true\n    }],\n    operators: [\"%\", \"~\", \"^\", \"|\", \"&\", \"<=>\", \"==\", \"!\", \"||\", \"->\"],\n    postProcess: postProcess4\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses11, ...tabularOnelineClauses11],\n    tabularOnelineClauses: tabularOnelineClauses11\n  }\n};\nfunction postProcess4(tokens) {\n  return tokens.map((token, i) => {\n    const prevToken = tokens[i - 1] || EOF_TOKEN;\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.WINDOW(token) && nextToken.type === \"OPEN_PAREN\" /* OPEN_PAREN */) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */\n      });\n    }\n    if (token.text === \"ITEMS\" && token.type === \"RESERVED_KEYWORD\" /* RESERVED_KEYWORD */) {\n      if (!(prevToken.text === \"COLLECTION\" && nextToken.text === \"TERMINATED\")) {\n        return __spreadProps(__spreadValues({}, token), {\n          type: \"IDENTIFIER\" /* IDENTIFIER */,\n          text: token.raw\n        });\n      }\n    }\n    return token;\n  });\n}\n\n// src/languages/sqlite/sqlite.functions.ts\nvar functions13 = [\n// https://www.sqlite.org/lang_corefunc.html\n\"ABS\", \"CHANGES\", \"CHAR\", \"COALESCE\", \"FORMAT\", \"GLOB\", \"HEX\", \"IFNULL\", \"IIF\", \"INSTR\", \"LAST_INSERT_ROWID\", \"LENGTH\", \"LIKE\", \"LIKELIHOOD\", \"LIKELY\", \"LOAD_EXTENSION\", \"LOWER\", \"LTRIM\", \"NULLIF\", \"PRINTF\", \"QUOTE\", \"RANDOM\", \"RANDOMBLOB\", \"REPLACE\", \"ROUND\", \"RTRIM\", \"SIGN\", \"SOUNDEX\", \"SQLITE_COMPILEOPTION_GET\", \"SQLITE_COMPILEOPTION_USED\", \"SQLITE_OFFSET\", \"SQLITE_SOURCE_ID\", \"SQLITE_VERSION\", \"SUBSTR\", \"SUBSTRING\", \"TOTAL_CHANGES\", \"TRIM\", \"TYPEOF\", \"UNICODE\", \"UNLIKELY\", \"UPPER\", \"ZEROBLOB\",\n// https://www.sqlite.org/lang_aggfunc.html\n\"AVG\", \"COUNT\", \"GROUP_CONCAT\", \"MAX\", \"MIN\", \"SUM\", \"TOTAL\",\n// https://www.sqlite.org/lang_datefunc.html\n\"DATE\", \"TIME\", \"DATETIME\", \"JULIANDAY\", \"UNIXEPOCH\", \"STRFTIME\",\n// https://www.sqlite.org/windowfunctions.html#biwinfunc\n\"row_number\", \"rank\", \"dense_rank\", \"percent_rank\", \"cume_dist\", \"ntile\", \"lag\", \"lead\", \"first_value\", \"last_value\", \"nth_value\",\n// https://www.sqlite.org/lang_mathfunc.html\n\"ACOS\", \"ACOSH\", \"ASIN\", \"ASINH\", \"ATAN\", \"ATAN2\", \"ATANH\", \"CEIL\", \"CEILING\", \"COS\", \"COSH\", \"DEGREES\", \"EXP\", \"FLOOR\", \"LN\", \"LOG\", \"LOG\", \"LOG10\", \"LOG2\", \"MOD\", \"PI\", \"POW\", \"POWER\", \"RADIANS\", \"SIN\", \"SINH\", \"SQRT\", \"TAN\", \"TANH\", \"TRUNC\",\n// https://www.sqlite.org/json1.html\n\"JSON\", \"JSON_ARRAY\", \"JSON_ARRAY_LENGTH\", \"JSON_ARRAY_LENGTH\", \"JSON_EXTRACT\", \"JSON_INSERT\", \"JSON_OBJECT\", \"JSON_PATCH\", \"JSON_REMOVE\", \"JSON_REPLACE\", \"JSON_SET\", \"JSON_TYPE\", \"JSON_TYPE\", \"JSON_VALID\", \"JSON_QUOTE\", \"JSON_GROUP_ARRAY\", \"JSON_GROUP_OBJECT\", \"JSON_EACH\", \"JSON_TREE\",\n// cast\n\"CAST\"];\n\n// src/languages/sqlite/sqlite.keywords.ts\nvar keywords13 = [\n// https://www.sqlite.org/lang_keywords.html\n// Note: The keywords listed on that URL are not all reserved keywords.\n// We'll need to clean up this list to only include reserved keywords.\n\"ABORT\", \"ACTION\", \"ADD\", \"AFTER\", \"ALL\", \"ALTER\", \"AND\", \"ARE\", \"ALWAYS\", \"ANALYZE\", \"AS\", \"ASC\", \"ATTACH\", \"AUTOINCREMENT\", \"BEFORE\", \"BEGIN\", \"BETWEEN\", \"BY\", \"CASCADE\", \"CASE\", \"CAST\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"COMMIT\", \"CONFLICT\", \"CONSTRAINT\", \"CREATE\", \"CROSS\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"DATABASE\", \"DEFAULT\", \"DEFERRABLE\", \"DEFERRED\", \"DELETE\", \"DESC\", \"DETACH\", \"DISTINCT\", \"DO\", \"DROP\", \"EACH\", \"ELSE\", \"END\", \"ESCAPE\", \"EXCEPT\", \"EXCLUDE\", \"EXCLUSIVE\", \"EXISTS\", \"EXPLAIN\", \"FAIL\", \"FILTER\", \"FIRST\", \"FOLLOWING\", \"FOR\", \"FOREIGN\", \"FROM\", \"FULL\", \"GENERATED\", \"GLOB\", \"GROUP\", \"HAVING\", \"IF\", \"IGNORE\", \"IMMEDIATE\", \"IN\", \"INDEX\", \"INDEXED\", \"INITIALLY\", \"INNER\", \"INSERT\", \"INSTEAD\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"JOIN\", \"KEY\", \"LAST\", \"LEFT\", \"LIKE\", \"LIMIT\", \"MATCH\", \"MATERIALIZED\", \"NATURAL\", \"NO\", \"NOT\", \"NOTHING\", \"NOTNULL\", \"NULL\", \"NULLS\", \"OF\", \"OFFSET\", \"ON\", \"ONLY\", \"OPEN\", \"OR\", \"ORDER\", \"OTHERS\", \"OUTER\", \"OVER\", \"PARTITION\", \"PLAN\", \"PRAGMA\", \"PRECEDING\", \"PRIMARY\", \"QUERY\", \"RAISE\", \"RANGE\", \"RECURSIVE\", \"REFERENCES\", \"REGEXP\", \"REINDEX\", \"RELEASE\", \"RENAME\", \"REPLACE\", \"RESTRICT\", \"RETURNING\", \"RIGHT\", \"ROLLBACK\", \"ROW\", \"ROWS\", \"SAVEPOINT\", \"SELECT\", \"SET\", \"TABLE\", \"TEMP\", \"TEMPORARY\", \"THEN\", \"TIES\", \"TO\", \"TRANSACTION\", \"TRIGGER\", \"UNBOUNDED\", \"UNION\", \"UNIQUE\", \"UPDATE\", \"USING\", \"VACUUM\", \"VALUES\", \"VIEW\", \"VIRTUAL\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\", \"WITHOUT\"];\nvar dataTypes13 = [\n// SQLite allows any word as a data type, e.g. CREATE TABLE foo (col1 madeupname(123));\n// Here we just list some common ones as SQL Formatter\n// is only able to detect a predefined list of data types.\n// https://www.sqlite.org/stricttables.html\n// https://www.sqlite.org/datatype3.html\n\"ANY\", \"ARRAY\", \"BLOB\", \"CHARACTER\", \"DECIMAL\", \"INT\", \"INTEGER\", \"NATIVE CHARACTER\", \"NCHAR\", \"NUMERIC\", \"NVARCHAR\", \"REAL\", \"TEXT\", \"VARCHAR\", \"VARYING CHARACTER\"];\n\n// src/languages/sqlite/sqlite.formatter.ts\nvar reservedSelect13 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses13 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO\", \"REPLACE INTO\", \"VALUES\",\n// - update:\n\"SET\"]);\nvar standardOnelineClauses12 = expandPhrases([\"CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses12 = expandPhrases([\n// - create:\n\"CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]\",\n// - insert:\n\"ON CONFLICT\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"ADD [COLUMN]\", \"DROP [COLUMN]\", \"RENAME [COLUMN]\", \"RENAME TO\",\n// - set schema\n\"SET SCHEMA\"]);\nvar reservedSetOperations13 = expandPhrases([\"UNION [ALL]\", \"EXCEPT\", \"INTERSECT\"]);\nvar reservedJoins13 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\"]);\nvar reservedPhrases13 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\", \"{ROWS | RANGE | GROUPS} BETWEEN\", \"DO UPDATE\"]);\nvar sqlite = {\n  name: \"sqlite\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect13,\n    reservedClauses: [...reservedClauses13, ...standardOnelineClauses12, ...tabularOnelineClauses12],\n    reservedSetOperations: reservedSetOperations13,\n    reservedJoins: reservedJoins13,\n    reservedPhrases: reservedPhrases13,\n    reservedKeywords: keywords13,\n    reservedDataTypes: dataTypes13,\n    reservedFunctionNames: functions13,\n    stringTypes: [\"''-qq\", {\n      quote: \"''-raw\",\n      prefixes: [\"X\"],\n      requirePrefix: true\n    }\n    // Depending on context SQLite also supports double-quotes for strings,\n    // and single-quotes for identifiers.\n    ],\n    identTypes: [`\"\"-qq`, \"``\", \"[]\"],\n    // https://www.sqlite.org/lang_expr.html#parameters\n    paramTypes: {\n      positional: true,\n      numbered: [\"?\"],\n      named: [\":\", \"@\", \"$\"]\n    },\n    operators: [\"%\", \"~\", \"&\", \"|\", \"<<\", \">>\", \"==\", \"->\", \"->>\", \"||\"]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses12, ...tabularOnelineClauses12],\n    tabularOnelineClauses: tabularOnelineClauses12\n  }\n};\n\n// src/languages/sql/sql.functions.ts\nvar functions14 = [\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_9_set_function_specification\n\"GROUPING\",\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_10_window_function\n\"RANK\", \"DENSE_RANK\", \"PERCENT_RANK\", \"CUME_DIST\", \"ROW_NUMBER\",\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_27_numeric_value_function\n\"POSITION\", \"OCCURRENCES_REGEX\", \"POSITION_REGEX\", \"EXTRACT\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"OCTET_LENGTH\", \"CARDINALITY\", \"ABS\", \"MOD\", \"LN\", \"EXP\", \"POWER\", \"SQRT\", \"FLOOR\", \"CEIL\", \"CEILING\", \"WIDTH_BUCKET\",\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_29_string_value_function\n\"SUBSTRING\", \"SUBSTRING_REGEX\", \"UPPER\", \"LOWER\", \"CONVERT\", \"TRANSLATE\", \"TRANSLATE_REGEX\", \"TRIM\", \"OVERLAY\", \"NORMALIZE\", \"SPECIFICTYPE\",\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_31_datetime_value_function\n\"CURRENT_DATE\", \"CURRENT_TIME\", \"LOCALTIME\", \"CURRENT_TIMESTAMP\", \"LOCALTIMESTAMP\",\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_38_multiset_value_function\n// SET serves multiple roles: a SET() function and a SET keyword e.g. in UPDATE table SET ...\n// multiset\n// 'SET', (disabled for now)\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_10_9_aggregate_function\n\"COUNT\", \"AVG\", \"MAX\", \"MIN\", \"SUM\",\n// 'EVERY',\n// 'ANY',\n// 'SOME',\n\"STDDEV_POP\", \"STDDEV_SAMP\", \"VAR_SAMP\", \"VAR_POP\", \"COLLECT\", \"FUSION\", \"INTERSECTION\", \"COVAR_POP\", \"COVAR_SAMP\", \"CORR\", \"REGR_SLOPE\", \"REGR_INTERCEPT\", \"REGR_COUNT\", \"REGR_R2\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_SXX\", \"REGR_SYY\", \"REGR_SXY\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\",\n// CAST is a pretty complex case, involving multiple forms:\n// - CAST(col AS int)\n// - CAST(...) WITH ...\n// - CAST FROM int\n// - CREATE CAST(mycol AS int) WITH ...\n\"CAST\",\n// Shorthand functions to use in place of CASE expression\n\"COALESCE\", \"NULLIF\",\n// Non-standard functions that have widespread support\n\"ROUND\", \"SIN\", \"COS\", \"TAN\", \"ASIN\", \"ACOS\", \"ATAN\"];\n\n// src/languages/sql/sql.keywords.ts\nvar keywords14 = [\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#reserved-word\n\"ALL\", \"ALLOCATE\", \"ALTER\", \"ANY\",\n// <- moved over from functions\n\"ARE\", \"AS\", \"ASC\",\n// Not reserved in SQL-2008, but commonly reserved in most dialects\n\"ASENSITIVE\", \"ASYMMETRIC\", \"AT\", \"ATOMIC\", \"AUTHORIZATION\", \"BEGIN\", \"BETWEEN\", \"BOTH\", \"BY\", \"CALL\", \"CALLED\", \"CASCADED\", \"CAST\", \"CHECK\", \"CLOSE\", \"COALESCE\", \"COLLATE\", \"COLUMN\", \"COMMIT\", \"CONDITION\", \"CONNECT\", \"CONSTRAINT\", \"CORRESPONDING\", \"CREATE\", \"CROSS\", \"CUBE\", \"CURRENT\", \"CURRENT_CATALOG\", \"CURRENT_DEFAULT_TRANSFORM_GROUP\", \"CURRENT_PATH\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_TRANSFORM_GROUP_FOR_TYPE\", \"CURRENT_USER\", \"CURSOR\", \"CYCLE\", \"DEALLOCATE\", \"DAY\", \"DECLARE\", \"DEFAULT\", \"DELETE\", \"DEREF\", \"DESC\",\n// Not reserved in SQL-2008, but commonly reserved in most dialects\n\"DESCRIBE\", \"DETERMINISTIC\", \"DISCONNECT\", \"DISTINCT\", \"DROP\", \"DYNAMIC\", \"EACH\", \"ELEMENT\", \"END-EXEC\", \"ESCAPE\", \"EVERY\",\n// <- moved over from functions\n\"EXCEPT\", \"EXEC\", \"EXECUTE\", \"EXISTS\", \"EXTERNAL\", \"FALSE\", \"FETCH\", \"FILTER\", \"FOR\", \"FOREIGN\", \"FREE\", \"FROM\", \"FULL\", \"FUNCTION\", \"GET\", \"GLOBAL\", \"GRANT\", \"GROUP\", \"HAVING\", \"HOLD\", \"HOUR\", \"IDENTITY\", \"IN\", \"INDICATOR\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"LANGUAGE\", \"LARGE\", \"LATERAL\", \"LEADING\", \"LEFT\", \"LIKE\", \"LIKE_REGEX\", \"LOCAL\", \"MATCH\", \"MEMBER\", \"MERGE\", \"METHOD\", \"MINUTE\", \"MODIFIES\", \"MODULE\", \"MONTH\", \"NATURAL\", \"NEW\", \"NO\", \"NONE\", \"NOT\", \"NULL\", \"NULLIF\", \"OF\", \"OLD\", \"ON\", \"ONLY\", \"OPEN\", \"ORDER\", \"OUT\", \"OUTER\", \"OVER\", \"OVERLAPS\", \"PARAMETER\", \"PARTITION\", \"PRECISION\", \"PREPARE\", \"PRIMARY\", \"PROCEDURE\", \"RANGE\", \"READS\", \"REAL\", \"RECURSIVE\", \"REF\", \"REFERENCES\", \"REFERENCING\", \"RELEASE\", \"RESULT\", \"RETURN\", \"RETURNS\", \"REVOKE\", \"RIGHT\", \"ROLLBACK\", \"ROLLUP\", \"ROW\", \"ROWS\", \"SAVEPOINT\", \"SCOPE\", \"SCROLL\", \"SEARCH\", \"SECOND\", \"SELECT\", \"SENSITIVE\", \"SESSION_USER\", \"SET\", \"SIMILAR\", \"SOME\",\n// <- moved over from functions\n\"SPECIFIC\", \"SQL\", \"SQLEXCEPTION\", \"SQLSTATE\", \"SQLWARNING\", \"START\", \"STATIC\", \"SUBMULTISET\", \"SYMMETRIC\", \"SYSTEM\", \"SYSTEM_USER\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TIMEZONE_HOUR\", \"TIMEZONE_MINUTE\", \"TO\", \"TRAILING\", \"TRANSLATION\", \"TREAT\", \"TRIGGER\", \"TRUE\", \"UESCAPE\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UNNEST\", \"UPDATE\", \"USER\", \"USING\", \"VALUE\", \"VALUES\", \"WHENEVER\", \"WINDOW\", \"WITHIN\", \"WITHOUT\", \"YEAR\"];\nvar dataTypes14 = [\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_1_data_type\n\"ARRAY\", \"BIGINT\", \"BINARY LARGE OBJECT\", \"BINARY VARYING\", \"BINARY\", \"BLOB\", \"BOOLEAN\", \"CHAR LARGE OBJECT\", \"CHAR VARYING\", \"CHAR\", \"CHARACTER LARGE OBJECT\", \"CHARACTER VARYING\", \"CHARACTER\", \"CLOB\", \"DATE\", \"DEC\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"INTEGER\", \"INTERVAL\", \"MULTISET\", \"NATIONAL CHAR VARYING\", \"NATIONAL CHAR\", \"NATIONAL CHARACTER LARGE OBJECT\", \"NATIONAL CHARACTER VARYING\", \"NATIONAL CHARACTER\", \"NCHAR LARGE OBJECT\", \"NCHAR VARYING\", \"NCHAR\", \"NCLOB\", \"NUMERIC\", \"SMALLINT\", \"TIME\", \"TIMESTAMP\", \"VARBINARY\", \"VARCHAR\"];\n\n// src/languages/sql/sql.formatter.ts\nvar reservedSelect14 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses14 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY [ALL | DISTINCT]\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\", \"FETCH {FIRST | NEXT}\",\n// Data manipulation\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\"]);\nvar standardOnelineClauses13 = expandPhrases([\"CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE\"]);\nvar tabularOnelineClauses13 = expandPhrases([\n// - create:\n\"CREATE [RECURSIVE] VIEW\",\n// - update:\n\"UPDATE\", \"WHERE CURRENT OF\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE\",\n// - alter table:\n\"ALTER TABLE\", \"ADD COLUMN\", \"DROP [COLUMN]\", \"RENAME COLUMN\", \"RENAME TO\", \"ALTER [COLUMN]\", \"{SET | DROP} DEFAULT\",\n// for alter column\n\"ADD SCOPE\",\n// for alter column\n\"DROP SCOPE {CASCADE | RESTRICT}\",\n// for alter column\n\"RESTART WITH\",\n// for alter column\n// - truncate:\n\"TRUNCATE TABLE\",\n// other\n\"SET SCHEMA\"]);\nvar reservedSetOperations14 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT [ALL | DISTINCT]\", \"INTERSECT [ALL | DISTINCT]\"]);\nvar reservedJoins14 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\"]);\nvar reservedPhrases14 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\", \"{ROWS | RANGE} BETWEEN\"]);\nvar sql = {\n  name: \"sql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect14,\n    reservedClauses: [...reservedClauses14, ...standardOnelineClauses13, ...tabularOnelineClauses13],\n    reservedSetOperations: reservedSetOperations14,\n    reservedJoins: reservedJoins14,\n    reservedPhrases: reservedPhrases14,\n    reservedKeywords: keywords14,\n    reservedDataTypes: dataTypes14,\n    reservedFunctionNames: functions14,\n    stringTypes: [{\n      quote: \"''-qq-bs\",\n      prefixes: [\"N\", \"U&\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [`\"\"-qq`, \"``\"],\n    paramTypes: {\n      positional: true\n    },\n    operators: [\"||\"]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses13, ...tabularOnelineClauses13],\n    tabularOnelineClauses: tabularOnelineClauses13\n  }\n};\n\n// src/languages/trino/trino.functions.ts\nvar functions15 = [\n// https://github.com/trinodb/trino/tree/432d2897bdef99388c1a47188743a061c4ac1f34/docs/src/main/sphinx/functions\n// rg '^\\.\\. function::' ./docs/src/main/sphinx/functions | cut -d' ' -f 3 | cut -d '(' -f 1 | sort | uniq\n// rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep    '\\* :func:' | cut -d'`' -f 2\n// rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep -v '\\* :func:'\n// grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep  -e '^- :func:' | cut -d'`' -f2\n// grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep -ve '^- :func:'\n\"ABS\", \"ACOS\", \"ALL_MATCH\", \"ANY_MATCH\", \"APPROX_DISTINCT\", \"APPROX_MOST_FREQUENT\", \"APPROX_PERCENTILE\", \"APPROX_SET\", \"ARBITRARY\", \"ARRAYS_OVERLAP\", \"ARRAY_AGG\", \"ARRAY_DISTINCT\", \"ARRAY_EXCEPT\", \"ARRAY_INTERSECT\", \"ARRAY_JOIN\", \"ARRAY_MAX\", \"ARRAY_MIN\", \"ARRAY_POSITION\", \"ARRAY_REMOVE\", \"ARRAY_SORT\", \"ARRAY_UNION\", \"ASIN\", \"ATAN\", \"ATAN2\", \"AT_TIMEZONE\", \"AVG\", \"BAR\", \"BETA_CDF\", \"BING_TILE\", \"BING_TILES_AROUND\", \"BING_TILE_AT\", \"BING_TILE_COORDINATES\", \"BING_TILE_POLYGON\", \"BING_TILE_QUADKEY\", \"BING_TILE_ZOOM_LEVEL\", \"BITWISE_AND\", \"BITWISE_AND_AGG\", \"BITWISE_LEFT_SHIFT\", \"BITWISE_NOT\", \"BITWISE_OR\", \"BITWISE_OR_AGG\", \"BITWISE_RIGHT_SHIFT\", \"BITWISE_RIGHT_SHIFT_ARITHMETIC\", \"BITWISE_XOR\", \"BIT_COUNT\", \"BOOL_AND\", \"BOOL_OR\", \"CARDINALITY\", \"CAST\", \"CBRT\", \"CEIL\", \"CEILING\", \"CHAR2HEXINT\", \"CHECKSUM\", \"CHR\", \"CLASSIFY\", \"COALESCE\", \"CODEPOINT\", \"COLOR\", \"COMBINATIONS\", \"CONCAT\", \"CONCAT_WS\", \"CONTAINS\", \"CONTAINS_SEQUENCE\", \"CONVEX_HULL_AGG\", \"CORR\", \"COS\", \"COSH\", \"COSINE_SIMILARITY\", \"COUNT\", \"COUNT_IF\", \"COVAR_POP\", \"COVAR_SAMP\", \"CRC32\", \"CUME_DIST\", \"CURRENT_CATALOG\", \"CURRENT_DATE\", \"CURRENT_GROUPS\", \"CURRENT_SCHEMA\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"CURRENT_USER\", \"DATE\", \"DATE_ADD\", \"DATE_DIFF\", \"DATE_FORMAT\", \"DATE_PARSE\", \"DATE_TRUNC\", \"DAY\", \"DAY_OF_MONTH\", \"DAY_OF_WEEK\", \"DAY_OF_YEAR\", \"DEGREES\", \"DENSE_RANK\", \"DOW\", \"DOY\", \"E\", \"ELEMENT_AT\", \"EMPTY_APPROX_SET\", \"EVALUATE_CLASSIFIER_PREDICTIONS\", \"EVERY\", \"EXP\", \"EXTRACT\", \"FEATURES\", \"FILTER\", \"FIRST_VALUE\", \"FLATTEN\", \"FLOOR\", \"FORMAT\", \"FORMAT_DATETIME\", \"FORMAT_NUMBER\", \"FROM_BASE\", \"FROM_BASE32\", \"FROM_BASE64\", \"FROM_BASE64URL\", \"FROM_BIG_ENDIAN_32\", \"FROM_BIG_ENDIAN_64\", \"FROM_ENCODED_POLYLINE\", \"FROM_GEOJSON_GEOMETRY\", \"FROM_HEX\", \"FROM_IEEE754_32\", \"FROM_IEEE754_64\", \"FROM_ISO8601_DATE\", \"FROM_ISO8601_TIMESTAMP\", \"FROM_ISO8601_TIMESTAMP_NANOS\", \"FROM_UNIXTIME\", \"FROM_UNIXTIME_NANOS\", \"FROM_UTF8\", \"GEOMETRIC_MEAN\", \"GEOMETRY_FROM_HADOOP_SHAPE\", \"GEOMETRY_INVALID_REASON\", \"GEOMETRY_NEAREST_POINTS\", \"GEOMETRY_TO_BING_TILES\", \"GEOMETRY_UNION\", \"GEOMETRY_UNION_AGG\", \"GREATEST\", \"GREAT_CIRCLE_DISTANCE\", \"HAMMING_DISTANCE\", \"HASH_COUNTS\", \"HISTOGRAM\", \"HMAC_MD5\", \"HMAC_SHA1\", \"HMAC_SHA256\", \"HMAC_SHA512\", \"HOUR\", \"HUMAN_READABLE_SECONDS\", \"IF\", \"INDEX\", \"INFINITY\", \"INTERSECTION_CARDINALITY\", \"INVERSE_BETA_CDF\", \"INVERSE_NORMAL_CDF\", \"IS_FINITE\", \"IS_INFINITE\", \"IS_JSON_SCALAR\", \"IS_NAN\", \"JACCARD_INDEX\", \"JSON_ARRAY_CONTAINS\", \"JSON_ARRAY_GET\", \"JSON_ARRAY_LENGTH\", \"JSON_EXISTS\", \"JSON_EXTRACT\", \"JSON_EXTRACT_SCALAR\", \"JSON_FORMAT\", \"JSON_PARSE\", \"JSON_QUERY\", \"JSON_SIZE\", \"JSON_VALUE\", \"KURTOSIS\", \"LAG\", \"LAST_DAY_OF_MONTH\", \"LAST_VALUE\", \"LEAD\", \"LEARN_CLASSIFIER\", \"LEARN_LIBSVM_CLASSIFIER\", \"LEARN_LIBSVM_REGRESSOR\", \"LEARN_REGRESSOR\", \"LEAST\", \"LENGTH\", \"LEVENSHTEIN_DISTANCE\", \"LINE_INTERPOLATE_POINT\", \"LINE_INTERPOLATE_POINTS\", \"LINE_LOCATE_POINT\", \"LISTAGG\", \"LN\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOG\", \"LOG10\", \"LOG2\", \"LOWER\", \"LPAD\", \"LTRIM\", \"LUHN_CHECK\", \"MAKE_SET_DIGEST\", \"MAP\", \"MAP_AGG\", \"MAP_CONCAT\", \"MAP_ENTRIES\", \"MAP_FILTER\", \"MAP_FROM_ENTRIES\", \"MAP_KEYS\", \"MAP_UNION\", \"MAP_VALUES\", \"MAP_ZIP_WITH\", \"MAX\", \"MAX_BY\", \"MD5\", \"MERGE\", \"MERGE_SET_DIGEST\", \"MILLISECOND\", \"MIN\", \"MINUTE\", \"MIN_BY\", \"MOD\", \"MONTH\", \"MULTIMAP_AGG\", \"MULTIMAP_FROM_ENTRIES\", \"MURMUR3\", \"NAN\", \"NGRAMS\", \"NONE_MATCH\", \"NORMALIZE\", \"NORMAL_CDF\", \"NOW\", \"NTH_VALUE\", \"NTILE\", \"NULLIF\", \"NUMERIC_HISTOGRAM\", \"OBJECTID\", \"OBJECTID_TIMESTAMP\", \"PARSE_DATA_SIZE\", \"PARSE_DATETIME\", \"PARSE_DURATION\", \"PERCENT_RANK\", \"PI\", \"POSITION\", \"POW\", \"POWER\", \"QDIGEST_AGG\", \"QUARTER\", \"RADIANS\", \"RAND\", \"RANDOM\", \"RANK\", \"REDUCE\", \"REDUCE_AGG\", \"REGEXP_COUNT\", \"REGEXP_EXTRACT\", \"REGEXP_EXTRACT_ALL\", \"REGEXP_LIKE\", \"REGEXP_POSITION\", \"REGEXP_REPLACE\", \"REGEXP_SPLIT\", \"REGRESS\", \"REGR_INTERCEPT\", \"REGR_SLOPE\", \"RENDER\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RGB\", \"ROUND\", \"ROW_NUMBER\", \"RPAD\", \"RTRIM\", \"SECOND\", \"SEQUENCE\", \"SHA1\", \"SHA256\", \"SHA512\", \"SHUFFLE\", \"SIGN\", \"SIMPLIFY_GEOMETRY\", \"SIN\", \"SKEWNESS\", \"SLICE\", \"SOUNDEX\", \"SPATIAL_PARTITIONING\", \"SPATIAL_PARTITIONS\", \"SPLIT\", \"SPLIT_PART\", \"SPLIT_TO_MAP\", \"SPLIT_TO_MULTIMAP\", \"SPOOKY_HASH_V2_32\", \"SPOOKY_HASH_V2_64\", \"SQRT\", \"STARTS_WITH\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STRPOS\", \"ST_AREA\", \"ST_ASBINARY\", \"ST_ASTEXT\", \"ST_BOUNDARY\", \"ST_BUFFER\", \"ST_CENTROID\", \"ST_CONTAINS\", \"ST_CONVEXHULL\", \"ST_COORDDIM\", \"ST_CROSSES\", \"ST_DIFFERENCE\", \"ST_DIMENSION\", \"ST_DISJOINT\", \"ST_DISTANCE\", \"ST_ENDPOINT\", \"ST_ENVELOPE\", \"ST_ENVELOPEASPTS\", \"ST_EQUALS\", \"ST_EXTERIORRING\", \"ST_GEOMETRIES\", \"ST_GEOMETRYFROMTEXT\", \"ST_GEOMETRYN\", \"ST_GEOMETRYTYPE\", \"ST_GEOMFROMBINARY\", \"ST_INTERIORRINGN\", \"ST_INTERIORRINGS\", \"ST_INTERSECTION\", \"ST_INTERSECTS\", \"ST_ISCLOSED\", \"ST_ISEMPTY\", \"ST_ISRING\", \"ST_ISSIMPLE\", \"ST_ISVALID\", \"ST_LENGTH\", \"ST_LINEFROMTEXT\", \"ST_LINESTRING\", \"ST_MULTIPOINT\", \"ST_NUMGEOMETRIES\", \"ST_NUMINTERIORRING\", \"ST_NUMPOINTS\", \"ST_OVERLAPS\", \"ST_POINT\", \"ST_POINTN\", \"ST_POINTS\", \"ST_POLYGON\", \"ST_RELATE\", \"ST_STARTPOINT\", \"ST_SYMDIFFERENCE\", \"ST_TOUCHES\", \"ST_UNION\", \"ST_WITHIN\", \"ST_X\", \"ST_XMAX\", \"ST_XMIN\", \"ST_Y\", \"ST_YMAX\", \"ST_YMIN\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"TAN\", \"TANH\", \"TDIGEST_AGG\", \"TIMESTAMP_OBJECTID\", \"TIMEZONE_HOUR\", \"TIMEZONE_MINUTE\", \"TO_BASE\", \"TO_BASE32\", \"TO_BASE64\", \"TO_BASE64URL\", \"TO_BIG_ENDIAN_32\", \"TO_BIG_ENDIAN_64\", \"TO_CHAR\", \"TO_DATE\", \"TO_ENCODED_POLYLINE\", \"TO_GEOJSON_GEOMETRY\", \"TO_GEOMETRY\", \"TO_HEX\", \"TO_IEEE754_32\", \"TO_IEEE754_64\", \"TO_ISO8601\", \"TO_MILLISECONDS\", \"TO_SPHERICAL_GEOGRAPHY\", \"TO_TIMESTAMP\", \"TO_UNIXTIME\", \"TO_UTF8\", \"TRANSFORM\", \"TRANSFORM_KEYS\", \"TRANSFORM_VALUES\", \"TRANSLATE\", \"TRIM\", \"TRIM_ARRAY\", \"TRUNCATE\", \"TRY\", \"TRY_CAST\", \"TYPEOF\", \"UPPER\", \"URL_DECODE\", \"URL_ENCODE\", \"URL_EXTRACT_FRAGMENT\", \"URL_EXTRACT_HOST\", \"URL_EXTRACT_PARAMETER\", \"URL_EXTRACT_PATH\", \"URL_EXTRACT_PORT\", \"URL_EXTRACT_PROTOCOL\", \"URL_EXTRACT_QUERY\", \"UUID\", \"VALUES_AT_QUANTILES\", \"VALUE_AT_QUANTILE\", \"VARIANCE\", \"VAR_POP\", \"VAR_SAMP\", \"VERSION\", \"WEEK\", \"WEEK_OF_YEAR\", \"WIDTH_BUCKET\", \"WILSON_INTERVAL_LOWER\", \"WILSON_INTERVAL_UPPER\", \"WITH_TIMEZONE\", \"WORD_STEM\", \"XXHASH64\", \"YEAR\", \"YEAR_OF_WEEK\", \"YOW\", \"ZIP\", \"ZIP_WITH\",\n// https://trino.io/docs/current/sql/match-recognize.html#row-pattern-recognition-expressions\n\"CLASSIFIER\", \"FIRST\", \"LAST\", \"MATCH_NUMBER\", \"NEXT\", \"PERMUTE\", \"PREV\"];\n\n// src/languages/trino/trino.keywords.ts\nvar keywords15 = [\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L858-L1128\n\"ABSENT\", \"ADD\", \"ADMIN\", \"AFTER\", \"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"AT\", \"AUTHORIZATION\", \"BERNOULLI\", \"BETWEEN\", \"BOTH\", \"BY\", \"CALL\", \"CASCADE\", \"CASE\", \"CATALOGS\", \"COLUMN\", \"COLUMNS\", \"COMMENT\", \"COMMIT\", \"COMMITTED\", \"CONDITIONAL\", \"CONSTRAINT\", \"COPARTITION\", \"CREATE\", \"CROSS\", \"CUBE\", \"CURRENT\", \"CURRENT_PATH\", \"CURRENT_ROLE\", \"DATA\", \"DEALLOCATE\", \"DEFAULT\", \"DEFINE\", \"DEFINER\", \"DELETE\", \"DENY\", \"DESC\", \"DESCRIBE\", \"DESCRIPTOR\", \"DISTINCT\", \"DISTRIBUTED\", \"DOUBLE\", \"DROP\", \"ELSE\", \"EMPTY\", \"ENCODING\", \"END\", \"ERROR\", \"ESCAPE\", \"EXCEPT\", \"EXCLUDING\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\", \"FALSE\", \"FETCH\", \"FINAL\", \"FIRST\", \"FOLLOWING\", \"FOR\", \"FROM\", \"FULL\", \"FUNCTIONS\", \"GRANT\", \"GRANTED\", \"GRANTS\", \"GRAPHVIZ\", \"GROUP\", \"GROUPING\", \"GROUPS\", \"HAVING\", \"IGNORE\", \"IN\", \"INCLUDING\", \"INITIAL\", \"INNER\", \"INPUT\", \"INSERT\", \"INTERSECT\", \"INTERVAL\", \"INTO\", \"INVOKER\", \"IO\", \"IS\", \"ISOLATION\", \"JOIN\", \"JSON\", \"JSON_ARRAY\", \"JSON_OBJECT\", \"KEEP\", \"KEY\", \"KEYS\", \"LAST\", \"LATERAL\", \"LEADING\", \"LEFT\", \"LEVEL\", \"LIKE\", \"LIMIT\", \"LOCAL\", \"LOGICAL\", \"MATCH\", \"MATCHED\", \"MATCHES\", \"MATCH_RECOGNIZE\", \"MATERIALIZED\", \"MEASURES\", \"NATURAL\", \"NEXT\", \"NFC\", \"NFD\", \"NFKC\", \"NFKD\", \"NO\", \"NONE\", \"NOT\", \"NULL\", \"NULLS\", \"OBJECT\", \"OF\", \"OFFSET\", \"OMIT\", \"ON\", \"ONE\", \"ONLY\", \"OPTION\", \"OR\", \"ORDER\", \"ORDINALITY\", \"OUTER\", \"OUTPUT\", \"OVER\", \"OVERFLOW\", \"PARTITION\", \"PARTITIONS\", \"PASSING\", \"PAST\", \"PATH\", \"PATTERN\", \"PER\", \"PERMUTE\", \"PRECEDING\", \"PRECISION\", \"PREPARE\", \"PRIVILEGES\", \"PROPERTIES\", \"PRUNE\", \"QUOTES\", \"RANGE\", \"READ\", \"RECURSIVE\", \"REFRESH\", \"RENAME\", \"REPEATABLE\", \"RESET\", \"RESPECT\", \"RESTRICT\", \"RETURNING\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLES\", \"ROLLBACK\", \"ROLLUP\", \"ROW\", \"ROWS\", \"RUNNING\", \"SCALAR\", \"SCHEMA\", \"SCHEMAS\", \"SECURITY\", \"SEEK\", \"SELECT\", \"SERIALIZABLE\", \"SESSION\", \"SET\", \"SETS\", \"SHOW\", \"SKIP\", \"SOME\", \"START\", \"STATS\", \"STRING\", \"SUBSET\", \"SYSTEM\", \"TABLE\", \"TABLES\", \"TABLESAMPLE\", \"TEXT\", \"THEN\", \"TIES\", \"TIME\", \"TIMESTAMP\", \"TO\", \"TRAILING\", \"TRANSACTION\", \"TRUE\", \"TYPE\", \"UESCAPE\", \"UNBOUNDED\", \"UNCOMMITTED\", \"UNCONDITIONAL\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UNMATCHED\", \"UNNEST\", \"UPDATE\", \"USE\", \"USER\", \"USING\", \"UTF16\", \"UTF32\", \"UTF8\", \"VALIDATE\", \"VALUE\", \"VALUES\", \"VERBOSE\", \"VIEW\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\", \"WITHIN\", \"WITHOUT\", \"WORK\", \"WRAPPER\", \"WRITE\", \"ZONE\"];\nvar dataTypes15 = [\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-main/src/main/java/io/trino/metadata/TypeRegistry.java#L131-L168\n// or https://trino.io/docs/current/language/types.html\n\"BIGINT\", \"INT\", \"INTEGER\", \"SMALLINT\", \"TINYINT\", \"BOOLEAN\", \"DATE\", \"DECIMAL\", \"REAL\", \"DOUBLE\", \"HYPERLOGLOG\", \"QDIGEST\", \"TDIGEST\", \"P4HYPERLOGLOG\", \"INTERVAL\", \"TIMESTAMP\", \"TIME\", \"VARBINARY\", \"VARCHAR\", \"CHAR\", \"ROW\", \"ARRAY\", \"MAP\", \"JSON\", \"JSON2016\", \"IPADDRESS\", \"GEOMETRY\", \"UUID\", \"SETDIGEST\", \"JONIREGEXP\", \"RE2JREGEXP\", \"LIKEPATTERN\", \"COLOR\", \"CODEPOINTS\", \"FUNCTION\", \"JSONPATH\"];\n\n// src/languages/trino/trino.formatter.ts\nvar reservedSelect15 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses15 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY [ALL | DISTINCT]\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\", \"FETCH {FIRST | NEXT}\",\n// Data manipulation\n// - insert:\n\"INSERT INTO\", \"VALUES\",\n// - update:\n\"SET\",\n// MATCH_RECOGNIZE\n\"MATCH_RECOGNIZE\", \"MEASURES\", \"ONE ROW PER MATCH\", \"ALL ROWS PER MATCH\", \"AFTER MATCH\", \"PATTERN\", \"SUBSET\", \"DEFINE\"]);\nvar standardOnelineClauses14 = expandPhrases([\"CREATE TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses14 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [MATERIALIZED] VIEW\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE [IF EXISTS]\", \"ADD COLUMN [IF NOT EXISTS]\", \"DROP COLUMN [IF EXISTS]\", \"RENAME COLUMN [IF EXISTS]\", \"RENAME TO\", \"SET AUTHORIZATION [USER | ROLE]\", \"SET PROPERTIES\", \"EXECUTE\",\n// - truncate:\n\"TRUNCATE TABLE\",\n// other\n\"ALTER SCHEMA\", \"ALTER MATERIALIZED VIEW\", \"ALTER VIEW\", \"CREATE SCHEMA\", \"CREATE ROLE\", \"DROP SCHEMA\", \"DROP MATERIALIZED VIEW\", \"DROP VIEW\", \"DROP ROLE\",\n// Auxiliary\n\"EXPLAIN\", \"ANALYZE\", \"EXPLAIN ANALYZE\", \"EXPLAIN ANALYZE VERBOSE\", \"USE\", \"DESCRIBE INPUT\", \"DESCRIBE OUTPUT\", \"REFRESH MATERIALIZED VIEW\", \"RESET SESSION\", \"SET SESSION\", \"SET PATH\", \"SET TIME ZONE\", \"SHOW GRANTS\", \"SHOW CREATE TABLE\", \"SHOW CREATE SCHEMA\", \"SHOW CREATE VIEW\", \"SHOW CREATE MATERIALIZED VIEW\", \"SHOW TABLES\", \"SHOW SCHEMAS\", \"SHOW CATALOGS\", \"SHOW COLUMNS\", \"SHOW STATS FOR\", \"SHOW ROLES\", \"SHOW CURRENT ROLES\", \"SHOW ROLE GRANTS\", \"SHOW FUNCTIONS\", \"SHOW SESSION\"]);\nvar reservedSetOperations15 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT [ALL | DISTINCT]\", \"INTERSECT [ALL | DISTINCT]\"]);\nvar reservedJoins15 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL [INNER] JOIN\", \"NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN\"]);\nvar reservedPhrases15 = expandPhrases([\"{ROWS | RANGE | GROUPS} BETWEEN\",\n// comparison operator\n\"IS [NOT] DISTINCT FROM\"]);\nvar trino = {\n  name: \"trino\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect15,\n    reservedClauses: [...reservedClauses15, ...standardOnelineClauses14, ...tabularOnelineClauses14],\n    reservedSetOperations: reservedSetOperations15,\n    reservedJoins: reservedJoins15,\n    reservedPhrases: reservedPhrases15,\n    reservedKeywords: keywords15,\n    reservedDataTypes: dataTypes15,\n    reservedFunctionNames: functions15,\n    // Trino also supports {- ... -} parenthesis.\n    // The formatting of these currently works out as a result of { and -\n    // not getting a space added in-between.\n    // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-syntax\n    extraParens: [\"[]\", \"{}\"],\n    // https://trino.io/docs/current/language/types.html#string\n    // https://trino.io/docs/current/language/types.html#varbinary\n    stringTypes: [{\n      quote: \"''-qq\",\n      prefixes: [\"U&\"]\n    }, {\n      quote: \"''-raw\",\n      prefixes: [\"X\"],\n      requirePrefix: true\n    }],\n    // https://trino.io/docs/current/language/reserved.html\n    identTypes: ['\"\"-qq'],\n    paramTypes: {\n      positional: true\n    },\n    operators: [\"%\", \"->\", \"=>\", \":\", \"||\",\n    // Row pattern syntax\n    \"|\", \"^\", \"$\"\n    // '?', conflicts with positional placeholders\n    ]\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses14, ...tabularOnelineClauses14],\n    tabularOnelineClauses: tabularOnelineClauses14\n  }\n};\n\n// src/languages/transactsql/transactsql.functions.ts\nvar functions16 = [\n// https://docs.microsoft.com/en-us/sql/t-sql/functions/functions?view=sql-server-ver15\n// aggregate\n\"APPROX_COUNT_DISTINCT\", \"AVG\", \"CHECKSUM_AGG\", \"COUNT\", \"COUNT_BIG\", \"GROUPING\", \"GROUPING_ID\", \"MAX\", \"MIN\", \"STDEV\", \"STDEVP\", \"SUM\", \"VAR\", \"VARP\",\n// analytic\n\"CUME_DIST\", \"FIRST_VALUE\", \"LAG\", \"LAST_VALUE\", \"LEAD\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERCENT_RANK\", \"Collation - COLLATIONPROPERTY\", \"Collation - TERTIARY_WEIGHTS\",\n// configuration\n\"@@DBTS\", \"@@LANGID\", \"@@LANGUAGE\", \"@@LOCK_TIMEOUT\", \"@@MAX_CONNECTIONS\", \"@@MAX_PRECISION\", \"@@NESTLEVEL\", \"@@OPTIONS\", \"@@REMSERVER\", \"@@SERVERNAME\", \"@@SERVICENAME\", \"@@SPID\", \"@@TEXTSIZE\", \"@@VERSION\",\n// conversion\n\"CAST\", \"CONVERT\", \"PARSE\", \"TRY_CAST\", \"TRY_CONVERT\", \"TRY_PARSE\",\n// cryptographic\n\"ASYMKEY_ID\", \"ASYMKEYPROPERTY\", \"CERTPROPERTY\", \"CERT_ID\", \"CRYPT_GEN_RANDOM\", \"DECRYPTBYASYMKEY\", \"DECRYPTBYCERT\", \"DECRYPTBYKEY\", \"DECRYPTBYKEYAUTOASYMKEY\", \"DECRYPTBYKEYAUTOCERT\", \"DECRYPTBYPASSPHRASE\", \"ENCRYPTBYASYMKEY\", \"ENCRYPTBYCERT\", \"ENCRYPTBYKEY\", \"ENCRYPTBYPASSPHRASE\", \"HASHBYTES\", \"IS_OBJECTSIGNED\", \"KEY_GUID\", \"KEY_ID\", \"KEY_NAME\", \"SIGNBYASYMKEY\", \"SIGNBYCERT\", \"SYMKEYPROPERTY\", \"VERIFYSIGNEDBYCERT\", \"VERIFYSIGNEDBYASYMKEY\",\n// cursor\n\"@@CURSOR_ROWS\", \"@@FETCH_STATUS\", \"CURSOR_STATUS\",\n// dataType\n\"DATALENGTH\", \"IDENT_CURRENT\", \"IDENT_INCR\", \"IDENT_SEED\", \"IDENTITY\", \"SQL_VARIANT_PROPERTY\",\n// datetime\n\"@@DATEFIRST\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"CURRENT_TIMEZONE_ID\", \"DATEADD\", \"DATEDIFF\", \"DATEDIFF_BIG\", \"DATEFROMPARTS\", \"DATENAME\", \"DATEPART\", \"DATETIME2FROMPARTS\", \"DATETIMEFROMPARTS\", \"DATETIMEOFFSETFROMPARTS\", \"DAY\", \"EOMONTH\", \"GETDATE\", \"GETUTCDATE\", \"ISDATE\", \"MONTH\", \"SMALLDATETIMEFROMPARTS\", \"SWITCHOFFSET\", \"SYSDATETIME\", \"SYSDATETIMEOFFSET\", \"SYSUTCDATETIME\", \"TIMEFROMPARTS\", \"TODATETIMEOFFSET\", \"YEAR\", \"JSON\", \"ISJSON\", \"JSON_VALUE\", \"JSON_QUERY\", \"JSON_MODIFY\",\n// mathematical\n\"ABS\", \"ACOS\", \"ASIN\", \"ATAN\", \"ATN2\", \"CEILING\", \"COS\", \"COT\", \"DEGREES\", \"EXP\", \"FLOOR\", \"LOG\", \"LOG10\", \"PI\", \"POWER\", \"RADIANS\", \"RAND\", \"ROUND\", \"SIGN\", \"SIN\", \"SQRT\", \"SQUARE\", \"TAN\", \"CHOOSE\", \"GREATEST\", \"IIF\", \"LEAST\",\n// metadata\n\"@@PROCID\", \"APP_NAME\", \"APPLOCK_MODE\", \"APPLOCK_TEST\", \"ASSEMBLYPROPERTY\", \"COL_LENGTH\", \"COL_NAME\", \"COLUMNPROPERTY\", \"DATABASEPROPERTYEX\", \"DB_ID\", \"DB_NAME\", \"FILE_ID\", \"FILE_IDEX\", \"FILE_NAME\", \"FILEGROUP_ID\", \"FILEGROUP_NAME\", \"FILEGROUPPROPERTY\", \"FILEPROPERTY\", \"FILEPROPERTYEX\", \"FULLTEXTCATALOGPROPERTY\", \"FULLTEXTSERVICEPROPERTY\", \"INDEX_COL\", \"INDEXKEY_PROPERTY\", \"INDEXPROPERTY\", \"NEXT VALUE FOR\", \"OBJECT_DEFINITION\", \"OBJECT_ID\", \"OBJECT_NAME\", \"OBJECT_SCHEMA_NAME\", \"OBJECTPROPERTY\", \"OBJECTPROPERTYEX\", \"ORIGINAL_DB_NAME\", \"PARSENAME\", \"SCHEMA_ID\", \"SCHEMA_NAME\", \"SCOPE_IDENTITY\", \"SERVERPROPERTY\", \"STATS_DATE\", \"TYPE_ID\", \"TYPE_NAME\", \"TYPEPROPERTY\",\n// ranking\n\"DENSE_RANK\", \"NTILE\", \"RANK\", \"ROW_NUMBER\", \"PUBLISHINGSERVERNAME\",\n// security\n\"CERTENCODED\", \"CERTPRIVATEKEY\", \"CURRENT_USER\", \"DATABASE_PRINCIPAL_ID\", \"HAS_DBACCESS\", \"HAS_PERMS_BY_NAME\", \"IS_MEMBER\", \"IS_ROLEMEMBER\", \"IS_SRVROLEMEMBER\", \"LOGINPROPERTY\", \"ORIGINAL_LOGIN\", \"PERMISSIONS\", \"PWDENCRYPT\", \"PWDCOMPARE\", \"SESSION_USER\", \"SESSIONPROPERTY\", \"SUSER_ID\", \"SUSER_NAME\", \"SUSER_SID\", \"SUSER_SNAME\", \"SYSTEM_USER\", \"USER\", \"USER_ID\", \"USER_NAME\",\n// string\n\"ASCII\", \"CHARINDEX\", \"CONCAT\", \"CONCAT_WS\", \"DIFFERENCE\", \"FORMAT\", \"LEFT\", \"LEN\", \"LOWER\", \"LTRIM\", \"PATINDEX\", \"QUOTENAME\", \"REPLACE\", \"REPLICATE\", \"REVERSE\", \"RIGHT\", \"RTRIM\", \"SOUNDEX\", \"SPACE\", \"STR\", \"STRING_AGG\", \"STRING_ESCAPE\", \"STUFF\", \"SUBSTRING\", \"TRANSLATE\", \"TRIM\", \"UNICODE\", \"UPPER\",\n// system\n\"$PARTITION\", \"@@ERROR\", \"@@IDENTITY\", \"@@PACK_RECEIVED\", \"@@ROWCOUNT\", \"@@TRANCOUNT\", \"BINARY_CHECKSUM\", \"CHECKSUM\", \"COMPRESS\", \"CONNECTIONPROPERTY\", \"CONTEXT_INFO\", \"CURRENT_REQUEST_ID\", \"CURRENT_TRANSACTION_ID\", \"DECOMPRESS\", \"ERROR_LINE\", \"ERROR_MESSAGE\", \"ERROR_NUMBER\", \"ERROR_PROCEDURE\", \"ERROR_SEVERITY\", \"ERROR_STATE\", \"FORMATMESSAGE\", \"GET_FILESTREAM_TRANSACTION_CONTEXT\", \"GETANSINULL\", \"HOST_ID\", \"HOST_NAME\", \"ISNULL\", \"ISNUMERIC\", \"MIN_ACTIVE_ROWVERSION\", \"NEWID\", \"NEWSEQUENTIALID\", \"ROWCOUNT_BIG\", \"SESSION_CONTEXT\", \"XACT_STATE\",\n// statistical\n\"@@CONNECTIONS\", \"@@CPU_BUSY\", \"@@IDLE\", \"@@IO_BUSY\", \"@@PACK_SENT\", \"@@PACKET_ERRORS\", \"@@TIMETICKS\", \"@@TOTAL_ERRORS\", \"@@TOTAL_READ\", \"@@TOTAL_WRITE\", \"TEXTPTR\", \"TEXTVALID\",\n// trigger\n\"COLUMNS_UPDATED\", \"EVENTDATA\", \"TRIGGER_NESTLEVEL\", \"UPDATE\",\n// Shorthand functions to use in place of CASE expression\n\"COALESCE\", \"NULLIF\"];\n\n// src/languages/transactsql/transactsql.keywords.ts\nvar keywords16 = [\n// https://docs.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-ver15\n// standard\n\"ADD\", \"ALL\", \"ALTER\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"AUTHORIZATION\", \"BACKUP\", \"BEGIN\", \"BETWEEN\", \"BREAK\", \"BROWSE\", \"BULK\", \"BY\", \"CASCADE\", \"CHECK\", \"CHECKPOINT\", \"CLOSE\", \"CLUSTERED\", \"COALESCE\", \"COLLATE\", \"COLUMN\", \"COMMIT\", \"COMPUTE\", \"CONSTRAINT\", \"CONTAINS\", \"CONTAINSTABLE\", \"CONTINUE\", \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DATABASE\", \"DBCC\", \"DEALLOCATE\", \"DECLARE\", \"DEFAULT\", \"DELETE\", \"DENY\", \"DESC\", \"DISK\", \"DISTINCT\", \"DISTRIBUTED\", \"DROP\", \"DUMP\", \"ERRLVL\", \"ESCAPE\", \"EXEC\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXTERNAL\", \"FETCH\", \"FILE\", \"FILLFACTOR\", \"FOR\", \"FOREIGN\", \"FREETEXT\", \"FREETEXTTABLE\", \"FROM\", \"FULL\", \"FUNCTION\", \"GOTO\", \"GRANT\", \"GROUP\", \"HAVING\", \"HOLDLOCK\", \"IDENTITY\", \"IDENTITYCOL\", \"IDENTITY_INSERT\", \"IF\", \"IN\", \"INDEX\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"JOIN\", \"KEY\", \"KILL\", \"LEFT\", \"LIKE\", \"LINENO\", \"LOAD\", \"MERGE\", \"NOCHECK\", \"NONCLUSTERED\", \"NOT\", \"NULL\", \"NULLIF\", \"OF\", \"OFF\", \"OFFSETS\", \"ON\", \"OPEN\", \"OPENDATASOURCE\", \"OPENQUERY\", \"OPENROWSET\", \"OPENXML\", \"OPTION\", \"OR\", \"ORDER\", \"OUTER\", \"OVER\", \"PERCENT\", \"PIVOT\", \"PLAN\", \"PRIMARY\", \"PRINT\", \"PROC\", \"PROCEDURE\", \"PUBLIC\", \"RAISERROR\", \"READ\", \"READTEXT\", \"RECONFIGURE\", \"REFERENCES\", \"REPLICATION\", \"RESTORE\", \"RESTRICT\", \"RETURN\", \"REVERT\", \"REVOKE\", \"RIGHT\", \"ROLLBACK\", \"ROWCOUNT\", \"ROWGUIDCOL\", \"RULE\", \"SAVE\", \"SCHEMA\", \"SECURITYAUDIT\", \"SELECT\", \"SEMANTICKEYPHRASETABLE\", \"SEMANTICSIMILARITYDETAILSTABLE\", \"SEMANTICSIMILARITYTABLE\", \"SESSION_USER\", \"SET\", \"SETUSER\", \"SHUTDOWN\", \"SOME\", \"STATISTICS\", \"SYSTEM_USER\", \"TABLE\", \"TABLESAMPLE\", \"TEXTSIZE\", \"THEN\", \"TO\", \"TOP\", \"TRAN\", \"TRANSACTION\", \"TRIGGER\", \"TRUNCATE\", \"TRY_CONVERT\", \"TSEQUAL\", \"UNION\", \"UNIQUE\", \"UNPIVOT\", \"UPDATE\", \"UPDATETEXT\", \"USE\", \"USER\", \"VALUES\", \"VIEW\", \"WAITFOR\", \"WHERE\", \"WHILE\", \"WITH\", \"WITHIN GROUP\", \"WRITETEXT\",\n// https://learn.microsoft.com/en-us/sql/t-sql/queries/output-clause-transact-sql?view=sql-server-ver16#action\n\"$ACTION\"];\nvar dataTypes16 = [\n// https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver15\n\"BINARY\", \"BIT\", \"CHAR\", \"CHAR\", \"CHARACTER\", \"DATE\", \"DATETIME2\", \"DATETIMEOFFSET\", \"DEC\", \"DECIMAL\", \"DOUBLE\", \"FLOAT\", \"INT\", \"INTEGER\", \"NATIONAL\", \"NCHAR\", \"NUMERIC\", \"NVARCHAR\", \"PRECISION\", \"REAL\", \"SMALLINT\", \"TIME\", \"TIMESTAMP\", \"VARBINARY\", \"VARCHAR\"];\n\n// src/languages/transactsql/transactsql.formatter.ts\nvar reservedSelect16 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses16 = expandPhrases([\n// queries\n\"WITH\", \"INTO\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"WINDOW\", \"PARTITION BY\", \"ORDER BY\", \"OFFSET\", \"FETCH {FIRST | NEXT}\", \"FOR {BROWSE | XML | JSON}\", \"OPTION\",\n// Data manipulation\n// - insert:\n\"INSERT [INTO]\", \"VALUES\",\n// - update:\n\"SET\",\n// - merge:\n\"MERGE [INTO]\", \"WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]\", \"UPDATE SET\",\n// Data definition\n\"CREATE [OR ALTER] {PROC | PROCEDURE}\"]);\nvar standardOnelineClauses15 = expandPhrases([\"CREATE TABLE\"]);\nvar tabularOnelineClauses15 = expandPhrases([\n// - create:\n\"CREATE [OR ALTER] [MATERIALIZED] VIEW\",\n// - update:\n\"UPDATE\", \"WHERE CURRENT OF\",\n// - delete:\n\"DELETE [FROM]\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE\", \"ADD\", \"DROP COLUMN [IF EXISTS]\", \"ALTER COLUMN\",\n// - truncate:\n\"TRUNCATE TABLE\",\n// indexes\n\"CREATE [UNIQUE] [CLUSTERED] INDEX\",\n// other statements\n\"GO\",\n// https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15\n\"ADD SENSITIVITY CLASSIFICATION\", \"ADD SIGNATURE\", \"AGGREGATE\", \"ANSI_DEFAULTS\", \"ANSI_NULLS\", \"ANSI_NULL_DFLT_OFF\", \"ANSI_NULL_DFLT_ON\", \"ANSI_PADDING\", \"ANSI_WARNINGS\", \"APPLICATION ROLE\", \"ARITHABORT\", \"ARITHIGNORE\", \"ASSEMBLY\", \"ASYMMETRIC KEY\", \"AUTHORIZATION\", \"AVAILABILITY GROUP\", \"BACKUP\", \"BACKUP CERTIFICATE\", \"BACKUP MASTER KEY\", \"BACKUP SERVICE MASTER KEY\", \"BEGIN CONVERSATION TIMER\", \"BEGIN DIALOG CONVERSATION\", \"BROKER PRIORITY\", \"BULK INSERT\", \"CERTIFICATE\", \"CLOSE MASTER KEY\", \"CLOSE SYMMETRIC KEY\", \"COLLATE\", \"COLUMN ENCRYPTION KEY\", \"COLUMN MASTER KEY\", \"COLUMNSTORE INDEX\", \"CONCAT_NULL_YIELDS_NULL\", \"CONTEXT_INFO\", \"CONTRACT\", \"CREDENTIAL\", \"CRYPTOGRAPHIC PROVIDER\", \"CURSOR_CLOSE_ON_COMMIT\", \"DATABASE\", \"DATABASE AUDIT SPECIFICATION\", \"DATABASE ENCRYPTION KEY\", \"DATABASE HADR\", \"DATABASE SCOPED CONFIGURATION\", \"DATABASE SCOPED CREDENTIAL\", \"DATABASE SET\", \"DATEFIRST\", \"DATEFORMAT\", \"DEADLOCK_PRIORITY\", \"DENY\", \"DENY XML\", \"DISABLE TRIGGER\", \"ENABLE TRIGGER\", \"END CONVERSATION\", \"ENDPOINT\", \"EVENT NOTIFICATION\", \"EVENT SESSION\", \"EXECUTE AS\", \"EXTERNAL DATA SOURCE\", \"EXTERNAL FILE FORMAT\", \"EXTERNAL LANGUAGE\", \"EXTERNAL LIBRARY\", \"EXTERNAL RESOURCE POOL\", \"EXTERNAL TABLE\", \"FIPS_FLAGGER\", \"FMTONLY\", \"FORCEPLAN\", \"FULLTEXT CATALOG\", \"FULLTEXT INDEX\", \"FULLTEXT STOPLIST\", \"FUNCTION\", \"GET CONVERSATION GROUP\", \"GET_TRANSMISSION_STATUS\", \"GRANT\", \"GRANT XML\", \"IDENTITY_INSERT\", \"IMPLICIT_TRANSACTIONS\", \"INDEX\", \"LANGUAGE\", \"LOCK_TIMEOUT\", \"LOGIN\", \"MASTER KEY\", \"MESSAGE TYPE\", \"MOVE CONVERSATION\", \"NOCOUNT\", \"NOEXEC\", \"NUMERIC_ROUNDABORT\", \"OFFSETS\", \"OPEN MASTER KEY\", \"OPEN SYMMETRIC KEY\", \"PARSEONLY\", \"PARTITION FUNCTION\", \"PARTITION SCHEME\", \"PROCEDURE\", \"QUERY_GOVERNOR_COST_LIMIT\", \"QUEUE\", \"QUOTED_IDENTIFIER\", \"RECEIVE\", \"REMOTE SERVICE BINDING\", \"REMOTE_PROC_TRANSACTIONS\", \"RESOURCE GOVERNOR\", \"RESOURCE POOL\", \"RESTORE\", \"RESTORE FILELISTONLY\", \"RESTORE HEADERONLY\", \"RESTORE LABELONLY\", \"RESTORE MASTER KEY\", \"RESTORE REWINDONLY\", \"RESTORE SERVICE MASTER KEY\", \"RESTORE VERIFYONLY\", \"REVERT\", \"REVOKE\", \"REVOKE XML\", \"ROLE\", \"ROUTE\", \"ROWCOUNT\", \"RULE\", \"SCHEMA\", \"SEARCH PROPERTY LIST\", \"SECURITY POLICY\", \"SELECTIVE XML INDEX\", \"SEND\", \"SENSITIVITY CLASSIFICATION\", \"SEQUENCE\", \"SERVER AUDIT\", \"SERVER AUDIT SPECIFICATION\", \"SERVER CONFIGURATION\", \"SERVER ROLE\", \"SERVICE\", \"SERVICE MASTER KEY\", \"SETUSER\", \"SHOWPLAN_ALL\", \"SHOWPLAN_TEXT\", \"SHOWPLAN_XML\", \"SIGNATURE\", \"SPATIAL INDEX\", \"STATISTICS\", \"STATISTICS IO\", \"STATISTICS PROFILE\", \"STATISTICS TIME\", \"STATISTICS XML\", \"SYMMETRIC KEY\", \"SYNONYM\", \"TABLE\", \"TABLE IDENTITY\", \"TEXTSIZE\", \"TRANSACTION ISOLATION LEVEL\", \"TRIGGER\", \"TYPE\", \"UPDATE STATISTICS\", \"USER\", \"WORKLOAD GROUP\", \"XACT_ABORT\", \"XML INDEX\", \"XML SCHEMA COLLECTION\"]);\nvar reservedSetOperations16 = expandPhrases([\"UNION [ALL]\", \"EXCEPT\", \"INTERSECT\"]);\nvar reservedJoins16 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\",\n// non-standard joins\n\"{CROSS | OUTER} APPLY\"]);\nvar reservedPhrases16 = expandPhrases([\"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\", \"{ROWS | RANGE} BETWEEN\"]);\nvar transactsql = {\n  name: \"transactsql\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect16,\n    reservedClauses: [...reservedClauses16, ...standardOnelineClauses15, ...tabularOnelineClauses15],\n    reservedSetOperations: reservedSetOperations16,\n    reservedJoins: reservedJoins16,\n    reservedPhrases: reservedPhrases16,\n    reservedKeywords: keywords16,\n    reservedDataTypes: dataTypes16,\n    reservedFunctionNames: functions16,\n    nestedBlockComments: true,\n    stringTypes: [{\n      quote: \"''-qq\",\n      prefixes: [\"N\"]\n    }],\n    identTypes: [`\"\"-qq`, \"[]\"],\n    identChars: {\n      first: \"#@\",\n      rest: \"#@$\"\n    },\n    paramTypes: {\n      named: [\"@\"],\n      quoted: [\"@\"]\n    },\n    operators: [\"%\", \"&\", \"|\", \"^\", \"~\", \"!<\", \"!>\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"|=\", \"&=\", \"^=\", \"::\", \":\"],\n    propertyAccessOperators: [\"..\"]\n    // TODO: Support for money constants\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"::\"],\n    onelineClauses: [...standardOnelineClauses15, ...tabularOnelineClauses15],\n    tabularOnelineClauses: tabularOnelineClauses15\n  }\n};\n\n// src/languages/singlestoredb/singlestoredb.keywords.ts\nvar keywords17 = [\n// List of all keywords taken from:\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/restricted-keywords/list-of-restricted-keywords.html\n// Then filtered down to reserved keywords by running\n// > SELECT * AS <keyword>;\n// for each keyword in that list and observing which of these produce an error.\n\"ADD\", \"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"AS\", \"ASC\", \"ASENSITIVE\", \"BEFORE\", \"BETWEEN\", \"_BINARY\", \"BOTH\", \"BY\", \"CALL\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"CONDITION\", \"CONSTRAINT\", \"CONTINUE\", \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DATABASE\", \"DATABASES\", \"DAY_HOUR\", \"DAY_MICROSECOND\", \"DAY_MINUTE\", \"DAY_SECOND\", \"DECLARE\", \"DEFAULT\", \"DELAYED\", \"DELETE\", \"DESC\", \"DESCRIBE\", \"DETERMINISTIC\", \"DISTINCT\", \"DISTINCTROW\", \"DIV\", \"DROP\", \"DUAL\", \"EACH\", \"ELSE\", \"ELSEIF\", \"ENCLOSED\", \"ESCAPED\", \"EXCEPT\", \"EXISTS\", \"EXIT\", \"EXPLAIN\", \"EXTRA_JOIN\", \"FALSE\", \"FETCH\", \"FOR\", \"FORCE\", \"FORCE_COMPILED_MODE\", \"FORCE_INTERPRETER_MODE\", \"FOREIGN\", \"FROM\", \"FULL\", \"FULLTEXT\", \"GRANT\", \"GROUP\", \"HAVING\", \"HEARTBEAT_NO_LOGGING\", \"HIGH_PRIORITY\", \"HOUR_MICROSECOND\", \"HOUR_MINUTE\", \"HOUR_SECOND\", \"IF\", \"IGNORE\", \"IN\", \"INDEX\", \"INFILE\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"IN\", \"_INTERNAL_DYNAMIC_TYPECAST\", \"INTERSECT\", \"INTERVAL\", \"INTO\", \"ITERATE\", \"JOIN\", \"KEY\", \"KEYS\", \"KILL\", \"LEADING\", \"LEAVE\", \"LEFT\", \"LIKE\", \"LIMIT\", \"LINES\", \"LOAD\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCK\", \"LOOP\", \"LOW_PRIORITY\", \"MATCH\", \"MAXVALUE\", \"MINUS\", \"MINUTE_MICROSECOND\", \"MINUTE_SECOND\", \"MOD\", \"MODIFIES\", \"NATURAL\", \"NO_QUERY_REWRITE\", \"NOT\", \"NO_WRITE_TO_BINLOG\", \"NO_QUERY_REWRITE\", \"NULL\", \"ON\", \"OPTIMIZE\", \"OPTION\", \"OPTIONALLY\", \"OR\", \"ORDER\", \"OUT\", \"OUTER\", \"OUTFILE\", \"OVER\", \"PRIMARY\", \"PROCEDURE\", \"PURGE\", \"RANGE\", \"READ\", \"READS\", \"REFERENCES\", \"REGEXP\", \"RELEASE\", \"RENAME\", \"REPEAT\", \"REPLACE\", \"REQUIRE\", \"RESTRICT\", \"RETURN\", \"REVOKE\", \"RIGHT\", \"RIGHT_ANTI_JOIN\", \"RIGHT_SEMI_JOIN\", \"RIGHT_STRAIGHT_JOIN\", \"RLIKE\", \"SCHEMA\", \"SCHEMAS\", \"SECOND_MICROSECOND\", \"SELECT\", \"SEMI_JOIN\", \"SENSITIVE\", \"SEPARATOR\", \"SET\", \"SHOW\", \"SIGNAL\", \"SPATIAL\", \"SPECIFIC\", \"SQL\", \"SQL_BIG_RESULT\", \"SQL_BUFFER_RESULT\", \"SQL_CACHE\", \"SQL_CALC_FOUND_ROWS\", \"SQLEXCEPTION\", \"SQL_NO_CACHE\", \"SQL_NO_LOGGING\", \"SQL_SMALL_RESULT\", \"SQLSTATE\", \"SQLWARNING\", \"STRAIGHT_JOIN\", \"TABLE\", \"TERMINATED\", \"THEN\", \"TO\", \"TRAILING\", \"TRIGGER\", \"TRUE\", \"UNBOUNDED\", \"UNDO\", \"UNION\", \"UNIQUE\", \"UNLOCK\", \"UPDATE\", \"USAGE\", \"USE\", \"USING\", \"UTC_DATE\", \"UTC_TIME\", \"UTC_TIMESTAMP\", \"_UTF8\", \"VALUES\", \"WHEN\", \"WHERE\", \"WHILE\", \"WINDOW\", \"WITH\", \"WITHIN\", \"WRITE\", \"XOR\", \"YEAR_MONTH\", \"ZEROFILL\"];\nvar dataTypes17 = [\n// https://docs.singlestore.com/cloud/reference/sql-reference/data-types/\n\"BIGINT\", \"BINARY\", \"BIT\", \"BLOB\", \"CHAR\", \"CHARACTER\", \"DATETIME\", \"DEC\", \"DECIMAL\", \"DOUBLE PRECISION\", \"DOUBLE\", \"ENUM\", \"FIXED\", \"FLOAT\", \"FLOAT4\", \"FLOAT8\", \"INT\", \"INT1\", \"INT2\", \"INT3\", \"INT4\", \"INT8\", \"INTEGER\", \"LONG\", \"LONGBLOB\", \"LONGTEXT\", \"MEDIUMBLOB\", \"MEDIUMINT\", \"MEDIUMTEXT\", \"MIDDLEINT\", \"NATIONAL CHAR\", \"NATIONAL VARCHAR\", \"NUMERIC\", \"PRECISION\", \"REAL\", \"SMALLINT\", \"TEXT\", \"TIME\", \"TIMESTAMP\", \"TINYBLOB\", \"TINYINT\", \"TINYTEXT\", \"UNSIGNED\", \"VARBINARY\", \"VARCHAR\", \"VARCHARACTER\", \"YEAR\"];\n\n// src/languages/singlestoredb/singlestoredb.functions.ts\nvar functions17 = [\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/vector-functions/vector-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/window-functions/window-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/string-functions/string-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/conditional-functions/conditional-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/numeric-functions/numeric-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/geospatial-functions/geospatial-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/json-functions/json-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/information-functions/information-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/aggregate-functions/aggregate-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/time-series-functions/time-series-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/identifier-generation-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/date-and-time-functions/date-and-time-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/distinct-count-estimation-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/full-text-search-functions/full-text-search-functions.html\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference/regular-expression-functions.html\n\"ABS\", \"ACOS\", \"ADDDATE\", \"ADDTIME\", \"AES_DECRYPT\", \"AES_ENCRYPT\", \"ANY_VALUE\", \"APPROX_COUNT_DISTINCT\", \"APPROX_COUNT_DISTINCT_ACCUMULATE\", \"APPROX_COUNT_DISTINCT_COMBINE\", \"APPROX_COUNT_DISTINCT_ESTIMATE\", \"APPROX_GEOGRAPHY_INTERSECTS\", \"APPROX_PERCENTILE\", \"ASCII\", \"ASIN\", \"ATAN\", \"ATAN2\", \"AVG\", \"BIN\", \"BINARY\", \"BIT_AND\", \"BIT_COUNT\", \"BIT_OR\", \"BIT_XOR\", \"CAST\", \"CEIL\", \"CEILING\", \"CHAR\", \"CHARACTER_LENGTH\", \"CHAR_LENGTH\", \"CHARSET\", \"COALESCE\", \"COERCIBILITY\", \"COLLATION\", \"COLLECT\", \"CONCAT\", \"CONCAT_WS\", \"CONNECTION_ID\", \"CONV\", \"CONVERT\", \"CONVERT_TZ\", \"COS\", \"COT\", \"COUNT\", \"CUME_DIST\", \"CURDATE\", \"CURRENT_DATE\", \"CURRENT_ROLE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURTIME\", \"DATABASE\", \"DATE\", \"DATE_ADD\", \"DATEDIFF\", \"DATE_FORMAT\", \"DATE_SUB\", \"DATE_TRUNC\", \"DAY\", \"DAYNAME\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFYEAR\", \"DECODE\", \"DEFAULT\", \"DEGREES\", \"DENSE_RANK\", \"DIV\", \"DOT_PRODUCT\", \"ELT\", \"EUCLIDEAN_DISTANCE\", \"EXP\", \"EXTRACT\", \"FIELD\", \"FIRST\", \"FIRST_VALUE\", \"FLOOR\", \"FORMAT\", \"FOUND_ROWS\", \"FROM_BASE64\", \"FROM_DAYS\", \"FROM_UNIXTIME\", \"GEOGRAPHY_AREA\", \"GEOGRAPHY_CONTAINS\", \"GEOGRAPHY_DISTANCE\", \"GEOGRAPHY_INTERSECTS\", \"GEOGRAPHY_LATITUDE\", \"GEOGRAPHY_LENGTH\", \"GEOGRAPHY_LONGITUDE\", \"GEOGRAPHY_POINT\", \"GEOGRAPHY_WITHIN_DISTANCE\", \"GEOMETRY_AREA\", \"GEOMETRY_CONTAINS\", \"GEOMETRY_DISTANCE\", \"GEOMETRY_FILTER\", \"GEOMETRY_INTERSECTS\", \"GEOMETRY_LENGTH\", \"GEOMETRY_POINT\", \"GEOMETRY_WITHIN_DISTANCE\", \"GEOMETRY_X\", \"GEOMETRY_Y\", \"GREATEST\", \"GROUPING\", \"GROUP_CONCAT\", \"HEX\", \"HIGHLIGHT\", \"HOUR\", \"ICU_VERSION\", \"IF\", \"IFNULL\", \"INET_ATON\", \"INET_NTOA\", \"INET6_ATON\", \"INET6_NTOA\", \"INITCAP\", \"INSERT\", \"INSTR\", \"INTERVAL\", \"IS\", \"IS NULL\", \"JSON_AGG\", \"JSON_ARRAY_CONTAINS_DOUBLE\", \"JSON_ARRAY_CONTAINS_JSON\", \"JSON_ARRAY_CONTAINS_STRING\", \"JSON_ARRAY_PUSH_DOUBLE\", \"JSON_ARRAY_PUSH_JSON\", \"JSON_ARRAY_PUSH_STRING\", \"JSON_DELETE_KEY\", \"JSON_EXTRACT_DOUBLE\", \"JSON_EXTRACT_JSON\", \"JSON_EXTRACT_STRING\", \"JSON_EXTRACT_BIGINT\", \"JSON_GET_TYPE\", \"JSON_LENGTH\", \"JSON_SET_DOUBLE\", \"JSON_SET_JSON\", \"JSON_SET_STRING\", \"JSON_SPLICE_DOUBLE\", \"JSON_SPLICE_JSON\", \"JSON_SPLICE_STRING\", \"LAG\", \"LAST_DAY\", \"LAST_VALUE\", \"LCASE\", \"LEAD\", \"LEAST\", \"LEFT\", \"LENGTH\", \"LIKE\", \"LN\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATE\", \"LOG\", \"LOG10\", \"LOG2\", \"LPAD\", \"LTRIM\", \"MATCH\", \"MAX\", \"MD5\", \"MEDIAN\", \"MICROSECOND\", \"MIN\", \"MINUTE\", \"MOD\", \"MONTH\", \"MONTHNAME\", \"MONTHS_BETWEEN\", \"NOT\", \"NOW\", \"NTH_VALUE\", \"NTILE\", \"NULLIF\", \"OCTET_LENGTH\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PI\", \"PIVOT\", \"POSITION\", \"POW\", \"POWER\", \"QUARTER\", \"QUOTE\", \"RADIANS\", \"RAND\", \"RANK\", \"REGEXP\", \"REPEAT\", \"REPLACE\", \"REVERSE\", \"RIGHT\", \"RLIKE\", \"ROUND\", \"ROW_COUNT\", \"ROW_NUMBER\", \"RPAD\", \"RTRIM\", \"SCALAR\", \"SCHEMA\", \"SEC_TO_TIME\", \"SHA1\", \"SHA2\", \"SIGMOID\", \"SIGN\", \"SIN\", \"SLEEP\", \"SPLIT\", \"SOUNDEX\", \"SOUNDS LIKE\", \"SOURCE_POS_WAIT\", \"SPACE\", \"SQRT\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STR_TO_DATE\", \"SUBDATE\", \"SUBSTR\", \"SUBSTRING\", \"SUBSTRING_INDEX\", \"SUM\", \"SYS_GUID\", \"TAN\", \"TIME\", \"TIMEDIFF\", \"TIME_BUCKET\", \"TIME_FORMAT\", \"TIMESTAMP\", \"TIMESTAMPADD\", \"TIMESTAMPDIFF\", \"TIME_TO_SEC\", \"TO_BASE64\", \"TO_CHAR\", \"TO_DAYS\", \"TO_JSON\", \"TO_NUMBER\", \"TO_SECONDS\", \"TO_TIMESTAMP\", \"TRIM\", \"TRUNC\", \"TRUNCATE\", \"UCASE\", \"UNHEX\", \"UNIX_TIMESTAMP\", \"UPDATEXML\", \"UPPER\",\n// 'USER',\n\"UTC_DATE\", \"UTC_TIME\", \"UTC_TIMESTAMP\", \"UUID\", \"VALUES\", \"VARIANCE\", \"VAR_POP\", \"VAR_SAMP\", \"VECTOR_SUB\", \"VERSION\", \"WEEK\", \"WEEKDAY\", \"WEEKOFYEAR\", \"YEAR\"];\n\n// src/languages/singlestoredb/singlestoredb.formatter.ts\nvar reservedSelect17 = expandPhrases([\"SELECT [ALL | DISTINCT | DISTINCTROW]\"]);\nvar reservedClauses17 = expandPhrases([\n// queries\n\"WITH\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER BY\", \"LIMIT\", \"OFFSET\",\n// Data manipulation\n// - insert:\n\"INSERT [IGNORE] [INTO]\", \"VALUES\", \"REPLACE [INTO]\", \"ON DUPLICATE KEY UPDATE\",\n// - update:\n\"SET\",\n// Data definition\n\"CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]\", \"CREATE [OR REPLACE] [EXTERNAL] FUNCTION\"]);\nvar standardOnelineClauses16 = expandPhrases([\"CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses16 = expandPhrases([\n// - create:\n\"CREATE VIEW\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE [FROM]\",\n// - drop table:\n\"DROP [TEMPORARY] TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER [ONLINE] TABLE\", \"ADD [COLUMN]\", \"ADD [UNIQUE] {INDEX | KEY}\", \"DROP [COLUMN]\", \"MODIFY [COLUMN]\", \"CHANGE\", \"RENAME [TO | AS]\",\n// - truncate:\n\"TRUNCATE [TABLE]\",\n// https://docs.singlestore.com/managed-service/en/reference/sql-reference.html\n\"ADD AGGREGATOR\", \"ADD LEAF\", \"AGGREGATOR SET AS MASTER\", \"ALTER DATABASE\", \"ALTER PIPELINE\", \"ALTER RESOURCE POOL\", \"ALTER USER\", \"ALTER VIEW\", \"ANALYZE TABLE\", \"ATTACH DATABASE\", \"ATTACH LEAF\", \"ATTACH LEAF ALL\", \"BACKUP DATABASE\", \"BINLOG\", \"BOOTSTRAP AGGREGATOR\", \"CACHE INDEX\", \"CALL\", \"CHANGE\", \"CHANGE MASTER TO\", \"CHANGE REPLICATION FILTER\", \"CHANGE REPLICATION SOURCE TO\", \"CHECK BLOB CHECKSUM\", \"CHECK TABLE\", \"CHECKSUM TABLE\", \"CLEAR ORPHAN DATABASES\", \"CLONE\", \"COMMIT\", \"CREATE DATABASE\", \"CREATE GROUP\", \"CREATE INDEX\", \"CREATE LINK\", \"CREATE MILESTONE\", \"CREATE PIPELINE\", \"CREATE RESOURCE POOL\", \"CREATE ROLE\", \"CREATE USER\", \"DEALLOCATE PREPARE\", \"DESCRIBE\", \"DETACH DATABASE\", \"DETACH PIPELINE\", \"DROP DATABASE\", \"DROP FUNCTION\", \"DROP INDEX\", \"DROP LINK\", \"DROP PIPELINE\", \"DROP PROCEDURE\", \"DROP RESOURCE POOL\", \"DROP ROLE\", \"DROP USER\", \"DROP VIEW\", \"EXECUTE\", \"EXPLAIN\", \"FLUSH\", \"FORCE\", \"GRANT\", \"HANDLER\", \"HELP\", \"KILL CONNECTION\", \"KILLALL QUERIES\", \"LOAD DATA\", \"LOAD INDEX INTO CACHE\", \"LOAD XML\", \"LOCK INSTANCE FOR BACKUP\", \"LOCK TABLES\", \"MASTER_POS_WAIT\", \"OPTIMIZE TABLE\", \"PREPARE\", \"PURGE BINARY LOGS\", \"REBALANCE PARTITIONS\", \"RELEASE SAVEPOINT\", \"REMOVE AGGREGATOR\", \"REMOVE LEAF\", \"REPAIR TABLE\", \"REPLACE\", \"REPLICATE DATABASE\", \"RESET\", \"RESET MASTER\", \"RESET PERSIST\", \"RESET REPLICA\", \"RESET SLAVE\", \"RESTART\", \"RESTORE DATABASE\", \"RESTORE REDUNDANCY\", \"REVOKE\", \"ROLLBACK\", \"ROLLBACK TO SAVEPOINT\", \"SAVEPOINT\", \"SET CHARACTER SET\", \"SET DEFAULT ROLE\", \"SET NAMES\", \"SET PASSWORD\", \"SET RESOURCE GROUP\", \"SET ROLE\", \"SET TRANSACTION\", \"SHOW\", \"SHOW CHARACTER SET\", \"SHOW COLLATION\", \"SHOW COLUMNS\", \"SHOW CREATE DATABASE\", \"SHOW CREATE FUNCTION\", \"SHOW CREATE PIPELINE\", \"SHOW CREATE PROCEDURE\", \"SHOW CREATE TABLE\", \"SHOW CREATE USER\", \"SHOW CREATE VIEW\", \"SHOW DATABASES\", \"SHOW ENGINE\", \"SHOW ENGINES\", \"SHOW ERRORS\", \"SHOW FUNCTION CODE\", \"SHOW FUNCTION STATUS\", \"SHOW GRANTS\", \"SHOW INDEX\", \"SHOW MASTER STATUS\", \"SHOW OPEN TABLES\", \"SHOW PLUGINS\", \"SHOW PRIVILEGES\", \"SHOW PROCEDURE CODE\", \"SHOW PROCEDURE STATUS\", \"SHOW PROCESSLIST\", \"SHOW PROFILE\", \"SHOW PROFILES\", \"SHOW RELAYLOG EVENTS\", \"SHOW REPLICA STATUS\", \"SHOW REPLICAS\", \"SHOW SLAVE\", \"SHOW SLAVE HOSTS\", \"SHOW STATUS\", \"SHOW TABLE STATUS\", \"SHOW TABLES\", \"SHOW VARIABLES\", \"SHOW WARNINGS\", \"SHUTDOWN\", \"SNAPSHOT DATABASE\", \"SOURCE_POS_WAIT\", \"START GROUP_REPLICATION\", \"START PIPELINE\", \"START REPLICA\", \"START SLAVE\", \"START TRANSACTION\", \"STOP GROUP_REPLICATION\", \"STOP PIPELINE\", \"STOP REPLICA\", \"STOP REPLICATING\", \"STOP SLAVE\", \"TEST PIPELINE\", \"UNLOCK INSTANCE\", \"UNLOCK TABLES\", \"USE\", \"XA\",\n// flow control\n\"ITERATE\", \"LEAVE\", \"LOOP\", \"REPEAT\", \"RETURN\", \"WHILE\"]);\nvar reservedSetOperations17 = expandPhrases([\"UNION [ALL | DISTINCT]\", \"EXCEPT\", \"INTERSECT\", \"MINUS\"]);\nvar reservedJoins17 = expandPhrases([\"JOIN\", \"{LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{INNER | CROSS} JOIN\", \"NATURAL {LEFT | RIGHT} [OUTER] JOIN\",\n// non-standard joins\n\"STRAIGHT_JOIN\"]);\nvar reservedPhrases17 = expandPhrases([\"ON DELETE\", \"ON UPDATE\", \"CHARACTER SET\", \"{ROWS | RANGE} BETWEEN\", \"IDENTIFIED BY\"]);\nvar singlestoredb = {\n  name: \"singlestoredb\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect17,\n    reservedClauses: [...reservedClauses17, ...standardOnelineClauses16, ...tabularOnelineClauses16],\n    reservedSetOperations: reservedSetOperations17,\n    reservedJoins: reservedJoins17,\n    reservedPhrases: reservedPhrases17,\n    reservedKeywords: keywords17,\n    reservedDataTypes: dataTypes17,\n    reservedFunctionNames: functions17,\n    // TODO: support _binary\"some string\" prefix\n    stringTypes: ['\"\"-qq-bs', \"''-qq-bs\", {\n      quote: \"''-raw\",\n      prefixes: [\"B\", \"X\"],\n      requirePrefix: true\n    }],\n    identTypes: [\"``\"],\n    identChars: {\n      first: \"$\",\n      rest: \"$\",\n      allowFirstCharNumber: true\n    },\n    variableTypes: [{\n      regex: \"@@?[A-Za-z0-9_$]+\"\n    }, {\n      quote: \"``\",\n      prefixes: [\"@\"],\n      requirePrefix: true\n    }],\n    lineCommentTypes: [\"--\", \"#\"],\n    operators: [\":=\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"<=>\", \"&&\", \"||\", \"::\", \"::$\", \"::%\", \":>\", \"!:>\", \"*.*\"\n    // Not actually an operator\n    ],\n    postProcess: postProcess2\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"::\", \"::$\", \"::%\"],\n    onelineClauses: [...standardOnelineClauses16, ...tabularOnelineClauses16],\n    tabularOnelineClauses: tabularOnelineClauses16\n  }\n};\n\n// src/languages/snowflake/snowflake.functions.ts\nvar functions18 = [\n// https://docs.snowflake.com/en/sql-reference-functions.html\n//\n// https://docs.snowflake.com/en/sql-reference/functions-all.html\n// 1. run in console on this page: $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue)\n// 2. split all lines that contain ',' or '/' into multiple lines\n// 3. remove all '— Deprecated' parts from the strings\n// 4. delete all strings that end with '<object_type>', they are already covered in the list\n// 5. remove all strings that contain '[', they are operators not functions\n// 6. fix all values that contain '*'\n// 7. delete operatos ':', '::', '||'\n//\n// Steps 1-5 can be combined by the following script in the developer console:\n// $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue) // Step 1\n//   .map(x => x.split(x.includes(',') ? ',' : '/')).flat().map(x => x.trim()) // Step 2\n//   .map(x => x.replace('— Deprecated', '')) // Step 3\n//   .filter(x => !x.endsWith('<object_type>')) // Step 4\n//   .filter(x => !x.includes('[')) // Step 5\n\"ABS\", \"ACOS\", \"ACOSH\", \"ADD_MONTHS\", \"ALL_USER_NAMES\", \"ANY_VALUE\", \"APPROX_COUNT_DISTINCT\", \"APPROX_PERCENTILE\", \"APPROX_PERCENTILE_ACCUMULATE\", \"APPROX_PERCENTILE_COMBINE\", \"APPROX_PERCENTILE_ESTIMATE\", \"APPROX_TOP_K\", \"APPROX_TOP_K_ACCUMULATE\", \"APPROX_TOP_K_COMBINE\", \"APPROX_TOP_K_ESTIMATE\", \"APPROXIMATE_JACCARD_INDEX\", \"APPROXIMATE_SIMILARITY\", \"ARRAY_AGG\", \"ARRAY_APPEND\", \"ARRAY_CAT\", \"ARRAY_COMPACT\", \"ARRAY_CONSTRUCT\", \"ARRAY_CONSTRUCT_COMPACT\", \"ARRAY_CONTAINS\", \"ARRAY_INSERT\", \"ARRAY_INTERSECTION\", \"ARRAY_POSITION\", \"ARRAY_PREPEND\", \"ARRAY_SIZE\", \"ARRAY_SLICE\", \"ARRAY_TO_STRING\", \"ARRAY_UNION_AGG\", \"ARRAY_UNIQUE_AGG\", \"ARRAYS_OVERLAP\", \"AS_ARRAY\", \"AS_BINARY\", \"AS_BOOLEAN\", \"AS_CHAR\", \"AS_VARCHAR\", \"AS_DATE\", \"AS_DECIMAL\", \"AS_NUMBER\", \"AS_DOUBLE\", \"AS_REAL\", \"AS_INTEGER\", \"AS_OBJECT\", \"AS_TIME\", \"AS_TIMESTAMP_LTZ\", \"AS_TIMESTAMP_NTZ\", \"AS_TIMESTAMP_TZ\", \"ASCII\", \"ASIN\", \"ASINH\", \"ATAN\", \"ATAN2\", \"ATANH\", \"AUTO_REFRESH_REGISTRATION_HISTORY\", \"AUTOMATIC_CLUSTERING_HISTORY\", \"AVG\", \"BASE64_DECODE_BINARY\", \"BASE64_DECODE_STRING\", \"BASE64_ENCODE\", \"BIT_LENGTH\", \"BITAND\", \"BITAND_AGG\", \"BITMAP_BIT_POSITION\", \"BITMAP_BUCKET_NUMBER\", \"BITMAP_CONSTRUCT_AGG\", \"BITMAP_COUNT\", \"BITMAP_OR_AGG\", \"BITNOT\", \"BITOR\", \"BITOR_AGG\", \"BITSHIFTLEFT\", \"BITSHIFTRIGHT\", \"BITXOR\", \"BITXOR_AGG\", \"BOOLAND\", \"BOOLAND_AGG\", \"BOOLNOT\", \"BOOLOR\", \"BOOLOR_AGG\", \"BOOLXOR\", \"BOOLXOR_AGG\", \"BUILD_SCOPED_FILE_URL\", \"BUILD_STAGE_FILE_URL\", \"CASE\", \"CAST\", \"CBRT\", \"CEIL\", \"CHARINDEX\", \"CHECK_JSON\", \"CHECK_XML\", \"CHR\", \"CHAR\", \"COALESCE\", \"COLLATE\", \"COLLATION\", \"COMPLETE_TASK_GRAPHS\", \"COMPRESS\", \"CONCAT\", \"CONCAT_WS\", \"CONDITIONAL_CHANGE_EVENT\", \"CONDITIONAL_TRUE_EVENT\", \"CONTAINS\", \"CONVERT_TIMEZONE\", \"COPY_HISTORY\", \"CORR\", \"COS\", \"COSH\", \"COT\", \"COUNT\", \"COUNT_IF\", \"COVAR_POP\", \"COVAR_SAMP\", \"CUME_DIST\", \"CURRENT_ACCOUNT\", \"CURRENT_AVAILABLE_ROLES\", \"CURRENT_CLIENT\", \"CURRENT_DATABASE\", \"CURRENT_DATE\", \"CURRENT_IP_ADDRESS\", \"CURRENT_REGION\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_SCHEMAS\", \"CURRENT_SECONDARY_ROLES\", \"CURRENT_SESSION\", \"CURRENT_STATEMENT\", \"CURRENT_TASK_GRAPHS\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_TRANSACTION\", \"CURRENT_USER\", \"CURRENT_VERSION\", \"CURRENT_WAREHOUSE\", \"DATA_TRANSFER_HISTORY\", \"DATABASE_REFRESH_HISTORY\", \"DATABASE_REFRESH_PROGRESS\", \"DATABASE_REFRESH_PROGRESS_BY_JOB\", \"DATABASE_STORAGE_USAGE_HISTORY\", \"DATE_FROM_PARTS\", \"DATE_PART\", \"DATE_TRUNC\", \"DATEADD\", \"DATEDIFF\", \"DAYNAME\", \"DECODE\", \"DECOMPRESS_BINARY\", \"DECOMPRESS_STRING\", \"DECRYPT\", \"DECRYPT_RAW\", \"DEGREES\", \"DENSE_RANK\", \"DIV0\", \"EDITDISTANCE\", \"ENCRYPT\", \"ENCRYPT_RAW\", \"ENDSWITH\", \"EQUAL_NULL\", \"EXP\", \"EXPLAIN_JSON\", \"EXTERNAL_FUNCTIONS_HISTORY\", \"EXTERNAL_TABLE_FILES\", \"EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY\", \"EXTRACT\", \"EXTRACT_SEMANTIC_CATEGORIES\", \"FACTORIAL\", \"FILTER\", \"FIRST_VALUE\", \"FLATTEN\", \"FLOOR\", \"GENERATE_COLUMN_DESCRIPTION\", \"GENERATOR\", \"GET\", \"GET_ABSOLUTE_PATH\", \"GET_DDL\", \"GET_IGNORE_CASE\", \"GET_OBJECT_REFERENCES\", \"GET_PATH\", \"GET_PRESIGNED_URL\", \"GET_RELATIVE_PATH\", \"GET_STAGE_LOCATION\", \"GETBIT\", \"GREATEST\", \"GREATEST_IGNORE_NULLS\", \"GROUPING\", \"GROUPING_ID\", \"HASH\", \"HASH_AGG\", \"HAVERSINE\", \"HEX_DECODE_BINARY\", \"HEX_DECODE_STRING\", \"HEX_ENCODE\", \"HLL\", \"HLL_ACCUMULATE\", \"HLL_COMBINE\", \"HLL_ESTIMATE\", \"HLL_EXPORT\", \"HLL_IMPORT\", \"HOUR\", \"MINUTE\", \"SECOND\", \"IFF\", \"IFNULL\", \"ILIKE\", \"ILIKE ANY\", \"INFER_SCHEMA\", \"INITCAP\", \"INSERT\", \"INVOKER_ROLE\", \"INVOKER_SHARE\", \"IS_ARRAY\", \"IS_BINARY\", \"IS_BOOLEAN\", \"IS_CHAR\", \"IS_VARCHAR\", \"IS_DATE\", \"IS_DATE_VALUE\", \"IS_DECIMAL\", \"IS_DOUBLE\", \"IS_REAL\", \"IS_GRANTED_TO_INVOKER_ROLE\", \"IS_INTEGER\", \"IS_NULL_VALUE\", \"IS_OBJECT\", \"IS_ROLE_IN_SESSION\", \"IS_TIME\", \"IS_TIMESTAMP_LTZ\", \"IS_TIMESTAMP_NTZ\", \"IS_TIMESTAMP_TZ\", \"JAROWINKLER_SIMILARITY\", \"JSON_EXTRACT_PATH_TEXT\", \"KURTOSIS\", \"LAG\", \"LAST_DAY\", \"LAST_QUERY_ID\", \"LAST_TRANSACTION\", \"LAST_VALUE\", \"LEAD\", \"LEAST\", \"LEFT\", \"LENGTH\", \"LEN\", \"LIKE\", \"LIKE ALL\", \"LIKE ANY\", \"LISTAGG\", \"LN\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOG\", \"LOGIN_HISTORY\", \"LOGIN_HISTORY_BY_USER\", \"LOWER\", \"LPAD\", \"LTRIM\", \"MATERIALIZED_VIEW_REFRESH_HISTORY\", \"MD5\", \"MD5_HEX\", \"MD5_BINARY\", \"MD5_NUMBER \\u2014 Obsoleted\", \"MD5_NUMBER_LOWER64\", \"MD5_NUMBER_UPPER64\", \"MEDIAN\", \"MIN\", \"MAX\", \"MINHASH\", \"MINHASH_COMBINE\", \"MOD\", \"MODE\", \"MONTHNAME\", \"MONTHS_BETWEEN\", \"NEXT_DAY\", \"NORMAL\", \"NTH_VALUE\", \"NTILE\", \"NULLIF\", \"NULLIFZERO\", \"NVL\", \"NVL2\", \"OBJECT_AGG\", \"OBJECT_CONSTRUCT\", \"OBJECT_CONSTRUCT_KEEP_NULL\", \"OBJECT_DELETE\", \"OBJECT_INSERT\", \"OBJECT_KEYS\", \"OBJECT_PICK\", \"OCTET_LENGTH\", \"PARSE_IP\", \"PARSE_JSON\", \"PARSE_URL\", \"PARSE_XML\", \"PERCENT_RANK\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PI\", \"PIPE_USAGE_HISTORY\", \"POLICY_CONTEXT\", \"POLICY_REFERENCES\", \"POSITION\", \"POW\", \"POWER\", \"PREVIOUS_DAY\", \"QUERY_ACCELERATION_HISTORY\", \"QUERY_HISTORY\", \"QUERY_HISTORY_BY_SESSION\", \"QUERY_HISTORY_BY_USER\", \"QUERY_HISTORY_BY_WAREHOUSE\", \"RADIANS\", \"RANDOM\", \"RANDSTR\", \"RANK\", \"RATIO_TO_REPORT\", \"REGEXP\", \"REGEXP_COUNT\", \"REGEXP_INSTR\", \"REGEXP_LIKE\", \"REGEXP_REPLACE\", \"REGEXP_SUBSTR\", \"REGEXP_SUBSTR_ALL\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\", \"REGR_VALX\", \"REGR_VALY\", \"REPEAT\", \"REPLACE\", \"REPLICATION_GROUP_REFRESH_HISTORY\", \"REPLICATION_GROUP_REFRESH_PROGRESS\", \"REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB\", \"REPLICATION_GROUP_USAGE_HISTORY\", \"REPLICATION_USAGE_HISTORY\", \"REST_EVENT_HISTORY\", \"RESULT_SCAN\", \"REVERSE\", \"RIGHT\", \"RLIKE\", \"ROUND\", \"ROW_NUMBER\", \"RPAD\", \"RTRIM\", \"RTRIMMED_LENGTH\", \"SEARCH_OPTIMIZATION_HISTORY\", \"SEQ1\", \"SEQ2\", \"SEQ4\", \"SEQ8\", \"SERVERLESS_TASK_HISTORY\", \"SHA1\", \"SHA1_HEX\", \"SHA1_BINARY\", \"SHA2\", \"SHA2_HEX\", \"SHA2_BINARY\", \"SIGN\", \"SIN\", \"SINH\", \"SKEW\", \"SOUNDEX\", \"SPACE\", \"SPLIT\", \"SPLIT_PART\", \"SPLIT_TO_TABLE\", \"SQRT\", \"SQUARE\", \"ST_AREA\", \"ST_ASEWKB\", \"ST_ASEWKT\", \"ST_ASGEOJSON\", \"ST_ASWKB\", \"ST_ASBINARY\", \"ST_ASWKT\", \"ST_ASTEXT\", \"ST_AZIMUTH\", \"ST_CENTROID\", \"ST_COLLECT\", \"ST_CONTAINS\", \"ST_COVEREDBY\", \"ST_COVERS\", \"ST_DIFFERENCE\", \"ST_DIMENSION\", \"ST_DISJOINT\", \"ST_DISTANCE\", \"ST_DWITHIN\", \"ST_ENDPOINT\", \"ST_ENVELOPE\", \"ST_GEOGFROMGEOHASH\", \"ST_GEOGPOINTFROMGEOHASH\", \"ST_GEOGRAPHYFROMWKB\", \"ST_GEOGRAPHYFROMWKT\", \"ST_GEOHASH\", \"ST_GEOMETRYFROMWKB\", \"ST_GEOMETRYFROMWKT\", \"ST_HAUSDORFFDISTANCE\", \"ST_INTERSECTION\", \"ST_INTERSECTS\", \"ST_LENGTH\", \"ST_MAKEGEOMPOINT\", \"ST_GEOM_POINT\", \"ST_MAKELINE\", \"ST_MAKEPOINT\", \"ST_POINT\", \"ST_MAKEPOLYGON\", \"ST_POLYGON\", \"ST_NPOINTS\", \"ST_NUMPOINTS\", \"ST_PERIMETER\", \"ST_POINTN\", \"ST_SETSRID\", \"ST_SIMPLIFY\", \"ST_SRID\", \"ST_STARTPOINT\", \"ST_SYMDIFFERENCE\", \"ST_UNION\", \"ST_WITHIN\", \"ST_X\", \"ST_XMAX\", \"ST_XMIN\", \"ST_Y\", \"ST_YMAX\", \"ST_YMIN\", \"STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY\", \"STAGE_STORAGE_USAGE_HISTORY\", \"STARTSWITH\", \"STDDEV\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STRIP_NULL_VALUE\", \"STRTOK\", \"STRTOK_SPLIT_TO_TABLE\", \"STRTOK_TO_ARRAY\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSDATE\", \"SYSTEM$ABORT_SESSION\", \"SYSTEM$ABORT_TRANSACTION\", \"SYSTEM$AUTHORIZE_PRIVATELINK\", \"SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS\", \"SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS\", \"SYSTEM$CANCEL_ALL_QUERIES\", \"SYSTEM$CANCEL_QUERY\", \"SYSTEM$CLUSTERING_DEPTH\", \"SYSTEM$CLUSTERING_INFORMATION\", \"SYSTEM$CLUSTERING_RATIO \", \"SYSTEM$CURRENT_USER_TASK_NAME\", \"SYSTEM$DATABASE_REFRESH_HISTORY \", \"SYSTEM$DATABASE_REFRESH_PROGRESS\", \"SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB \", \"SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE\", \"SYSTEM$DISABLE_DATABASE_REPLICATION\", \"SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE\", \"SYSTEM$ESTIMATE_QUERY_ACCELERATION\", \"SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS\", \"SYSTEM$EXPLAIN_JSON_TO_TEXT\", \"SYSTEM$EXPLAIN_PLAN_JSON\", \"SYSTEM$EXTERNAL_TABLE_PIPE_STATUS\", \"SYSTEM$GENERATE_SAML_CSR\", \"SYSTEM$GENERATE_SCIM_ACCESS_TOKEN\", \"SYSTEM$GET_AWS_SNS_IAM_POLICY\", \"SYSTEM$GET_PREDECESSOR_RETURN_VALUE\", \"SYSTEM$GET_PRIVATELINK\", \"SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS\", \"SYSTEM$GET_PRIVATELINK_CONFIG\", \"SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO\", \"SYSTEM$GET_TAG\", \"SYSTEM$GET_TAG_ALLOWED_VALUES\", \"SYSTEM$GET_TAG_ON_CURRENT_COLUMN\", \"SYSTEM$GET_TAG_ON_CURRENT_TABLE\", \"SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER\", \"SYSTEM$LAST_CHANGE_COMMIT_TIME\", \"SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME\", \"SYSTEM$MIGRATE_SAML_IDP_REGISTRATION\", \"SYSTEM$PIPE_FORCE_RESUME\", \"SYSTEM$PIPE_STATUS\", \"SYSTEM$REVOKE_PRIVATELINK\", \"SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS\", \"SYSTEM$SET_RETURN_VALUE\", \"SYSTEM$SHOW_OAUTH_CLIENT_SECRETS\", \"SYSTEM$STREAM_GET_TABLE_TIMESTAMP\", \"SYSTEM$STREAM_HAS_DATA\", \"SYSTEM$TASK_DEPENDENTS_ENABLE\", \"SYSTEM$TYPEOF\", \"SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS\", \"SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN\", \"SYSTEM$WAIT\", \"SYSTEM$WHITELIST\", \"SYSTEM$WHITELIST_PRIVATELINK\", \"TAG_REFERENCES\", \"TAG_REFERENCES_ALL_COLUMNS\", \"TAG_REFERENCES_WITH_LINEAGE\", \"TAN\", \"TANH\", \"TASK_DEPENDENTS\", \"TASK_HISTORY\", \"TIME_FROM_PARTS\", \"TIME_SLICE\", \"TIMEADD\", \"TIMEDIFF\", \"TIMESTAMP_FROM_PARTS\", \"TIMESTAMPADD\", \"TIMESTAMPDIFF\", \"TO_ARRAY\", \"TO_BINARY\", \"TO_BOOLEAN\", \"TO_CHAR\", \"TO_VARCHAR\", \"TO_DATE\", \"DATE\", \"TO_DECIMAL\", \"TO_NUMBER\", \"TO_NUMERIC\", \"TO_DOUBLE\", \"TO_GEOGRAPHY\", \"TO_GEOMETRY\", \"TO_JSON\", \"TO_OBJECT\", \"TO_TIME\", \"TIME\", \"TO_TIMESTAMP\", \"TO_TIMESTAMP_LTZ\", \"TO_TIMESTAMP_NTZ\", \"TO_TIMESTAMP_TZ\", \"TO_VARIANT\", \"TO_XML\", \"TRANSLATE\", \"TRIM\", \"TRUNCATE\", \"TRUNC\", \"TRUNC\", \"TRY_BASE64_DECODE_BINARY\", \"TRY_BASE64_DECODE_STRING\", \"TRY_CAST\", \"TRY_HEX_DECODE_BINARY\", \"TRY_HEX_DECODE_STRING\", \"TRY_PARSE_JSON\", \"TRY_TO_BINARY\", \"TRY_TO_BOOLEAN\", \"TRY_TO_DATE\", \"TRY_TO_DECIMAL\", \"TRY_TO_NUMBER\", \"TRY_TO_NUMERIC\", \"TRY_TO_DOUBLE\", \"TRY_TO_GEOGRAPHY\", \"TRY_TO_GEOMETRY\", \"TRY_TO_TIME\", \"TRY_TO_TIMESTAMP\", \"TRY_TO_TIMESTAMP_LTZ\", \"TRY_TO_TIMESTAMP_NTZ\", \"TRY_TO_TIMESTAMP_TZ\", \"TYPEOF\", \"UNICODE\", \"UNIFORM\", \"UPPER\", \"UUID_STRING\", \"VALIDATE\", \"VALIDATE_PIPE_LOAD\", \"VAR_POP\", \"VAR_SAMP\", \"VARIANCE\", \"VARIANCE_SAMP\", \"VARIANCE_POP\", \"WAREHOUSE_LOAD_HISTORY\", \"WAREHOUSE_METERING_HISTORY\", \"WIDTH_BUCKET\", \"XMLGET\", \"YEAR\", \"YEAROFWEEK\", \"YEAROFWEEKISO\", \"DAY\", \"DAYOFMONTH\", \"DAYOFWEEK\", \"DAYOFWEEKISO\", \"DAYOFYEAR\", \"WEEK\", \"WEEK\", \"WEEKOFYEAR\", \"WEEKISO\", \"MONTH\", \"QUARTER\", \"ZEROIFNULL\", \"ZIPF\"];\n\n// src/languages/snowflake/snowflake.keywords.ts\nvar keywords18 = [\n// https://docs.snowflake.com/en/sql-reference/reserved-keywords.html\n//\n// run in console on this page: $x('//tbody/tr/*[1]/p/text()').map(x => x.nodeValue)\n\"ACCOUNT\", \"ALL\", \"ALTER\", \"AND\", \"ANY\", \"AS\", \"BETWEEN\", \"BY\", \"CASE\", \"CAST\", \"CHECK\", \"COLUMN\", \"CONNECT\", \"CONNECTION\", \"CONSTRAINT\", \"CREATE\", \"CROSS\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"DATABASE\", \"DELETE\", \"DISTINCT\", \"DROP\", \"ELSE\", \"EXISTS\", \"FALSE\", \"FOLLOWING\", \"FOR\", \"FROM\", \"FULL\", \"GRANT\", \"GROUP\", \"GSCLUSTER\", \"HAVING\", \"ILIKE\", \"IN\", \"INCREMENT\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"ISSUE\", \"JOIN\", \"LATERAL\", \"LEFT\", \"LIKE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"MINUS\", \"NATURAL\", \"NOT\", \"NULL\", \"OF\", \"ON\", \"OR\", \"ORDER\", \"ORGANIZATION\", \"QUALIFY\", \"REGEXP\", \"REVOKE\", \"RIGHT\", \"RLIKE\", \"ROW\", \"ROWS\", \"SAMPLE\", \"SCHEMA\", \"SELECT\", \"SET\", \"SOME\", \"START\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TO\", \"TRIGGER\", \"TRUE\", \"TRY_CAST\", \"UNION\", \"UNIQUE\", \"UPDATE\", \"USING\", \"VALUES\", \"VIEW\", \"WHEN\", \"WHENEVER\", \"WHERE\", \"WITH\",\n// These are definitely keywords, but haven't found a definite list in the docs\n\"COMMENT\"];\nvar dataTypes18 = [\"NUMBER\", \"DECIMAL\", \"NUMERIC\", \"INT\", \"INTEGER\", \"BIGINT\", \"SMALLINT\", \"TINYINT\", \"BYTEINT\", \"FLOAT\", \"FLOAT4\", \"FLOAT8\", \"DOUBLE\", \"DOUBLE PRECISION\", \"REAL\", \"VARCHAR\", \"CHAR\", \"CHARACTER\", \"STRING\", \"TEXT\", \"BINARY\", \"VARBINARY\", \"BOOLEAN\", \"DATE\", \"DATETIME\", \"TIME\", \"TIMESTAMP\", \"TIMESTAMP_LTZ\", \"TIMESTAMP_NTZ\", \"TIMESTAMP\", \"TIMESTAMP_TZ\", \"VARIANT\", \"OBJECT\", \"ARRAY\", \"GEOGRAPHY\", \"GEOMETRY\"];\n\n// src/languages/snowflake/snowflake.formatter.ts\nvar reservedSelect18 = expandPhrases([\"SELECT [ALL | DISTINCT]\"]);\nvar reservedClauses18 = expandPhrases([\n// queries\n\"WITH [RECURSIVE]\", \"FROM\", \"WHERE\", \"GROUP BY\", \"HAVING\", \"PARTITION BY\", \"ORDER BY\", \"QUALIFY\", \"LIMIT\", \"OFFSET\", \"FETCH [FIRST | NEXT]\",\n// Data manipulation\n// - insert:\n\"INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]\", \"{THEN | ELSE} INTO\", \"VALUES\",\n// - update:\n\"SET\", \"CLUSTER BY\", \"[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}\", \"COPY GRANTS\", \"USING TEMPLATE\", \"MERGE INTO\", \"WHEN MATCHED [AND]\", \"THEN {UPDATE SET | DELETE}\", \"WHEN NOT MATCHED THEN INSERT\"]);\nvar standardOnelineClauses17 = expandPhrases([\"CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]\", \"CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]\"]);\nvar tabularOnelineClauses17 = expandPhrases([\n// - create:\n\"CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]\",\n// - update:\n\"UPDATE\",\n// - delete:\n\"DELETE FROM\",\n// - drop table:\n\"DROP TABLE [IF EXISTS]\",\n// - alter table:\n\"ALTER TABLE [IF EXISTS]\", \"RENAME TO\", \"SWAP WITH\", \"[SUSPEND | RESUME] RECLUSTER\", \"DROP CLUSTERING KEY\", \"ADD [COLUMN]\", \"RENAME COLUMN\", \"{ALTER | MODIFY} [COLUMN]\", \"DROP [COLUMN]\", \"{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]\", \"RENAME CONSTRAINT\", \"{ADD | DROP} SEARCH OPTIMIZATION\", \"{SET | UNSET} TAG\",\n// Actually TAG is optional, but that conflicts with UPDATE..SET statement\n\"{ADD | DROP} ROW ACCESS POLICY\", \"DROP ALL ROW ACCESS POLICIES\", \"{SET | DROP} DEFAULT\",\n// for alter column\n\"{SET | DROP} NOT NULL\",\n// for alter column\n\"SET DATA TYPE\",\n// for alter column\n\"UNSET COMMENT\",\n// for alter column\n\"{SET | UNSET} MASKING POLICY\",\n// for alter column\n// - truncate:\n\"TRUNCATE [TABLE] [IF EXISTS]\",\n// other\n// https://docs.snowflake.com/en/sql-reference/sql-all.html\n//\n// 1. run in console on this page: $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue)\n// 2. delete all lines that contain a sting like '(.*)', they are already covered in the list\n// 3. delete all lines that contain a sting like '<.*>', they are already covered in the list\n// 4. delete all lines that contain '…', they are part of a regex statement that can't be covered here\n// 5. Manually add 'COPY INTO'\n// 6. Remove all lines that are already in `reservedClauses`\n//\n// Steps 1-4 can be combined by the following script in the developer console:\n// $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue) // Step 1\n//   filter(x => !x.match(/\\(.*\\)/) && !x.match(/…/) && !x.match(/<.*>/)) // Step 2-4\n\"ALTER ACCOUNT\", \"ALTER API INTEGRATION\", \"ALTER CONNECTION\", \"ALTER DATABASE\", \"ALTER EXTERNAL TABLE\", \"ALTER FAILOVER GROUP\", \"ALTER FILE FORMAT\", \"ALTER FUNCTION\", \"ALTER INTEGRATION\", \"ALTER MASKING POLICY\", \"ALTER MATERIALIZED VIEW\", \"ALTER NETWORK POLICY\", \"ALTER NOTIFICATION INTEGRATION\", \"ALTER PIPE\", \"ALTER PROCEDURE\", \"ALTER REPLICATION GROUP\", \"ALTER RESOURCE MONITOR\", \"ALTER ROLE\", \"ALTER ROW ACCESS POLICY\", \"ALTER SCHEMA\", \"ALTER SECURITY INTEGRATION\", \"ALTER SEQUENCE\", \"ALTER SESSION\", \"ALTER SESSION POLICY\", \"ALTER SHARE\", \"ALTER STAGE\", \"ALTER STORAGE INTEGRATION\", \"ALTER STREAM\", \"ALTER TAG\", \"ALTER TASK\", \"ALTER USER\", \"ALTER VIEW\", \"ALTER WAREHOUSE\", \"BEGIN\", \"CALL\", \"COMMIT\", \"COPY INTO\", \"CREATE ACCOUNT\", \"CREATE API INTEGRATION\", \"CREATE CONNECTION\", \"CREATE DATABASE\", \"CREATE EXTERNAL FUNCTION\", \"CREATE EXTERNAL TABLE\", \"CREATE FAILOVER GROUP\", \"CREATE FILE FORMAT\", \"CREATE FUNCTION\", \"CREATE INTEGRATION\", \"CREATE MANAGED ACCOUNT\", \"CREATE MASKING POLICY\", \"CREATE MATERIALIZED VIEW\", \"CREATE NETWORK POLICY\", \"CREATE NOTIFICATION INTEGRATION\", \"CREATE PIPE\", \"CREATE PROCEDURE\", \"CREATE REPLICATION GROUP\", \"CREATE RESOURCE MONITOR\", \"CREATE ROLE\", \"CREATE ROW ACCESS POLICY\", \"CREATE SCHEMA\", \"CREATE SECURITY INTEGRATION\", \"CREATE SEQUENCE\", \"CREATE SESSION POLICY\", \"CREATE SHARE\", \"CREATE STAGE\", \"CREATE STORAGE INTEGRATION\", \"CREATE STREAM\", \"CREATE TAG\", \"CREATE TASK\", \"CREATE USER\", \"CREATE WAREHOUSE\", \"DELETE\", \"DESCRIBE DATABASE\", \"DESCRIBE EXTERNAL TABLE\", \"DESCRIBE FILE FORMAT\", \"DESCRIBE FUNCTION\", \"DESCRIBE INTEGRATION\", \"DESCRIBE MASKING POLICY\", \"DESCRIBE MATERIALIZED VIEW\", \"DESCRIBE NETWORK POLICY\", \"DESCRIBE PIPE\", \"DESCRIBE PROCEDURE\", \"DESCRIBE RESULT\", \"DESCRIBE ROW ACCESS POLICY\", \"DESCRIBE SCHEMA\", \"DESCRIBE SEQUENCE\", \"DESCRIBE SESSION POLICY\", \"DESCRIBE SHARE\", \"DESCRIBE STAGE\", \"DESCRIBE STREAM\", \"DESCRIBE TABLE\", \"DESCRIBE TASK\", \"DESCRIBE TRANSACTION\", \"DESCRIBE USER\", \"DESCRIBE VIEW\", \"DESCRIBE WAREHOUSE\", \"DROP CONNECTION\", \"DROP DATABASE\", \"DROP EXTERNAL TABLE\", \"DROP FAILOVER GROUP\", \"DROP FILE FORMAT\", \"DROP FUNCTION\", \"DROP INTEGRATION\", \"DROP MANAGED ACCOUNT\", \"DROP MASKING POLICY\", \"DROP MATERIALIZED VIEW\", \"DROP NETWORK POLICY\", \"DROP PIPE\", \"DROP PROCEDURE\", \"DROP REPLICATION GROUP\", \"DROP RESOURCE MONITOR\", \"DROP ROLE\", \"DROP ROW ACCESS POLICY\", \"DROP SCHEMA\", \"DROP SEQUENCE\", \"DROP SESSION POLICY\", \"DROP SHARE\", \"DROP STAGE\", \"DROP STREAM\", \"DROP TAG\", \"DROP TASK\", \"DROP USER\", \"DROP VIEW\", \"DROP WAREHOUSE\", \"EXECUTE IMMEDIATE\", \"EXECUTE TASK\", \"EXPLAIN\", \"GET\", \"GRANT OWNERSHIP\", \"GRANT ROLE\", \"INSERT\", \"LIST\", \"MERGE\", \"PUT\", \"REMOVE\", \"REVOKE ROLE\", \"ROLLBACK\", \"SHOW COLUMNS\", \"SHOW CONNECTIONS\", \"SHOW DATABASES\", \"SHOW DATABASES IN FAILOVER GROUP\", \"SHOW DATABASES IN REPLICATION GROUP\", \"SHOW DELEGATED AUTHORIZATIONS\", \"SHOW EXTERNAL FUNCTIONS\", \"SHOW EXTERNAL TABLES\", \"SHOW FAILOVER GROUPS\", \"SHOW FILE FORMATS\", \"SHOW FUNCTIONS\", \"SHOW GLOBAL ACCOUNTS\", \"SHOW GRANTS\", \"SHOW INTEGRATIONS\", \"SHOW LOCKS\", \"SHOW MANAGED ACCOUNTS\", \"SHOW MASKING POLICIES\", \"SHOW MATERIALIZED VIEWS\", \"SHOW NETWORK POLICIES\", \"SHOW OBJECTS\", \"SHOW ORGANIZATION ACCOUNTS\", \"SHOW PARAMETERS\", \"SHOW PIPES\", \"SHOW PRIMARY KEYS\", \"SHOW PROCEDURES\", \"SHOW REGIONS\", \"SHOW REPLICATION ACCOUNTS\", \"SHOW REPLICATION DATABASES\", \"SHOW REPLICATION GROUPS\", \"SHOW RESOURCE MONITORS\", \"SHOW ROLES\", \"SHOW ROW ACCESS POLICIES\", \"SHOW SCHEMAS\", \"SHOW SEQUENCES\", \"SHOW SESSION POLICIES\", \"SHOW SHARES\", \"SHOW SHARES IN FAILOVER GROUP\", \"SHOW SHARES IN REPLICATION GROUP\", \"SHOW STAGES\", \"SHOW STREAMS\", \"SHOW TABLES\", \"SHOW TAGS\", \"SHOW TASKS\", \"SHOW TRANSACTIONS\", \"SHOW USER FUNCTIONS\", \"SHOW USERS\", \"SHOW VARIABLES\", \"SHOW VIEWS\", \"SHOW WAREHOUSES\", \"TRUNCATE MATERIALIZED VIEW\", \"UNDROP DATABASE\", \"UNDROP SCHEMA\", \"UNDROP TABLE\", \"UNDROP TAG\", \"UNSET\", \"USE DATABASE\", \"USE ROLE\", \"USE SCHEMA\", \"USE SECONDARY ROLES\", \"USE WAREHOUSE\"]);\nvar reservedSetOperations18 = expandPhrases([\"UNION [ALL]\", \"MINUS\", \"EXCEPT\", \"INTERSECT\"]);\nvar reservedJoins18 = expandPhrases([\"[INNER] JOIN\", \"[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN\", \"{CROSS | NATURAL} JOIN\"]);\nvar reservedPhrases18 = expandPhrases([\"{ROWS | RANGE} BETWEEN\", \"ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]\"]);\nvar snowflake = {\n  name: \"snowflake\",\n  tokenizerOptions: {\n    reservedSelect: reservedSelect18,\n    reservedClauses: [...reservedClauses18, ...standardOnelineClauses17, ...tabularOnelineClauses17],\n    reservedSetOperations: reservedSetOperations18,\n    reservedJoins: reservedJoins18,\n    reservedPhrases: reservedPhrases18,\n    reservedKeywords: keywords18,\n    reservedDataTypes: dataTypes18,\n    reservedFunctionNames: functions18,\n    stringTypes: [\"$$\", `''-qq-bs`],\n    identTypes: ['\"\"-qq'],\n    variableTypes: [\n    // for accessing columns at certain positons in the table\n    {\n      regex: \"[$][1-9]\\\\d*\"\n    },\n    // identifier style syntax\n    {\n      regex: \"[$][_a-zA-Z][_a-zA-Z0-9$]*\"\n    }],\n    extraParens: [\"[]\"],\n    identChars: {\n      rest: \"$\"\n    },\n    lineCommentTypes: [\"--\", \"//\"],\n    operators: [\n    // Modulo\n    \"%\",\n    // Type cast\n    \"::\",\n    // String concat\n    \"||\",\n    // Generators: https://docs.snowflake.com/en/sql-reference/functions/generator.html#generator\n    \"=>\",\n    // Assignment https://docs.snowflake.com/en/sql-reference/snowflake-scripting/let\n    \":=\",\n    // Lambda: https://docs.snowflake.com/en/user-guide/querying-semistructured#lambda-expressions\n    \"->\"],\n    propertyAccessOperators: [\":\"]\n  },\n  formatOptions: {\n    alwaysDenseOperators: [\"::\"],\n    onelineClauses: [...standardOnelineClauses17, ...tabularOnelineClauses17],\n    tabularOnelineClauses: tabularOnelineClauses17\n  }\n};\n\n// src/utils.ts\nvar last = arr => arr[arr.length - 1];\nvar sortByLengthDesc = strings => strings.sort((a, b) => b.length - a.length || a.localeCompare(b));\nvar equalizeWhitespace = s => s.replace(/\\s+/gu, \" \");\nvar isMultiline = text => /\\n/.test(text);\n\n// src/lexer/regexUtil.ts\nvar escapeRegExp = string2 => string2.replace(/[.*+?^${}()|[\\]\\\\]/gu, \"\\\\$&\");\nvar WHITESPACE_REGEX = /\\s+/uy;\nvar patternToRegex = pattern => new RegExp(`(?:${pattern})`, \"uy\");\nvar toCaseInsensitivePattern = prefix => prefix.split(\"\").map(char => / /gu.test(char) ? \"\\\\s+\" : `[${char.toUpperCase()}${char.toLowerCase()}]`).join(\"\");\nvar withDashes = pattern => pattern + \"(?:-\" + pattern + \")*\";\nvar prefixesPattern = ({\n  prefixes,\n  requirePrefix\n}) => `(?:${prefixes.map(toCaseInsensitivePattern).join(\"|\")}${requirePrefix ? \"\" : \"|\"})`;\n\n// src/lexer/regexFactory.ts\nvar lineComment = lineCommentTypes => new RegExp(`(?:${lineCommentTypes.map(escapeRegExp).join(\"|\")}).*?(?=\\r\n|\\r|\n|$)`, \"uy\");\nvar parenthesis = (kind, extraParens = []) => {\n  const index = kind === \"open\" ? 0 : 1;\n  const parens = [\"()\", ...extraParens].map(pair => pair[index]);\n  return patternToRegex(parens.map(escapeRegExp).join(\"|\"));\n};\nvar operator = operators => patternToRegex(`${sortByLengthDesc(operators).map(escapeRegExp).join(\"|\")}`);\nvar rejectIdentCharsPattern = ({\n  rest,\n  dashes\n}) => rest || dashes ? `(?![${rest || \"\"}${dashes ? \"-\" : \"\"}])` : \"\";\nvar reservedWord = (reservedKeywords, identChars = {}) => {\n  if (reservedKeywords.length === 0) {\n    return /^\\b$/u;\n  }\n  const avoidIdentChars = rejectIdentCharsPattern(identChars);\n  const reservedKeywordsPattern = sortByLengthDesc(reservedKeywords).map(escapeRegExp).join(\"|\").replace(/ /gu, \"\\\\s+\");\n  return new RegExp(`(?:${reservedKeywordsPattern})${avoidIdentChars}\\\\b`, \"iuy\");\n};\nvar parameter = (paramTypes, pattern) => {\n  if (!paramTypes.length) {\n    return void 0;\n  }\n  const typesRegex = paramTypes.map(escapeRegExp).join(\"|\");\n  return patternToRegex(`(?:${typesRegex})(?:${pattern})`);\n};\nvar buildQStringPatterns = () => {\n  const specialDelimiterMap = {\n    \"<\": \">\",\n    \"[\": \"]\",\n    \"(\": \")\",\n    \"{\": \"}\"\n  };\n  const singlePattern = \"{left}(?:(?!{right}').)*?{right}\";\n  const patternList = Object.entries(specialDelimiterMap).map(([left, right]) => singlePattern.replace(/{left}/g, escapeRegExp(left)).replace(/{right}/g, escapeRegExp(right)));\n  const specialDelimiters = escapeRegExp(Object.keys(specialDelimiterMap).join(\"\"));\n  const standardDelimiterPattern = String.raw`(?<tag>[^\\s${specialDelimiters}])(?:(?!\\k<tag>').)*?\\k<tag>`;\n  const qStringPattern = `[Qq]'(?:${standardDelimiterPattern}|${patternList.join(\"|\")})'`;\n  return qStringPattern;\n};\nvar quotePatterns = {\n  // - backtick quoted (using `` to escape)\n  \"``\": \"(?:`[^`]*`)+\",\n  // - Transact-SQL square bracket quoted (using ]] to escape)\n  \"[]\": String.raw`(?:\\[[^\\]]*\\])(?:\\][^\\]]*\\])*`,\n  // double-quoted\n  '\"\"-qq': String.raw`(?:\"[^\"]*\")+`,\n  // with repeated quote escapes\n  '\"\"-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")`,\n  // with backslash escapes\n  '\"\"-qq-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")+`,\n  // with repeated quote or backslash escapes\n  '\"\"-raw': String.raw`(?:\"[^\"]*\")`,\n  // no escaping\n  // single-quoted\n  \"''-qq\": String.raw`(?:'[^']*')+`,\n  // with repeated quote escapes\n  \"''-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')`,\n  // with backslash escapes\n  \"''-qq-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')+`,\n  // with repeated quote or backslash escapes\n  \"''-raw\": String.raw`(?:'[^']*')`,\n  // no escaping\n  // PostgreSQL dollar-quoted\n  \"$$\": String.raw`(?<tag>\\$\\w*\\$)[\\s\\S]*?\\k<tag>`,\n  // BigQuery '''triple-quoted''' (using \\' to escape)\n  \"'''..'''\": String.raw`'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?'''`,\n  // BigQuery \"\"\"triple-quoted\"\"\" (using \\\" to escape)\n  '\"\"\"..\"\"\"': String.raw`\"\"\"[^\\\\]*?(?:\\\\.[^\\\\]*?)*?\"\"\"`,\n  // Hive and Spark variables: ${name}\n  \"{}\": String.raw`(?:\\{[^\\}]*\\})`,\n  // Oracle q'' strings: q'<text>' q'|text|' ...\n  \"q''\": buildQStringPatterns()\n};\nvar singleQuotePattern = quoteTypes => {\n  if (typeof quoteTypes === \"string\") {\n    return quotePatterns[quoteTypes];\n  } else if (\"regex\" in quoteTypes) {\n    return quoteTypes.regex;\n  } else {\n    return prefixesPattern(quoteTypes) + quotePatterns[quoteTypes.quote];\n  }\n};\nvar variable = varTypes => patternToRegex(varTypes.map(varType => \"regex\" in varType ? varType.regex : singleQuotePattern(varType)).join(\"|\"));\nvar stringPattern = quoteTypes => quoteTypes.map(singleQuotePattern).join(\"|\");\nvar string = quoteTypes => patternToRegex(stringPattern(quoteTypes));\nvar identifier = (specialChars = {}) => patternToRegex(identifierPattern(specialChars));\nvar identifierPattern = ({\n  first,\n  rest,\n  dashes,\n  allowFirstCharNumber\n} = {}) => {\n  const letter = \"\\\\p{Alphabetic}\\\\p{Mark}_\";\n  const number = \"\\\\p{Decimal_Number}\";\n  const firstChars = escapeRegExp(first != null ? first : \"\");\n  const restChars = escapeRegExp(rest != null ? rest : \"\");\n  const pattern = allowFirstCharNumber ? `[${letter}${number}${firstChars}][${letter}${number}${restChars}]*` : `[${letter}${firstChars}][${letter}${number}${restChars}]*`;\n  return dashes ? withDashes(pattern) : pattern;\n};\n\n// src/lexer/lineColFromIndex.ts\nfunction lineColFromIndex(source, index) {\n  const lines = source.slice(0, index).split(/\\n/);\n  return {\n    line: lines.length,\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n// src/lexer/TokenizerEngine.ts\nvar TokenizerEngine = class {\n  // Current position in string\n  constructor(rules, dialectName) {\n    this.rules = rules;\n    this.dialectName = dialectName;\n    this.input = \"\";\n    // The input SQL string to process\n    this.index = 0;\n  }\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  tokenize(input) {\n    this.input = input;\n    this.index = 0;\n    const tokens = [];\n    let token;\n    while (this.index < this.input.length) {\n      const precedingWhitespace = this.getWhitespace();\n      if (this.index < this.input.length) {\n        token = this.getNextToken();\n        if (!token) {\n          throw this.createParseError();\n        }\n        tokens.push(__spreadProps(__spreadValues({}, token), {\n          precedingWhitespace\n        }));\n      }\n    }\n    return tokens;\n  }\n  createParseError() {\n    const text = this.input.slice(this.index, this.index + 10);\n    const {\n      line,\n      col\n    } = lineColFromIndex(this.input, this.index);\n    return new Error(`Parse error: Unexpected \"${text}\" at line ${line} column ${col}.\n${this.dialectInfo()}`);\n  }\n  dialectInfo() {\n    if (this.dialectName === \"sql\") {\n      return `This likely happens because you're using the default \"sql\" dialect.\nIf possible, please select a more specific dialect (like sqlite, postgresql, etc).`;\n    } else {\n      return `SQL dialect used: \"${this.dialectName}\".`;\n    }\n  }\n  getWhitespace() {\n    WHITESPACE_REGEX.lastIndex = this.index;\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      this.index += matches[0].length;\n      return matches[0];\n    }\n    return void 0;\n  }\n  getNextToken() {\n    for (const rule of this.rules) {\n      const token = this.match(rule);\n      if (token) {\n        return token;\n      }\n    }\n    return void 0;\n  }\n  // Attempts to match token rule regex at current position in input\n  match(rule) {\n    rule.regex.lastIndex = this.index;\n    const matches = rule.regex.exec(this.input);\n    if (matches) {\n      const matchedText = matches[0];\n      const token = {\n        type: rule.type,\n        raw: matchedText,\n        text: rule.text ? rule.text(matchedText) : matchedText,\n        start: this.index\n      };\n      if (rule.key) {\n        token.key = rule.key(matchedText);\n      }\n      this.index += matchedText.length;\n      return token;\n    }\n    return void 0;\n  }\n};\n\n// src/lexer/NestedComment.ts\nvar START = /\\/\\*/uy;\nvar ANY_CHAR = /[\\s\\S]/uy;\nvar END2 = /\\*\\//uy;\nvar NestedComment = class {\n  constructor() {\n    this.lastIndex = 0;\n  }\n  exec(input) {\n    let result = \"\";\n    let match;\n    let nestLevel = 0;\n    if (match = this.matchSection(START, input)) {\n      result += match;\n      nestLevel++;\n    } else {\n      return null;\n    }\n    while (nestLevel > 0) {\n      if (match = this.matchSection(START, input)) {\n        result += match;\n        nestLevel++;\n      } else if (match = this.matchSection(END2, input)) {\n        result += match;\n        nestLevel--;\n      } else if (match = this.matchSection(ANY_CHAR, input)) {\n        result += match;\n      } else {\n        return null;\n      }\n    }\n    return [result];\n  }\n  matchSection(regex, input) {\n    regex.lastIndex = this.lastIndex;\n    const matches = regex.exec(input);\n    if (matches) {\n      this.lastIndex += matches[0].length;\n    }\n    return matches ? matches[0] : null;\n  }\n};\n\n// src/lexer/Tokenizer.ts\nvar Tokenizer = class {\n  constructor(cfg, dialectName) {\n    this.cfg = cfg;\n    this.dialectName = dialectName;\n    this.rulesBeforeParams = this.buildRulesBeforeParams(cfg);\n    this.rulesAfterParams = this.buildRulesAfterParams(cfg);\n  }\n  tokenize(input, paramTypesOverrides) {\n    const rules = [...this.rulesBeforeParams, ...this.buildParamRules(this.cfg, paramTypesOverrides), ...this.rulesAfterParams];\n    const tokens = new TokenizerEngine(rules, this.dialectName).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  buildRulesBeforeParams(cfg) {\n    var _a, _b;\n    return this.validRules([{\n      type: \"BLOCK_COMMENT\" /* BLOCK_COMMENT */,\n      regex: /(\\/\\* *sql-formatter-disable *\\*\\/[\\s\\S]*?(?:\\/\\* *sql-formatter-enable *\\*\\/|$))/uy\n    }, {\n      type: \"BLOCK_COMMENT\" /* BLOCK_COMMENT */,\n      regex: cfg.nestedBlockComments ? new NestedComment() : /(\\/\\*[^]*?\\*\\/)/uy\n    }, {\n      type: \"LINE_COMMENT\" /* LINE_COMMENT */,\n      regex: lineComment((_a = cfg.lineCommentTypes) != null ? _a : [\"--\"])\n    }, {\n      type: \"QUOTED_IDENTIFIER\" /* QUOTED_IDENTIFIER */,\n      regex: string(cfg.identTypes)\n    }, {\n      type: \"NUMBER\" /* NUMBER */,\n      regex: /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?(?:[0-9]*\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?![\\w\\p{Alphabetic}])/uy\n    },\n    // RESERVED_PHRASE is matched before all other keyword tokens\n    // to e.g. prioritize matching \"TIMESTAMP WITH TIME ZONE\" phrase over \"WITH\" clause.\n    {\n      type: \"RESERVED_PHRASE\" /* RESERVED_PHRASE */,\n      regex: reservedWord((_b = cfg.reservedPhrases) != null ? _b : [], cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"CASE\" /* CASE */,\n      regex: /CASE\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"END\" /* END */,\n      regex: /END\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"BETWEEN\" /* BETWEEN */,\n      regex: /BETWEEN\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"LIMIT\" /* LIMIT */,\n      regex: cfg.reservedClauses.includes(\"LIMIT\") ? /LIMIT\\b/iuy : void 0,\n      text: toCanonical\n    }, {\n      type: \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */,\n      regex: reservedWord(cfg.reservedClauses, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"RESERVED_SELECT\" /* RESERVED_SELECT */,\n      regex: reservedWord(cfg.reservedSelect, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"RESERVED_SET_OPERATION\" /* RESERVED_SET_OPERATION */,\n      regex: reservedWord(cfg.reservedSetOperations, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"WHEN\" /* WHEN */,\n      regex: /WHEN\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"ELSE\" /* ELSE */,\n      regex: /ELSE\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"THEN\" /* THEN */,\n      regex: /THEN\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"RESERVED_JOIN\" /* RESERVED_JOIN */,\n      regex: reservedWord(cfg.reservedJoins, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"AND\" /* AND */,\n      regex: /AND\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"OR\" /* OR */,\n      regex: /OR\\b/iuy,\n      text: toCanonical\n    }, {\n      type: \"XOR\" /* XOR */,\n      regex: cfg.supportsXor ? /XOR\\b/iuy : void 0,\n      text: toCanonical\n    }, ...(cfg.operatorKeyword ? [{\n      type: \"OPERATOR\" /* OPERATOR */,\n      regex: /OPERATOR *\\([^)]+\\)/iuy\n    }] : []), {\n      type: \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */,\n      regex: reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */,\n      regex: reservedWord(cfg.reservedDataTypes, cfg.identChars),\n      text: toCanonical\n    }, {\n      type: \"RESERVED_KEYWORD\" /* RESERVED_KEYWORD */,\n      regex: reservedWord(cfg.reservedKeywords, cfg.identChars),\n      text: toCanonical\n    }]);\n  }\n  // These rules can also be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  buildRulesAfterParams(cfg) {\n    var _a, _b;\n    return this.validRules([{\n      type: \"VARIABLE\" /* VARIABLE */,\n      regex: cfg.variableTypes ? variable(cfg.variableTypes) : void 0\n    }, {\n      type: \"STRING\" /* STRING */,\n      regex: string(cfg.stringTypes)\n    }, {\n      type: \"IDENTIFIER\" /* IDENTIFIER */,\n      regex: identifier(cfg.identChars)\n    }, {\n      type: \"DELIMITER\" /* DELIMITER */,\n      regex: /[;]/uy\n    }, {\n      type: \"COMMA\" /* COMMA */,\n      regex: /[,]/y\n    }, {\n      type: \"OPEN_PAREN\" /* OPEN_PAREN */,\n      regex: parenthesis(\"open\", cfg.extraParens)\n    }, {\n      type: \"CLOSE_PAREN\" /* CLOSE_PAREN */,\n      regex: parenthesis(\"close\", cfg.extraParens)\n    }, {\n      type: \"OPERATOR\" /* OPERATOR */,\n      regex: operator([\n      // standard operators\n      \"+\", \"-\", \"/\", \">\", \"<\", \"=\", \"<>\", \"<=\", \">=\", \"!=\", ...((_a = cfg.operators) != null ? _a : [])])\n    }, {\n      type: \"ASTERISK\" /* ASTERISK */,\n      regex: /[*]/uy\n    }, {\n      type: \"PROPERTY_ACCESS_OPERATOR\" /* PROPERTY_ACCESS_OPERATOR */,\n      regex: operator([\".\", ...((_b = cfg.propertyAccessOperators) != null ? _b : [])])\n    }]);\n  }\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  buildParamRules(cfg, paramTypesOverrides) {\n    var _a, _b, _c, _d, _e;\n    const paramTypes = {\n      named: (paramTypesOverrides == null ? void 0 : paramTypesOverrides.named) || ((_a = cfg.paramTypes) == null ? void 0 : _a.named) || [],\n      quoted: (paramTypesOverrides == null ? void 0 : paramTypesOverrides.quoted) || ((_b = cfg.paramTypes) == null ? void 0 : _b.quoted) || [],\n      numbered: (paramTypesOverrides == null ? void 0 : paramTypesOverrides.numbered) || ((_c = cfg.paramTypes) == null ? void 0 : _c.numbered) || [],\n      positional: typeof (paramTypesOverrides == null ? void 0 : paramTypesOverrides.positional) === \"boolean\" ? paramTypesOverrides.positional : (_d = cfg.paramTypes) == null ? void 0 : _d.positional,\n      custom: (paramTypesOverrides == null ? void 0 : paramTypesOverrides.custom) || ((_e = cfg.paramTypes) == null ? void 0 : _e.custom) || []\n    };\n    return this.validRules([{\n      type: \"NAMED_PARAMETER\" /* NAMED_PARAMETER */,\n      regex: parameter(paramTypes.named, identifierPattern(cfg.paramChars || cfg.identChars)),\n      key: v => v.slice(1)\n    }, {\n      type: \"QUOTED_PARAMETER\" /* QUOTED_PARAMETER */,\n      regex: parameter(paramTypes.quoted, stringPattern(cfg.identTypes)),\n      key: v => (({\n        tokenKey,\n        quoteChar\n      }) => tokenKey.replace(new RegExp(escapeRegExp(\"\\\\\" + quoteChar), \"gu\"), quoteChar))({\n        tokenKey: v.slice(2, -1),\n        quoteChar: v.slice(-1)\n      })\n    }, {\n      type: \"NUMBERED_PARAMETER\" /* NUMBERED_PARAMETER */,\n      regex: parameter(paramTypes.numbered, \"[0-9]+\"),\n      key: v => v.slice(1)\n    }, {\n      type: \"POSITIONAL_PARAMETER\" /* POSITIONAL_PARAMETER */,\n      regex: paramTypes.positional ? /[?]/y : void 0\n    }, ...paramTypes.custom.map(customParam => {\n      var _a2;\n      return {\n        type: \"CUSTOM_PARAMETER\" /* CUSTOM_PARAMETER */,\n        regex: patternToRegex(customParam.regex),\n        key: (_a2 = customParam.key) != null ? _a2 : v => v\n      };\n    })]);\n  }\n  // filters out rules for token types whose regex is undefined\n  validRules(rules) {\n    return rules.filter(rule => Boolean(rule.regex));\n  }\n};\nvar toCanonical = v => equalizeWhitespace(v.toUpperCase());\n\n// src/dialect.ts\nvar cache = /* @__PURE__ */new Map();\nvar createDialect = options => {\n  let dialect = cache.get(options);\n  if (!dialect) {\n    dialect = dialectFromOptions(options);\n    cache.set(options, dialect);\n  }\n  return dialect;\n};\nvar dialectFromOptions = dialectOptions => ({\n  tokenizer: new Tokenizer(dialectOptions.tokenizerOptions, dialectOptions.name),\n  formatOptions: processDialectFormatOptions(dialectOptions.formatOptions)\n});\nvar processDialectFormatOptions = options => {\n  var _a;\n  return {\n    alwaysDenseOperators: options.alwaysDenseOperators || [],\n    onelineClauses: Object.fromEntries(options.onelineClauses.map(name => [name, true])),\n    tabularOnelineClauses: Object.fromEntries(((_a = options.tabularOnelineClauses) != null ? _a : options.onelineClauses).map(name => [name, true]))\n  };\n};\n\n// src/formatter/config.ts\nfunction indentString(cfg) {\n  if (cfg.indentStyle === \"tabularLeft\" || cfg.indentStyle === \"tabularRight\") {\n    return \" \".repeat(10);\n  }\n  if (cfg.useTabs) {\n    return \"\t\";\n  }\n  return \" \".repeat(cfg.tabWidth);\n}\nfunction isTabularStyle(cfg) {\n  return cfg.indentStyle === \"tabularLeft\" || cfg.indentStyle === \"tabularRight\";\n}\n\n// src/formatter/Params.ts\nvar Params = class {\n  constructor(params) {\n    this.params = params;\n    this.index = 0;\n  }\n  /**\n   * Returns param value that matches given placeholder with param key.\n   */\n  get({\n    key,\n    text\n  }) {\n    if (!this.params) {\n      return text;\n    }\n    if (key) {\n      return this.params[key];\n    }\n    return this.params[this.index++];\n  }\n  /**\n   * Returns index of current positional parameter.\n   */\n  getPositionalParameterIndex() {\n    return this.index;\n  }\n  /**\n   * Sets index of current positional parameter.\n   */\n  setPositionalParameterIndex(i) {\n    this.index = i;\n  }\n};\n\n// src/parser/createParser.ts\nimport nearley from \"nearley\";\n\n// src/lexer/disambiguateTokens.ts\nfunction disambiguateTokens(tokens) {\n  return tokens.map(propertyNameKeywordToIdent).map(funcNameToIdent).map(dataTypeToParameterizedDataType).map(identToArrayIdent).map(dataTypeToArrayKeyword);\n}\nvar propertyNameKeywordToIdent = (token, i, tokens) => {\n  if (isReserved(token.type)) {\n    const prevToken = prevNonCommentToken(tokens, i);\n    if (prevToken && prevToken.type === \"PROPERTY_ACCESS_OPERATOR\" /* PROPERTY_ACCESS_OPERATOR */) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"IDENTIFIER\" /* IDENTIFIER */,\n        text: token.raw\n      });\n    }\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && nextToken.type === \"PROPERTY_ACCESS_OPERATOR\" /* PROPERTY_ACCESS_OPERATOR */) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"IDENTIFIER\" /* IDENTIFIER */,\n        text: token.raw\n      });\n    }\n  }\n  return token;\n};\nvar funcNameToIdent = (token, i, tokens) => {\n  if (token.type === \"RESERVED_FUNCTION_NAME\" /* RESERVED_FUNCTION_NAME */) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (!nextToken || !isOpenParen(nextToken)) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"IDENTIFIER\" /* IDENTIFIER */,\n        text: token.raw\n      });\n    }\n  }\n  return token;\n};\nvar dataTypeToParameterizedDataType = (token, i, tokens) => {\n  if (token.type === \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenParen(nextToken)) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"RESERVED_PARAMETERIZED_DATA_TYPE\" /* RESERVED_PARAMETERIZED_DATA_TYPE */\n      });\n    }\n  }\n  return token;\n};\nvar identToArrayIdent = (token, i, tokens) => {\n  if (token.type === \"IDENTIFIER\" /* IDENTIFIER */) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenBracket(nextToken)) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"ARRAY_IDENTIFIER\" /* ARRAY_IDENTIFIER */\n      });\n    }\n  }\n  return token;\n};\nvar dataTypeToArrayKeyword = (token, i, tokens) => {\n  if (token.type === \"RESERVED_DATA_TYPE\" /* RESERVED_DATA_TYPE */) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenBracket(nextToken)) {\n      return __spreadProps(__spreadValues({}, token), {\n        type: \"ARRAY_KEYWORD\" /* ARRAY_KEYWORD */\n      });\n    }\n  }\n  return token;\n};\nvar prevNonCommentToken = (tokens, index) => nextNonCommentToken(tokens, index, -1);\nvar nextNonCommentToken = (tokens, index, dir = 1) => {\n  let i = 1;\n  while (tokens[index + i * dir] && isComment(tokens[index + i * dir])) {\n    i++;\n  }\n  return tokens[index + i * dir];\n};\nvar isOpenParen = t => t.type === \"OPEN_PAREN\" /* OPEN_PAREN */ && t.text === \"(\";\nvar isOpenBracket = t => t.type === \"OPEN_PAREN\" /* OPEN_PAREN */ && t.text === \"[\";\nvar isComment = t => t.type === \"BLOCK_COMMENT\" /* BLOCK_COMMENT */ || t.type === \"LINE_COMMENT\" /* LINE_COMMENT */;\n\n// src/parser/LexerAdapter.ts\nvar LexerAdapter = class {\n  constructor(tokenize) {\n    this.tokenize = tokenize;\n    this.index = 0;\n    this.tokens = [];\n    this.input = \"\";\n  }\n  reset(chunk, _info) {\n    this.input = chunk;\n    this.index = 0;\n    this.tokens = this.tokenize(chunk);\n  }\n  next() {\n    return this.tokens[this.index++];\n  }\n  save() {}\n  formatError(token) {\n    const {\n      line,\n      col\n    } = lineColFromIndex(this.input, token.start);\n    return `Parse error at token: ${token.text} at line ${line} column ${col}`;\n  }\n  has(name) {\n    return name in TokenType;\n  }\n};\n\n// src/parser/grammar.ts\nfunction id(d) {\n  return d[0];\n}\nvar lexer = new LexerAdapter(chunk => []);\nvar unwrap = ([[el]]) => el;\nvar toKeywordNode = token => ({\n  type: \"keyword\" /* keyword */,\n  tokenType: token.type,\n  text: token.text,\n  raw: token.raw\n});\nvar toDataTypeNode = token => ({\n  type: \"data_type\" /* data_type */,\n  text: token.text,\n  raw: token.raw\n});\nvar addComments = (node, {\n  leading,\n  trailing\n}) => {\n  if (leading == null ? void 0 : leading.length) {\n    node = __spreadProps(__spreadValues({}, node), {\n      leadingComments: leading\n    });\n  }\n  if (trailing == null ? void 0 : trailing.length) {\n    node = __spreadProps(__spreadValues({}, node), {\n      trailingComments: trailing\n    });\n  }\n  return node;\n};\nvar addCommentsToArray = (nodes, {\n  leading,\n  trailing\n}) => {\n  if (leading == null ? void 0 : leading.length) {\n    const [first, ...rest] = nodes;\n    nodes = [addComments(first, {\n      leading\n    }), ...rest];\n  }\n  if (trailing == null ? void 0 : trailing.length) {\n    const lead = nodes.slice(0, -1);\n    const last2 = nodes[nodes.length - 1];\n    nodes = [...lead, addComments(last2, {\n      trailing\n    })];\n  }\n  return nodes;\n};\nvar grammar = {\n  Lexer: lexer,\n  ParserRules: [{\n    \"name\": \"main$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"main$ebnf$1\",\n    \"symbols\": [\"main$ebnf$1\", \"statement\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"main$ebnf$1\"],\n    \"postprocess\": ([statements]) => {\n      const last2 = statements[statements.length - 1];\n      if (last2 && !last2.hasSemicolon) {\n        return last2.children.length > 0 ? statements : statements.slice(0, -1);\n      } else {\n        return statements;\n      }\n    }\n  }, {\n    \"name\": \"statement$subexpression$1\",\n    \"symbols\": [lexer.has(\"DELIMITER\") ? {\n      type: \"DELIMITER\"\n    } : DELIMITER]\n  }, {\n    \"name\": \"statement$subexpression$1\",\n    \"symbols\": [lexer.has(\"EOF\") ? {\n      type: \"EOF\"\n    } : EOF]\n  }, {\n    \"name\": \"statement\",\n    \"symbols\": [\"expressions_or_clauses\", \"statement$subexpression$1\"],\n    \"postprocess\": ([children, [delimiter]]) => ({\n      type: \"statement\" /* statement */,\n      children,\n      hasSemicolon: delimiter.type === \"DELIMITER\" /* DELIMITER */\n    })\n  }, {\n    \"name\": \"expressions_or_clauses$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"expressions_or_clauses$ebnf$1\",\n    \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"expressions_or_clauses$ebnf$2\",\n    \"symbols\": []\n  }, {\n    \"name\": \"expressions_or_clauses$ebnf$2\",\n    \"symbols\": [\"expressions_or_clauses$ebnf$2\", \"clause\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"expressions_or_clauses\",\n    \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expressions_or_clauses$ebnf$2\"],\n    \"postprocess\": ([expressions, clauses]) => [...expressions, ...clauses]\n  }, {\n    \"name\": \"clause$subexpression$1\",\n    \"symbols\": [\"limit_clause\"]\n  }, {\n    \"name\": \"clause$subexpression$1\",\n    \"symbols\": [\"select_clause\"]\n  }, {\n    \"name\": \"clause$subexpression$1\",\n    \"symbols\": [\"other_clause\"]\n  }, {\n    \"name\": \"clause$subexpression$1\",\n    \"symbols\": [\"set_operation\"]\n  }, {\n    \"name\": \"clause\",\n    \"symbols\": [\"clause$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\",\n    \"symbols\": [\"free_form_sql\"]\n  }, {\n    \"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\",\n    \"symbols\": [\"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"limit_clause$ebnf$1$subexpression$1\",\n    \"symbols\": [lexer.has(\"COMMA\") ? {\n      type: \"COMMA\"\n    } : COMMA, \"limit_clause$ebnf$1$subexpression$1$ebnf$1\"]\n  }, {\n    \"name\": \"limit_clause$ebnf$1\",\n    \"symbols\": [\"limit_clause$ebnf$1$subexpression$1\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"limit_clause$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"limit_clause\",\n    \"symbols\": [lexer.has(\"LIMIT\") ? {\n      type: \"LIMIT\"\n    } : LIMIT, \"_\", \"expression_chain_\", \"limit_clause$ebnf$1\"],\n    \"postprocess\": ([limitToken, _, exp1, optional]) => {\n      if (optional) {\n        const [comma, exp2] = optional;\n        return {\n          type: \"limit_clause\" /* limit_clause */,\n          limitKw: addComments(toKeywordNode(limitToken), {\n            trailing: _\n          }),\n          offset: exp1,\n          count: exp2\n        };\n      } else {\n        return {\n          type: \"limit_clause\" /* limit_clause */,\n          limitKw: addComments(toKeywordNode(limitToken), {\n            trailing: _\n          }),\n          count: exp1\n        };\n      }\n    }\n  }, {\n    \"name\": \"select_clause$subexpression$1$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"select_clause$subexpression$1$ebnf$1\",\n    \"symbols\": [\"select_clause$subexpression$1$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"select_clause$subexpression$1\",\n    \"symbols\": [\"all_columns_asterisk\", \"select_clause$subexpression$1$ebnf$1\"]\n  }, {\n    \"name\": \"select_clause$subexpression$1$ebnf$2\",\n    \"symbols\": []\n  }, {\n    \"name\": \"select_clause$subexpression$1$ebnf$2\",\n    \"symbols\": [\"select_clause$subexpression$1$ebnf$2\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"select_clause$subexpression$1\",\n    \"symbols\": [\"asteriskless_free_form_sql\", \"select_clause$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"select_clause\",\n    \"symbols\": [lexer.has(\"RESERVED_SELECT\") ? {\n      type: \"RESERVED_SELECT\"\n    } : RESERVED_SELECT, \"select_clause$subexpression$1\"],\n    \"postprocess\": ([nameToken, [exp, expressions]]) => ({\n      type: \"clause\" /* clause */,\n      nameKw: toKeywordNode(nameToken),\n      children: [exp, ...expressions]\n    })\n  }, {\n    \"name\": \"select_clause\",\n    \"symbols\": [lexer.has(\"RESERVED_SELECT\") ? {\n      type: \"RESERVED_SELECT\"\n    } : RESERVED_SELECT],\n    \"postprocess\": ([nameToken]) => ({\n      type: \"clause\" /* clause */,\n      nameKw: toKeywordNode(nameToken),\n      children: []\n    })\n  }, {\n    \"name\": \"all_columns_asterisk\",\n    \"symbols\": [lexer.has(\"ASTERISK\") ? {\n      type: \"ASTERISK\"\n    } : ASTERISK],\n    \"postprocess\": () => ({\n      type: \"all_columns_asterisk\" /* all_columns_asterisk */\n    })\n  }, {\n    \"name\": \"other_clause$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"other_clause$ebnf$1\",\n    \"symbols\": [\"other_clause$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"other_clause\",\n    \"symbols\": [lexer.has(\"RESERVED_CLAUSE\") ? {\n      type: \"RESERVED_CLAUSE\"\n    } : RESERVED_CLAUSE, \"other_clause$ebnf$1\"],\n    \"postprocess\": ([nameToken, children]) => ({\n      type: \"clause\" /* clause */,\n      nameKw: toKeywordNode(nameToken),\n      children\n    })\n  }, {\n    \"name\": \"set_operation$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"set_operation$ebnf$1\",\n    \"symbols\": [\"set_operation$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"set_operation\",\n    \"symbols\": [lexer.has(\"RESERVED_SET_OPERATION\") ? {\n      type: \"RESERVED_SET_OPERATION\"\n    } : RESERVED_SET_OPERATION, \"set_operation$ebnf$1\"],\n    \"postprocess\": ([nameToken, children]) => ({\n      type: \"set_operation\" /* set_operation */,\n      nameKw: toKeywordNode(nameToken),\n      children\n    })\n  }, {\n    \"name\": \"expression_chain_$ebnf$1\",\n    \"symbols\": [\"expression_with_comments_\"]\n  }, {\n    \"name\": \"expression_chain_$ebnf$1\",\n    \"symbols\": [\"expression_chain_$ebnf$1\", \"expression_with_comments_\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"expression_chain_\",\n    \"symbols\": [\"expression_chain_$ebnf$1\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"expression_chain$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"expression_chain$ebnf$1\",\n    \"symbols\": [\"expression_chain$ebnf$1\", \"_expression_with_comments\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"expression_chain\",\n    \"symbols\": [\"expression\", \"expression_chain$ebnf$1\"],\n    \"postprocess\": ([expr, chain]) => [expr, ...chain]\n  }, {\n    \"name\": \"andless_expression_chain$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"andless_expression_chain$ebnf$1\",\n    \"symbols\": [\"andless_expression_chain$ebnf$1\", \"_andless_expression_with_comments\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"andless_expression_chain\",\n    \"symbols\": [\"andless_expression\", \"andless_expression_chain$ebnf$1\"],\n    \"postprocess\": ([expr, chain]) => [expr, ...chain]\n  }, {\n    \"name\": \"expression_with_comments_\",\n    \"symbols\": [\"expression\", \"_\"],\n    \"postprocess\": ([expr, _]) => addComments(expr, {\n      trailing: _\n    })\n  }, {\n    \"name\": \"_expression_with_comments\",\n    \"symbols\": [\"_\", \"expression\"],\n    \"postprocess\": ([_, expr]) => addComments(expr, {\n      leading: _\n    })\n  }, {\n    \"name\": \"_andless_expression_with_comments\",\n    \"symbols\": [\"_\", \"andless_expression\"],\n    \"postprocess\": ([_, expr]) => addComments(expr, {\n      leading: _\n    })\n  }, {\n    \"name\": \"free_form_sql$subexpression$1\",\n    \"symbols\": [\"asteriskless_free_form_sql\"]\n  }, {\n    \"name\": \"free_form_sql$subexpression$1\",\n    \"symbols\": [\"asterisk\"]\n  }, {\n    \"name\": \"free_form_sql\",\n    \"symbols\": [\"free_form_sql$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"asteriskless_free_form_sql$subexpression$1\",\n    \"symbols\": [\"asteriskless_andless_expression\"]\n  }, {\n    \"name\": \"asteriskless_free_form_sql$subexpression$1\",\n    \"symbols\": [\"logic_operator\"]\n  }, {\n    \"name\": \"asteriskless_free_form_sql$subexpression$1\",\n    \"symbols\": [\"comma\"]\n  }, {\n    \"name\": \"asteriskless_free_form_sql$subexpression$1\",\n    \"symbols\": [\"comment\"]\n  }, {\n    \"name\": \"asteriskless_free_form_sql$subexpression$1\",\n    \"symbols\": [\"other_keyword\"]\n  }, {\n    \"name\": \"asteriskless_free_form_sql\",\n    \"symbols\": [\"asteriskless_free_form_sql$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"expression$subexpression$1\",\n    \"symbols\": [\"andless_expression\"]\n  }, {\n    \"name\": \"expression$subexpression$1\",\n    \"symbols\": [\"logic_operator\"]\n  }, {\n    \"name\": \"expression\",\n    \"symbols\": [\"expression$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"andless_expression$subexpression$1\",\n    \"symbols\": [\"asteriskless_andless_expression\"]\n  }, {\n    \"name\": \"andless_expression$subexpression$1\",\n    \"symbols\": [\"asterisk\"]\n  }, {\n    \"name\": \"andless_expression\",\n    \"symbols\": [\"andless_expression$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"asteriskless_andless_expression$subexpression$1\",\n    \"symbols\": [\"atomic_expression\"]\n  }, {\n    \"name\": \"asteriskless_andless_expression$subexpression$1\",\n    \"symbols\": [\"between_predicate\"]\n  }, {\n    \"name\": \"asteriskless_andless_expression$subexpression$1\",\n    \"symbols\": [\"case_expression\"]\n  }, {\n    \"name\": \"asteriskless_andless_expression\",\n    \"symbols\": [\"asteriskless_andless_expression$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"array_subscript\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"function_call\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"property_access\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"parenthesis\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"curly_braces\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"square_brackets\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"operator\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"identifier\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"parameter\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"literal\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"data_type\"]\n  }, {\n    \"name\": \"atomic_expression$subexpression$1\",\n    \"symbols\": [\"keyword\"]\n  }, {\n    \"name\": \"atomic_expression\",\n    \"symbols\": [\"atomic_expression$subexpression$1\"],\n    \"postprocess\": unwrap\n  }, {\n    \"name\": \"array_subscript\",\n    \"symbols\": [lexer.has(\"ARRAY_IDENTIFIER\") ? {\n      type: \"ARRAY_IDENTIFIER\"\n    } : ARRAY_IDENTIFIER, \"_\", \"square_brackets\"],\n    \"postprocess\": ([arrayToken, _, brackets]) => ({\n      type: \"array_subscript\" /* array_subscript */,\n      array: addComments({\n        type: \"identifier\" /* identifier */,\n        quoted: false,\n        text: arrayToken.text\n      }, {\n        trailing: _\n      }),\n      parenthesis: brackets\n    })\n  }, {\n    \"name\": \"array_subscript\",\n    \"symbols\": [lexer.has(\"ARRAY_KEYWORD\") ? {\n      type: \"ARRAY_KEYWORD\"\n    } : ARRAY_KEYWORD, \"_\", \"square_brackets\"],\n    \"postprocess\": ([arrayToken, _, brackets]) => ({\n      type: \"array_subscript\" /* array_subscript */,\n      array: addComments(toKeywordNode(arrayToken), {\n        trailing: _\n      }),\n      parenthesis: brackets\n    })\n  }, {\n    \"name\": \"function_call\",\n    \"symbols\": [lexer.has(\"RESERVED_FUNCTION_NAME\") ? {\n      type: \"RESERVED_FUNCTION_NAME\"\n    } : RESERVED_FUNCTION_NAME, \"_\", \"parenthesis\"],\n    \"postprocess\": ([nameToken, _, parens]) => ({\n      type: \"function_call\" /* function_call */,\n      nameKw: addComments(toKeywordNode(nameToken), {\n        trailing: _\n      }),\n      parenthesis: parens\n    })\n  }, {\n    \"name\": \"parenthesis\",\n    \"symbols\": [{\n      \"literal\": \"(\"\n    }, \"expressions_or_clauses\", {\n      \"literal\": \")\"\n    }],\n    \"postprocess\": ([open, children, close]) => ({\n      type: \"parenthesis\" /* parenthesis */,\n      children,\n      openParen: \"(\",\n      closeParen: \")\"\n    })\n  }, {\n    \"name\": \"curly_braces$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"curly_braces$ebnf$1\",\n    \"symbols\": [\"curly_braces$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"curly_braces\",\n    \"symbols\": [{\n      \"literal\": \"{\"\n    }, \"curly_braces$ebnf$1\", {\n      \"literal\": \"}\"\n    }],\n    \"postprocess\": ([open, children, close]) => ({\n      type: \"parenthesis\" /* parenthesis */,\n      children,\n      openParen: \"{\",\n      closeParen: \"}\"\n    })\n  }, {\n    \"name\": \"square_brackets$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"square_brackets$ebnf$1\",\n    \"symbols\": [\"square_brackets$ebnf$1\", \"free_form_sql\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"square_brackets\",\n    \"symbols\": [{\n      \"literal\": \"[\"\n    }, \"square_brackets$ebnf$1\", {\n      \"literal\": \"]\"\n    }],\n    \"postprocess\": ([open, children, close]) => ({\n      type: \"parenthesis\" /* parenthesis */,\n      children,\n      openParen: \"[\",\n      closeParen: \"]\"\n    })\n  }, {\n    \"name\": \"property_access$subexpression$1\",\n    \"symbols\": [\"identifier\"]\n  }, {\n    \"name\": \"property_access$subexpression$1\",\n    \"symbols\": [\"array_subscript\"]\n  }, {\n    \"name\": \"property_access$subexpression$1\",\n    \"symbols\": [\"all_columns_asterisk\"]\n  }, {\n    \"name\": \"property_access$subexpression$1\",\n    \"symbols\": [\"parameter\"]\n  }, {\n    \"name\": \"property_access\",\n    \"symbols\": [\"atomic_expression\", \"_\", lexer.has(\"PROPERTY_ACCESS_OPERATOR\") ? {\n      type: \"PROPERTY_ACCESS_OPERATOR\"\n    } : PROPERTY_ACCESS_OPERATOR, \"_\", \"property_access$subexpression$1\"],\n    \"postprocess\":\n    // Allowing property to be <array_subscript> is currently a hack.\n    // A better way would be to allow <property_access> on the left side of array_subscript,\n    // but we currently can't do that because of another hack that requires\n    // %ARRAY_IDENTIFIER on the left side of <array_subscript>.\n    ([object, _1, dot, _2, [property]]) => {\n      return {\n        type: \"property_access\" /* property_access */,\n        object: addComments(object, {\n          trailing: _1\n        }),\n        operator: dot.text,\n        property: addComments(property, {\n          leading: _2\n        })\n      };\n    }\n  }, {\n    \"name\": \"between_predicate\",\n    \"symbols\": [lexer.has(\"BETWEEN\") ? {\n      type: \"BETWEEN\"\n    } : BETWEEN, \"_\", \"andless_expression_chain\", \"_\", lexer.has(\"AND\") ? {\n      type: \"AND\"\n    } : AND, \"_\", \"andless_expression\"],\n    \"postprocess\": ([betweenToken, _1, expr1, _2, andToken, _3, expr2]) => ({\n      type: \"between_predicate\" /* between_predicate */,\n      betweenKw: toKeywordNode(betweenToken),\n      expr1: addCommentsToArray(expr1, {\n        leading: _1,\n        trailing: _2\n      }),\n      andKw: toKeywordNode(andToken),\n      expr2: [addComments(expr2, {\n        leading: _3\n      })]\n    })\n  }, {\n    \"name\": \"case_expression$ebnf$1\",\n    \"symbols\": [\"expression_chain_\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"case_expression$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"case_expression$ebnf$2\",\n    \"symbols\": []\n  }, {\n    \"name\": \"case_expression$ebnf$2\",\n    \"symbols\": [\"case_expression$ebnf$2\", \"case_clause\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"case_expression\",\n    \"symbols\": [lexer.has(\"CASE\") ? {\n      type: \"CASE\"\n    } : CASE, \"_\", \"case_expression$ebnf$1\", \"case_expression$ebnf$2\", lexer.has(\"END\") ? {\n      type: \"END\"\n    } : END],\n    \"postprocess\": ([caseToken, _, expr, clauses, endToken]) => ({\n      type: \"case_expression\" /* case_expression */,\n      caseKw: addComments(toKeywordNode(caseToken), {\n        trailing: _\n      }),\n      endKw: toKeywordNode(endToken),\n      expr: expr || [],\n      clauses\n    })\n  }, {\n    \"name\": \"case_clause\",\n    \"symbols\": [lexer.has(\"WHEN\") ? {\n      type: \"WHEN\"\n    } : WHEN, \"_\", \"expression_chain_\", lexer.has(\"THEN\") ? {\n      type: \"THEN\"\n    } : THEN, \"_\", \"expression_chain_\"],\n    \"postprocess\": ([whenToken, _1, cond, thenToken, _2, expr]) => ({\n      type: \"case_when\" /* case_when */,\n      whenKw: addComments(toKeywordNode(whenToken), {\n        trailing: _1\n      }),\n      thenKw: addComments(toKeywordNode(thenToken), {\n        trailing: _2\n      }),\n      condition: cond,\n      result: expr\n    })\n  }, {\n    \"name\": \"case_clause\",\n    \"symbols\": [lexer.has(\"ELSE\") ? {\n      type: \"ELSE\"\n    } : ELSE, \"_\", \"expression_chain_\"],\n    \"postprocess\": ([elseToken, _, expr]) => ({\n      type: \"case_else\" /* case_else */,\n      elseKw: addComments(toKeywordNode(elseToken), {\n        trailing: _\n      }),\n      result: expr\n    })\n  }, {\n    \"name\": \"comma$subexpression$1\",\n    \"symbols\": [lexer.has(\"COMMA\") ? {\n      type: \"COMMA\"\n    } : COMMA]\n  }, {\n    \"name\": \"comma\",\n    \"symbols\": [\"comma$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"comma\" /* comma */\n    })\n  }, {\n    \"name\": \"asterisk$subexpression$1\",\n    \"symbols\": [lexer.has(\"ASTERISK\") ? {\n      type: \"ASTERISK\"\n    } : ASTERISK]\n  }, {\n    \"name\": \"asterisk\",\n    \"symbols\": [\"asterisk$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"operator\" /* operator */,\n      text: token.text\n    })\n  }, {\n    \"name\": \"operator$subexpression$1\",\n    \"symbols\": [lexer.has(\"OPERATOR\") ? {\n      type: \"OPERATOR\"\n    } : OPERATOR]\n  }, {\n    \"name\": \"operator\",\n    \"symbols\": [\"operator$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"operator\" /* operator */,\n      text: token.text\n    })\n  }, {\n    \"name\": \"identifier$subexpression$1\",\n    \"symbols\": [lexer.has(\"IDENTIFIER\") ? {\n      type: \"IDENTIFIER\"\n    } : IDENTIFIER]\n  }, {\n    \"name\": \"identifier$subexpression$1\",\n    \"symbols\": [lexer.has(\"QUOTED_IDENTIFIER\") ? {\n      type: \"QUOTED_IDENTIFIER\"\n    } : QUOTED_IDENTIFIER]\n  }, {\n    \"name\": \"identifier$subexpression$1\",\n    \"symbols\": [lexer.has(\"VARIABLE\") ? {\n      type: \"VARIABLE\"\n    } : VARIABLE]\n  }, {\n    \"name\": \"identifier\",\n    \"symbols\": [\"identifier$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"identifier\" /* identifier */,\n      quoted: token.type !== \"IDENTIFIER\",\n      text: token.text\n    })\n  }, {\n    \"name\": \"parameter$subexpression$1\",\n    \"symbols\": [lexer.has(\"NAMED_PARAMETER\") ? {\n      type: \"NAMED_PARAMETER\"\n    } : NAMED_PARAMETER]\n  }, {\n    \"name\": \"parameter$subexpression$1\",\n    \"symbols\": [lexer.has(\"QUOTED_PARAMETER\") ? {\n      type: \"QUOTED_PARAMETER\"\n    } : QUOTED_PARAMETER]\n  }, {\n    \"name\": \"parameter$subexpression$1\",\n    \"symbols\": [lexer.has(\"NUMBERED_PARAMETER\") ? {\n      type: \"NUMBERED_PARAMETER\"\n    } : NUMBERED_PARAMETER]\n  }, {\n    \"name\": \"parameter$subexpression$1\",\n    \"symbols\": [lexer.has(\"POSITIONAL_PARAMETER\") ? {\n      type: \"POSITIONAL_PARAMETER\"\n    } : POSITIONAL_PARAMETER]\n  }, {\n    \"name\": \"parameter$subexpression$1\",\n    \"symbols\": [lexer.has(\"CUSTOM_PARAMETER\") ? {\n      type: \"CUSTOM_PARAMETER\"\n    } : CUSTOM_PARAMETER]\n  }, {\n    \"name\": \"parameter\",\n    \"symbols\": [\"parameter$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"parameter\" /* parameter */,\n      key: token.key,\n      text: token.text\n    })\n  }, {\n    \"name\": \"literal$subexpression$1\",\n    \"symbols\": [lexer.has(\"NUMBER\") ? {\n      type: \"NUMBER\"\n    } : NUMBER]\n  }, {\n    \"name\": \"literal$subexpression$1\",\n    \"symbols\": [lexer.has(\"STRING\") ? {\n      type: \"STRING\"\n    } : STRING]\n  }, {\n    \"name\": \"literal\",\n    \"symbols\": [\"literal$subexpression$1\"],\n    \"postprocess\": ([[token]]) => ({\n      type: \"literal\" /* literal */,\n      text: token.text\n    })\n  }, {\n    \"name\": \"keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"RESERVED_KEYWORD\") ? {\n      type: \"RESERVED_KEYWORD\"\n    } : RESERVED_KEYWORD]\n  }, {\n    \"name\": \"keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"RESERVED_PHRASE\") ? {\n      type: \"RESERVED_PHRASE\"\n    } : RESERVED_PHRASE]\n  }, {\n    \"name\": \"keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"RESERVED_JOIN\") ? {\n      type: \"RESERVED_JOIN\"\n    } : RESERVED_JOIN]\n  }, {\n    \"name\": \"keyword\",\n    \"symbols\": [\"keyword$subexpression$1\"],\n    \"postprocess\": ([[token]]) => toKeywordNode(token)\n  }, {\n    \"name\": \"data_type$subexpression$1\",\n    \"symbols\": [lexer.has(\"RESERVED_DATA_TYPE\") ? {\n      type: \"RESERVED_DATA_TYPE\"\n    } : RESERVED_DATA_TYPE]\n  }, {\n    \"name\": \"data_type\",\n    \"symbols\": [\"data_type$subexpression$1\"],\n    \"postprocess\": ([[token]]) => toDataTypeNode(token)\n  }, {\n    \"name\": \"data_type\",\n    \"symbols\": [lexer.has(\"RESERVED_PARAMETERIZED_DATA_TYPE\") ? {\n      type: \"RESERVED_PARAMETERIZED_DATA_TYPE\"\n    } : RESERVED_PARAMETERIZED_DATA_TYPE, \"_\", \"parenthesis\"],\n    \"postprocess\": ([nameToken, _, parens]) => ({\n      type: \"parameterized_data_type\" /* parameterized_data_type */,\n      dataType: addComments(toDataTypeNode(nameToken), {\n        trailing: _\n      }),\n      parenthesis: parens\n    })\n  }, {\n    \"name\": \"logic_operator$subexpression$1\",\n    \"symbols\": [lexer.has(\"AND\") ? {\n      type: \"AND\"\n    } : AND]\n  }, {\n    \"name\": \"logic_operator$subexpression$1\",\n    \"symbols\": [lexer.has(\"OR\") ? {\n      type: \"OR\"\n    } : OR]\n  }, {\n    \"name\": \"logic_operator$subexpression$1\",\n    \"symbols\": [lexer.has(\"XOR\") ? {\n      type: \"XOR\"\n    } : XOR]\n  }, {\n    \"name\": \"logic_operator\",\n    \"symbols\": [\"logic_operator$subexpression$1\"],\n    \"postprocess\": ([[token]]) => toKeywordNode(token)\n  }, {\n    \"name\": \"other_keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"WHEN\") ? {\n      type: \"WHEN\"\n    } : WHEN]\n  }, {\n    \"name\": \"other_keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"THEN\") ? {\n      type: \"THEN\"\n    } : THEN]\n  }, {\n    \"name\": \"other_keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"ELSE\") ? {\n      type: \"ELSE\"\n    } : ELSE]\n  }, {\n    \"name\": \"other_keyword$subexpression$1\",\n    \"symbols\": [lexer.has(\"END\") ? {\n      type: \"END\"\n    } : END]\n  }, {\n    \"name\": \"other_keyword\",\n    \"symbols\": [\"other_keyword$subexpression$1\"],\n    \"postprocess\": ([[token]]) => toKeywordNode(token)\n  }, {\n    \"name\": \"_$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"_$ebnf$1\",\n    \"symbols\": [\"_$ebnf$1\", \"comment\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"_\",\n    \"symbols\": [\"_$ebnf$1\"],\n    \"postprocess\": ([comments]) => comments\n  }, {\n    \"name\": \"comment\",\n    \"symbols\": [lexer.has(\"LINE_COMMENT\") ? {\n      type: \"LINE_COMMENT\"\n    } : LINE_COMMENT],\n    \"postprocess\": ([token]) => ({\n      type: \"line_comment\" /* line_comment */,\n      text: token.text,\n      precedingWhitespace: token.precedingWhitespace\n    })\n  }, {\n    \"name\": \"comment\",\n    \"symbols\": [lexer.has(\"BLOCK_COMMENT\") ? {\n      type: \"BLOCK_COMMENT\"\n    } : BLOCK_COMMENT],\n    \"postprocess\": ([token]) => ({\n      type: \"block_comment\" /* block_comment */,\n      text: token.text,\n      precedingWhitespace: token.precedingWhitespace\n    })\n  }, {\n    \"name\": \"comment\",\n    \"symbols\": [lexer.has(\"DISABLE_COMMENT\") ? {\n      type: \"DISABLE_COMMENT\"\n    } : DISABLE_COMMENT],\n    \"postprocess\": ([token]) => ({\n      type: \"disable_comment\" /* disable_comment */,\n      text: token.text,\n      precedingWhitespace: token.precedingWhitespace\n    })\n  }],\n  ParserStart: \"main\"\n};\nvar grammar_default = grammar;\n\n// src/parser/createParser.ts\nvar {\n  Parser: NearleyParser,\n  Grammar\n} = nearley;\nfunction createParser(tokenizer) {\n  let paramTypesOverrides = {};\n  const lexer2 = new LexerAdapter(chunk => [...disambiguateTokens(tokenizer.tokenize(chunk, paramTypesOverrides)), createEofToken(chunk.length)]);\n  const parser = new NearleyParser(Grammar.fromCompiled(grammar_default), {\n    lexer: lexer2\n  });\n  return {\n    parse: (sql2, paramTypes) => {\n      paramTypesOverrides = paramTypes;\n      const {\n        results\n      } = parser.feed(sql2);\n      if (results.length === 1) {\n        return results[0];\n      } else if (results.length === 0) {\n        throw new Error(\"Parse error: Invalid SQL\");\n      } else {\n        throw new Error(`Parse error: Ambiguous grammar\n${JSON.stringify(results, void 0, 2)}`);\n      }\n    }\n  };\n}\n\n// src/formatter/Layout.ts\nvar Layout = class {\n  constructor(indentation) {\n    this.indentation = indentation;\n    this.items = [];\n  }\n  /**\n   * Appends token strings and whitespace modifications to SQL string.\n   */\n  add(...items) {\n    for (const item of items) {\n      switch (item) {\n        case 0 /* SPACE */:\n          this.items.push(0 /* SPACE */);\n          break;\n        case 1 /* NO_SPACE */:\n          this.trimHorizontalWhitespace();\n          break;\n        case 2 /* NO_NEWLINE */:\n          this.trimWhitespace();\n          break;\n        case 3 /* NEWLINE */:\n          this.trimHorizontalWhitespace();\n          this.addNewline(3 /* NEWLINE */);\n          break;\n        case 4 /* MANDATORY_NEWLINE */:\n          this.trimHorizontalWhitespace();\n          this.addNewline(4 /* MANDATORY_NEWLINE */);\n          break;\n        case 5 /* INDENT */:\n          this.addIndentation();\n          break;\n        case 6 /* SINGLE_INDENT */:\n          this.items.push(6 /* SINGLE_INDENT */);\n          break;\n        default:\n          this.items.push(item);\n      }\n    }\n  }\n  trimHorizontalWhitespace() {\n    while (isHorizontalWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n  trimWhitespace() {\n    while (isRemovableWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n  addNewline(newline) {\n    if (this.items.length > 0) {\n      switch (last(this.items)) {\n        case 3 /* NEWLINE */:\n          this.items.pop();\n          this.items.push(newline);\n          break;\n        case 4 /* MANDATORY_NEWLINE */:\n          break;\n        default:\n          this.items.push(newline);\n          break;\n      }\n    }\n  }\n  addIndentation() {\n    for (let i = 0; i < this.indentation.getLevel(); i++) {\n      this.items.push(6 /* SINGLE_INDENT */);\n    }\n  }\n  /**\n   * Returns the final SQL string.\n   */\n  toString() {\n    return this.items.map(item => this.itemToString(item)).join(\"\");\n  }\n  /**\n   * Returns the internal layout data\n   */\n  getLayoutItems() {\n    return this.items;\n  }\n  itemToString(item) {\n    switch (item) {\n      case 0 /* SPACE */:\n        return \" \";\n      case 3 /* NEWLINE */:\n      case 4 /* MANDATORY_NEWLINE */:\n        return \"\\n\";\n      case 6 /* SINGLE_INDENT */:\n        return this.indentation.getSingleIndent();\n      default:\n        return item;\n    }\n  }\n};\nvar isHorizontalWhitespace = item => item === 0 /* SPACE */ || item === 6 /* SINGLE_INDENT */;\nvar isRemovableWhitespace = item => item === 0 /* SPACE */ || item === 6 /* SINGLE_INDENT */ || item === 3 /* NEWLINE */;\n\n// src/formatter/tabularStyle.ts\nfunction toTabularFormat(tokenText, indentStyle) {\n  if (indentStyle === \"standard\") {\n    return tokenText;\n  }\n  let tail = [];\n  if (tokenText.length >= 10 && tokenText.includes(\" \")) {\n    [tokenText, ...tail] = tokenText.split(\" \");\n  }\n  if (indentStyle === \"tabularLeft\") {\n    tokenText = tokenText.padEnd(9, \" \");\n  } else {\n    tokenText = tokenText.padStart(9, \" \");\n  }\n  return tokenText + [\"\", ...tail].join(\" \");\n}\nfunction isTabularToken(type) {\n  return isLogicalOperator(type) || type === \"RESERVED_CLAUSE\" /* RESERVED_CLAUSE */ || type === \"RESERVED_SELECT\" /* RESERVED_SELECT */ || type === \"RESERVED_SET_OPERATION\" /* RESERVED_SET_OPERATION */ || type === \"RESERVED_JOIN\" /* RESERVED_JOIN */ || type === \"LIMIT\" /* LIMIT */;\n}\n\n// src/formatter/Indentation.ts\nvar INDENT_TYPE_TOP_LEVEL = \"top-level\";\nvar INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\nvar Indentation = class {\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(indent) {\n    this.indent = indent;\n    this.indentTypes = [];\n  }\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent() {\n    return this.indent;\n  }\n  /**\n   * Returns current indentation level\n   */\n  getLevel() {\n    return this.indentTypes.length;\n  }\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n};\n\n// src/formatter/InlineLayout.ts\nvar InlineLayout = class extends Layout {\n  constructor(expressionWidth) {\n    super(new Indentation(\"\"));\n    this.expressionWidth = expressionWidth;\n    this.length = 0;\n    // Keeps track of the trailing whitespace,\n    // so that we can decrease length when encountering WS.NO_SPACE,\n    // but only when there actually is a space to remove.\n    this.trailingSpace = false;\n  }\n  add(...items) {\n    items.forEach(item => this.addToLength(item));\n    if (this.length > this.expressionWidth) {\n      throw new InlineLayoutError();\n    }\n    super.add(...items);\n  }\n  addToLength(item) {\n    if (typeof item === \"string\") {\n      this.length += item.length;\n      this.trailingSpace = false;\n    } else if (item === 4 /* MANDATORY_NEWLINE */ || item === 3 /* NEWLINE */) {\n      throw new InlineLayoutError();\n    } else if (item === 5 /* INDENT */ || item === 6 /* SINGLE_INDENT */ || item === 0 /* SPACE */) {\n      if (!this.trailingSpace) {\n        this.length++;\n        this.trailingSpace = true;\n      }\n    } else if (item === 2 /* NO_NEWLINE */ || item === 1 /* NO_SPACE */) {\n      if (this.trailingSpace) {\n        this.trailingSpace = false;\n        this.length--;\n      }\n    }\n  }\n};\nvar InlineLayoutError = class extends Error {};\n\n// src/formatter/ExpressionFormatter.ts\nvar ExpressionFormatter = class _ExpressionFormatter {\n  constructor({\n    cfg,\n    dialectCfg,\n    params,\n    layout,\n    inline = false\n  }) {\n    this.inline = false;\n    this.nodes = [];\n    this.index = -1;\n    this.cfg = cfg;\n    this.dialectCfg = dialectCfg;\n    this.inline = inline;\n    this.params = params;\n    this.layout = layout;\n  }\n  format(nodes) {\n    this.nodes = nodes;\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      this.formatNode(this.nodes[this.index]);\n    }\n    return this.layout;\n  }\n  formatNode(node) {\n    this.formatComments(node.leadingComments);\n    this.formatNodeWithoutComments(node);\n    this.formatComments(node.trailingComments);\n  }\n  formatNodeWithoutComments(node) {\n    switch (node.type) {\n      case \"function_call\" /* function_call */:\n        return this.formatFunctionCall(node);\n      case \"parameterized_data_type\" /* parameterized_data_type */:\n        return this.formatParameterizedDataType(node);\n      case \"array_subscript\" /* array_subscript */:\n        return this.formatArraySubscript(node);\n      case \"property_access\" /* property_access */:\n        return this.formatPropertyAccess(node);\n      case \"parenthesis\" /* parenthesis */:\n        return this.formatParenthesis(node);\n      case \"between_predicate\" /* between_predicate */:\n        return this.formatBetweenPredicate(node);\n      case \"case_expression\" /* case_expression */:\n        return this.formatCaseExpression(node);\n      case \"case_when\" /* case_when */:\n        return this.formatCaseWhen(node);\n      case \"case_else\" /* case_else */:\n        return this.formatCaseElse(node);\n      case \"clause\" /* clause */:\n        return this.formatClause(node);\n      case \"set_operation\" /* set_operation */:\n        return this.formatSetOperation(node);\n      case \"limit_clause\" /* limit_clause */:\n        return this.formatLimitClause(node);\n      case \"all_columns_asterisk\" /* all_columns_asterisk */:\n        return this.formatAllColumnsAsterisk(node);\n      case \"literal\" /* literal */:\n        return this.formatLiteral(node);\n      case \"identifier\" /* identifier */:\n        return this.formatIdentifier(node);\n      case \"parameter\" /* parameter */:\n        return this.formatParameter(node);\n      case \"operator\" /* operator */:\n        return this.formatOperator(node);\n      case \"comma\" /* comma */:\n        return this.formatComma(node);\n      case \"line_comment\" /* line_comment */:\n        return this.formatLineComment(node);\n      case \"block_comment\" /* block_comment */:\n        return this.formatBlockComment(node);\n      case \"disable_comment\" /* disable_comment */:\n        return this.formatBlockComment(node);\n      case \"data_type\" /* data_type */:\n        return this.formatDataType(node);\n      case \"keyword\" /* keyword */:\n        return this.formatKeywordNode(node);\n    }\n  }\n  formatFunctionCall(node) {\n    this.withComments(node.nameKw, () => {\n      this.layout.add(this.showFunctionKw(node.nameKw));\n    });\n    this.formatNode(node.parenthesis);\n  }\n  formatParameterizedDataType(node) {\n    this.withComments(node.dataType, () => {\n      this.layout.add(this.showDataType(node.dataType));\n    });\n    this.formatNode(node.parenthesis);\n  }\n  formatArraySubscript(node) {\n    let formattedArray;\n    switch (node.array.type) {\n      case \"data_type\" /* data_type */:\n        formattedArray = this.showDataType(node.array);\n        break;\n      case \"keyword\" /* keyword */:\n        formattedArray = this.showKw(node.array);\n        break;\n      default:\n        formattedArray = this.showIdentifier(node.array);\n        break;\n    }\n    this.withComments(node.array, () => {\n      this.layout.add(formattedArray);\n    });\n    this.formatNode(node.parenthesis);\n  }\n  formatPropertyAccess(node) {\n    this.formatNode(node.object);\n    this.layout.add(1 /* NO_SPACE */, node.operator);\n    this.formatNode(node.property);\n  }\n  formatParenthesis(node) {\n    const inlineLayout = this.formatInlineExpression(node.children);\n    if (inlineLayout) {\n      this.layout.add(node.openParen);\n      this.layout.add(...inlineLayout.getLayoutItems());\n      this.layout.add(1 /* NO_SPACE */, node.closeParen, 0 /* SPACE */);\n    } else {\n      this.layout.add(node.openParen, 3 /* NEWLINE */);\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(5 /* INDENT */);\n        this.layout = this.formatSubExpression(node.children);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(5 /* INDENT */);\n        this.layout = this.formatSubExpression(node.children);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, node.closeParen, 0 /* SPACE */);\n    }\n  }\n  formatBetweenPredicate(node) {\n    this.layout.add(this.showKw(node.betweenKw), 0 /* SPACE */);\n    this.layout = this.formatSubExpression(node.expr1);\n    this.layout.add(1 /* NO_SPACE */, 0 /* SPACE */, this.showNonTabularKw(node.andKw), 0 /* SPACE */);\n    this.layout = this.formatSubExpression(node.expr2);\n    this.layout.add(0 /* SPACE */);\n  }\n  formatCaseExpression(node) {\n    this.formatNode(node.caseKw);\n    this.layout.indentation.increaseBlockLevel();\n    this.layout = this.formatSubExpression(node.expr);\n    this.layout = this.formatSubExpression(node.clauses);\n    this.layout.indentation.decreaseBlockLevel();\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */);\n    this.formatNode(node.endKw);\n  }\n  formatCaseWhen(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */);\n    this.formatNode(node.whenKw);\n    this.layout = this.formatSubExpression(node.condition);\n    this.formatNode(node.thenKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n  formatCaseElse(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */);\n    this.formatNode(node.elseKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n  formatClause(node) {\n    if (this.isOnelineClause(node)) {\n      this.formatClauseInOnelineStyle(node);\n    } else if (isTabularStyle(this.cfg)) {\n      this.formatClauseInTabularStyle(node);\n    } else {\n      this.formatClauseInIndentedStyle(node);\n    }\n  }\n  isOnelineClause(node) {\n    if (isTabularStyle(this.cfg)) {\n      return this.dialectCfg.tabularOnelineClauses[node.nameKw.text];\n    } else {\n      return this.dialectCfg.onelineClauses[node.nameKw.text];\n    }\n  }\n  formatClauseInIndentedStyle(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node.nameKw), 3 /* NEWLINE */);\n    this.layout.indentation.increaseTopLevel();\n    this.layout.add(5 /* INDENT */);\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n  formatClauseInOnelineStyle(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node.nameKw), 0 /* SPACE */);\n    this.layout = this.formatSubExpression(node.children);\n  }\n  formatClauseInTabularStyle(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node.nameKw), 0 /* SPACE */);\n    this.layout.indentation.increaseTopLevel();\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n  formatSetOperation(node) {\n    this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node.nameKw), 3 /* NEWLINE */);\n    this.layout.add(5 /* INDENT */);\n    this.layout = this.formatSubExpression(node.children);\n  }\n  formatLimitClause(node) {\n    this.withComments(node.limitKw, () => {\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node.limitKw));\n    });\n    this.layout.indentation.increaseTopLevel();\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(0 /* SPACE */);\n    } else {\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */);\n    }\n    if (node.offset) {\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(1 /* NO_SPACE */, \",\", 0 /* SPACE */);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n  formatAllColumnsAsterisk(_node) {\n    this.layout.add(\"*\", 0 /* SPACE */);\n  }\n  formatLiteral(node) {\n    this.layout.add(node.text, 0 /* SPACE */);\n  }\n  formatIdentifier(node) {\n    this.layout.add(this.showIdentifier(node), 0 /* SPACE */);\n  }\n  formatParameter(node) {\n    this.layout.add(this.params.get(node), 0 /* SPACE */);\n  }\n  formatOperator({\n    text\n  }) {\n    if (this.cfg.denseOperators || this.dialectCfg.alwaysDenseOperators.includes(text)) {\n      this.layout.add(1 /* NO_SPACE */, text);\n    } else if (text === \":\") {\n      this.layout.add(1 /* NO_SPACE */, text, 0 /* SPACE */);\n    } else {\n      this.layout.add(text, 0 /* SPACE */);\n    }\n  }\n  formatComma(_node) {\n    if (!this.inline) {\n      this.layout.add(1 /* NO_SPACE */, \",\", 3 /* NEWLINE */, 5 /* INDENT */);\n    } else {\n      this.layout.add(1 /* NO_SPACE */, \",\", 0 /* SPACE */);\n    }\n  }\n  withComments(node, fn) {\n    this.formatComments(node.leadingComments);\n    fn();\n    this.formatComments(node.trailingComments);\n  }\n  formatComments(comments) {\n    if (!comments) {\n      return;\n    }\n    comments.forEach(com => {\n      if (com.type === \"line_comment\" /* line_comment */) {\n        this.formatLineComment(com);\n      } else {\n        this.formatBlockComment(com);\n      }\n    });\n  }\n  formatLineComment(node) {\n    if (isMultiline(node.precedingWhitespace || \"\")) {\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, node.text, 4 /* MANDATORY_NEWLINE */, 5 /* INDENT */);\n    } else if (this.layout.getLayoutItems().length > 0) {\n      this.layout.add(2 /* NO_NEWLINE */, 0 /* SPACE */, node.text, 4 /* MANDATORY_NEWLINE */, 5 /* INDENT */);\n    } else {\n      this.layout.add(node.text, 4 /* MANDATORY_NEWLINE */, 5 /* INDENT */);\n    }\n  }\n  formatBlockComment(node) {\n    if (node.type === \"block_comment\" /* block_comment */ && this.isMultilineBlockComment(node)) {\n      this.splitBlockComment(node.text).forEach(line => {\n        this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, line);\n      });\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */);\n    } else {\n      this.layout.add(node.text, 0 /* SPACE */);\n    }\n  }\n  isMultilineBlockComment(node) {\n    return isMultiline(node.text) || isMultiline(node.precedingWhitespace || \"\");\n  }\n  isDocComment(comment) {\n    const lines = comment.split(/\\n/);\n    return (\n      // first line starts with /* or /**\n      /^\\/\\*\\*?$/.test(lines[0]) &&\n      // intermediate lines start with *\n      lines.slice(1, lines.length - 1).every(line => /^\\s*\\*/.test(line)) &&\n      // last line ends with */\n      /^\\s*\\*\\/$/.test(last(lines))\n    );\n  }\n  // Breaks up block comment to multiple lines.\n  // For example this doc-comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  // However, a normal comment (non-doc-comment) like this:\n  //\n  //   ..../*\n  //   ....Some description here\n  //   ....*/\n  //\n  // gets broken to this array (no leading spaces):\n  //\n  //   [ '/*',\n  //     'Some description here',\n  //     '*/' ]\n  //\n  splitBlockComment(comment) {\n    if (this.isDocComment(comment)) {\n      return comment.split(/\\n/).map(line => {\n        if (/^\\s*\\*/.test(line)) {\n          return \" \" + line.replace(/^\\s*/, \"\");\n        } else {\n          return line;\n        }\n      });\n    } else {\n      return comment.split(/\\n/).map(line => line.replace(/^\\s*/, \"\"));\n    }\n  }\n  formatSubExpression(nodes) {\n    return new _ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialectCfg,\n      params: this.params,\n      layout: this.layout,\n      inline: this.inline\n    }).format(nodes);\n  }\n  formatInlineExpression(nodes) {\n    const oldParamIndex = this.params.getPositionalParameterIndex();\n    try {\n      return new _ExpressionFormatter({\n        cfg: this.cfg,\n        dialectCfg: this.dialectCfg,\n        params: this.params,\n        layout: new InlineLayout(this.cfg.expressionWidth),\n        inline: true\n      }).format(nodes);\n    } catch (e) {\n      if (e instanceof InlineLayoutError) {\n        this.params.setPositionalParameterIndex(oldParamIndex);\n        return void 0;\n      } else {\n        throw e;\n      }\n    }\n  }\n  formatKeywordNode(node) {\n    switch (node.tokenType) {\n      case \"RESERVED_JOIN\" /* RESERVED_JOIN */:\n        return this.formatJoin(node);\n      case \"AND\" /* AND */:\n      case \"OR\" /* OR */:\n      case \"XOR\" /* XOR */:\n        return this.formatLogicalOperator(node);\n      default:\n        return this.formatKeyword(node);\n    }\n  }\n  formatJoin(node) {\n    if (isTabularStyle(this.cfg)) {\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node), 0 /* SPACE */);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node), 0 /* SPACE */);\n    }\n  }\n  formatKeyword(node) {\n    this.layout.add(this.showKw(node), 0 /* SPACE */);\n  }\n  formatLogicalOperator(node) {\n    if (this.cfg.logicalOperatorNewline === \"before\") {\n      if (isTabularStyle(this.cfg)) {\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node), 0 /* SPACE */);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(3 /* NEWLINE */, 5 /* INDENT */, this.showKw(node), 0 /* SPACE */);\n      }\n    } else {\n      this.layout.add(this.showKw(node), 3 /* NEWLINE */, 5 /* INDENT */);\n    }\n  }\n  formatDataType(node) {\n    this.layout.add(this.showDataType(node), 0 /* SPACE */);\n  }\n  showKw(node) {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularKw(node);\n    }\n  }\n  // Like showKw(), but skips tabular formatting\n  showNonTabularKw(node) {\n    switch (this.cfg.keywordCase) {\n      case \"preserve\":\n        return equalizeWhitespace(node.raw);\n      case \"upper\":\n        return node.text;\n      case \"lower\":\n        return node.text.toLowerCase();\n    }\n  }\n  showFunctionKw(node) {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularFunctionKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularFunctionKw(node);\n    }\n  }\n  // Like showFunctionKw(), but skips tabular formatting\n  showNonTabularFunctionKw(node) {\n    switch (this.cfg.functionCase) {\n      case \"preserve\":\n        return equalizeWhitespace(node.raw);\n      case \"upper\":\n        return node.text;\n      case \"lower\":\n        return node.text.toLowerCase();\n    }\n  }\n  showIdentifier(node) {\n    if (node.quoted) {\n      return node.text;\n    } else {\n      switch (this.cfg.identifierCase) {\n        case \"preserve\":\n          return node.text;\n        case \"upper\":\n          return node.text.toUpperCase();\n        case \"lower\":\n          return node.text.toLowerCase();\n      }\n    }\n  }\n  showDataType(node) {\n    switch (this.cfg.dataTypeCase) {\n      case \"preserve\":\n        return equalizeWhitespace(node.raw);\n      case \"upper\":\n        return node.text;\n      case \"lower\":\n        return node.text.toLowerCase();\n    }\n  }\n};\n\n// src/formatter/Formatter.ts\nvar Formatter = class {\n  constructor(dialect, cfg) {\n    this.dialect = dialect;\n    this.cfg = cfg;\n    this.params = new Params(this.cfg.params);\n  }\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  format(query) {\n    const ast = this.parse(query);\n    const formattedQuery = this.formatAst(ast);\n    return formattedQuery.trimEnd();\n  }\n  parse(query) {\n    return createParser(this.dialect.tokenizer).parse(query, this.cfg.paramTypes || {});\n  }\n  formatAst(statements) {\n    return statements.map(stat => this.formatStatement(stat)).join(\"\\n\".repeat(this.cfg.linesBetweenQueries + 1));\n  }\n  formatStatement(statement) {\n    const layout = new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialect.formatOptions,\n      params: this.params,\n      layout: new Layout(new Indentation(indentString(this.cfg)))\n    }).format(statement.children);\n    if (!statement.hasSemicolon) {} else if (this.cfg.newlineBeforeSemicolon) {\n      layout.add(3 /* NEWLINE */, \";\");\n    } else {\n      layout.add(2 /* NO_NEWLINE */, \";\");\n    }\n    return layout.toString();\n  }\n};\n\n// src/validateConfig.ts\nvar ConfigError = class extends Error {};\nfunction validateConfig(cfg) {\n  const removedOptions = [\"multilineLists\", \"newlineBeforeOpenParen\", \"newlineBeforeCloseParen\", \"aliasAs\", \"commaPosition\", \"tabulateAlias\"];\n  for (const optionName of removedOptions) {\n    if (optionName in cfg) {\n      throw new ConfigError(`${optionName} config is no more supported.`);\n    }\n  }\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(`expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`);\n  }\n  if (cfg.params && !validateParams(cfg.params)) {\n    console.warn('WARNING: All \"params\" option values should be strings.');\n  }\n  if (cfg.paramTypes && !validateParamTypes(cfg.paramTypes)) {\n    throw new ConfigError(\"Empty regex given in custom paramTypes. That would result in matching infinite amount of parameters.\");\n  }\n  return cfg;\n}\nfunction validateParams(params) {\n  const paramValues = params instanceof Array ? params : Object.values(params);\n  return paramValues.every(p => typeof p === \"string\");\n}\nfunction validateParamTypes(paramTypes) {\n  if (paramTypes.custom && Array.isArray(paramTypes.custom)) {\n    return paramTypes.custom.every(p => p.regex !== \"\");\n  }\n  return true;\n}\n\n// src/sqlFormatter.ts\nvar dialectNameMap = {\n  bigquery: \"bigquery\",\n  db2: \"db2\",\n  db2i: \"db2i\",\n  hive: \"hive\",\n  mariadb: \"mariadb\",\n  mysql: \"mysql\",\n  n1ql: \"n1ql\",\n  plsql: \"plsql\",\n  postgresql: \"postgresql\",\n  redshift: \"redshift\",\n  spark: \"spark\",\n  sqlite: \"sqlite\",\n  sql: \"sql\",\n  tidb: \"tidb\",\n  trino: \"trino\",\n  transactsql: \"transactsql\",\n  tsql: \"transactsql\",\n  // alias for transactsq\n  singlestoredb: \"singlestoredb\",\n  snowflake: \"snowflake\"\n};\nvar supportedDialects = Object.keys(dialectNameMap);\nvar defaultOptions = {\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: \"preserve\",\n  identifierCase: \"preserve\",\n  dataTypeCase: \"preserve\",\n  functionCase: \"preserve\",\n  indentStyle: \"standard\",\n  logicalOperatorNewline: \"before\",\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false\n};\nvar format = (query, cfg = {}) => {\n  if (typeof cfg.language === \"string\" && !supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n  const canonicalDialectName = dialectNameMap[cfg.language || \"sql\"];\n  return formatDialect(query, __spreadProps(__spreadValues({}, cfg), {\n    dialect: allDialects_exports[canonicalDialectName]\n  }));\n};\nvar formatDialect = (query, _a) => {\n  var _b = _a,\n    {\n      dialect\n    } = _b,\n    cfg = __objRest(_b, [\"dialect\"]);\n  if (typeof query !== \"string\") {\n    throw new Error(\"Invalid query argument. Expected string, instead got \" + typeof query);\n  }\n  const options = validateConfig(__spreadValues(__spreadValues({}, defaultOptions), cfg));\n  return new Formatter(createDialect(dialect), options).format(query);\n};\nexport { ConfigError, bigquery, db2, db2i, expandPhrases, format, formatDialect, hive, mariadb, mysql, n1ql, plsql, postgresql, redshift, singlestoredb, snowflake, spark, sql, sqlite, supportedDialects, tidb, transactsql, trino };","map":{"version":3,"names":["allDialects_exports","__export","bigquery","db2","db2i","hive","mariadb","mysql","n1ql","plsql","postgresql","redshift","singlestoredb","snowflake","spark","sql","sqlite","tidb","transactsql","trino","expandPhrases","phrases","flatMap","expandSinglePhrase","phrase","buildCombinations","parsePhrase","map","stripExtraWhitespace","text","replace","trim","type","items","parseAlteration","index","expectClosing","alterations","term","newIndex","parseConcatenation","push","Error","length","parseTerm","parseMandatoryBlock","parseOptionalBlock","word","test","node","reduce","stringCombinations","xs","ys","results","x","y","TokenType","TokenType2","createEofToken","raw","start","EOF_TOKEN","Infinity","testToken","compareToken","token","isToken","ARRAY","BY","SET","STRUCT","WINDOW","VALUES","isReserved","isLogicalOperator","functions","keywords","dataTypes","reservedSelect","reservedClauses","standardOnelineClauses","tabularOnelineClauses","reservedSetOperations","reservedJoins","reservedPhrases","name","tokenizerOptions","reservedKeywords","reservedDataTypes","reservedFunctionNames","extraParens","stringTypes","quote","prefixes","requirePrefix","identTypes","identChars","dashes","paramTypes","positional","named","quoted","variableTypes","regex","String","lineCommentTypes","operators","postProcess","formatOptions","onelineClauses","tokens","detectArraySubscripts","combineParameterizedTypes","prevToken","__spreadProps","__spreadValues","_a","processed","i","endIndex","findClosingAngleBracketIndex","typeDefTokens","slice","formatTypeDefToken","join","key","startIndex","level","functions2","keywords2","dataTypes2","reservedSelect2","reservedClauses2","standardOnelineClauses2","tabularOnelineClauses2","reservedSetOperations2","reservedJoins2","reservedPhrases2","first","rest","paramChars","functions3","keywords3","dataTypes3","reservedSelect3","reservedClauses3","standardOnelineClauses3","tabularOnelineClauses3","reservedSetOperations3","reservedJoins3","reservedPhrases3","nestedBlockComments","functions4","keywords4","dataTypes4","reservedSelect4","reservedClauses4","standardOnelineClauses4","tabularOnelineClauses4","reservedSetOperations4","reservedJoins4","reservedPhrases4","postProcess2","nextToken","keywords5","dataTypes5","functions5","reservedSelect5","reservedClauses5","standardOnelineClauses5","tabularOnelineClauses5","reservedSetOperations5","reservedJoins5","reservedPhrases5","supportsXor","allowFirstCharNumber","keywords6","dataTypes6","functions6","reservedSelect6","reservedClauses6","standardOnelineClauses6","tabularOnelineClauses6","reservedSetOperations6","reservedJoins6","reservedPhrases6","keywords7","dataTypes7","functions7","reservedSelect7","reservedClauses7","standardOnelineClauses7","tabularOnelineClauses7","reservedSetOperations7","reservedJoins7","reservedPhrases7","functions8","keywords8","dataTypes8","reservedSelect8","reservedClauses8","reservedSetOperations8","reservedJoins8","reservedPhrases8","numbered","keywords9","dataTypes9","functions9","reservedSelect9","reservedClauses9","standardOnelineClauses8","tabularOnelineClauses8","reservedSetOperations9","reservedJoins9","reservedPhrases9","postProcess3","alwaysDenseOperators","previousReservedToken","functions10","keywords10","dataTypes10","reservedSelect10","reservedClauses10","standardOnelineClauses9","tabularOnelineClauses9","reservedSetOperations10","reservedJoins10","reservedPhrases10","operatorKeyword","functions11","keywords11","dataTypes11","reservedSelect11","reservedClauses11","standardOnelineClauses10","tabularOnelineClauses10","reservedSetOperations11","reservedJoins11","reservedPhrases11","keywords12","dataTypes12","functions12","reservedSelect12","reservedClauses12","standardOnelineClauses11","tabularOnelineClauses11","reservedSetOperations12","reservedJoins12","reservedPhrases12","postProcess4","functions13","keywords13","dataTypes13","reservedSelect13","reservedClauses13","standardOnelineClauses12","tabularOnelineClauses12","reservedSetOperations13","reservedJoins13","reservedPhrases13","functions14","keywords14","dataTypes14","reservedSelect14","reservedClauses14","standardOnelineClauses13","tabularOnelineClauses13","reservedSetOperations14","reservedJoins14","reservedPhrases14","functions15","keywords15","dataTypes15","reservedSelect15","reservedClauses15","standardOnelineClauses14","tabularOnelineClauses14","reservedSetOperations15","reservedJoins15","reservedPhrases15","functions16","keywords16","dataTypes16","reservedSelect16","reservedClauses16","standardOnelineClauses15","tabularOnelineClauses15","reservedSetOperations16","reservedJoins16","reservedPhrases16","propertyAccessOperators","keywords17","dataTypes17","functions17","reservedSelect17","reservedClauses17","standardOnelineClauses16","tabularOnelineClauses16","reservedSetOperations17","reservedJoins17","reservedPhrases17","functions18","keywords18","dataTypes18","reservedSelect18","reservedClauses18","standardOnelineClauses17","tabularOnelineClauses17","reservedSetOperations18","reservedJoins18","reservedPhrases18","last","arr","sortByLengthDesc","strings","sort","a","b","localeCompare","equalizeWhitespace","s","isMultiline","escapeRegExp","string2","WHITESPACE_REGEX","patternToRegex","pattern","RegExp","toCaseInsensitivePattern","prefix","split","char","toUpperCase","toLowerCase","withDashes","prefixesPattern","lineComment","parenthesis","kind","parens","pair","operator","rejectIdentCharsPattern","reservedWord","avoidIdentChars","reservedKeywordsPattern","parameter","typesRegex","buildQStringPatterns","specialDelimiterMap","singlePattern","patternList","Object","entries","left","right","specialDelimiters","keys","standardDelimiterPattern","qStringPattern","quotePatterns","singleQuotePattern","quoteTypes","variable","varTypes","varType","stringPattern","string","identifier","specialChars","identifierPattern","letter","number","firstChars","restChars","lineColFromIndex","source","lines","line","col","TokenizerEngine","constructor","rules","dialectName","input","tokenize","precedingWhitespace","getWhitespace","getNextToken","createParseError","dialectInfo","lastIndex","matches","exec","rule","match","matchedText","START","ANY_CHAR","END2","NestedComment","result","nestLevel","matchSection","Tokenizer","cfg","rulesBeforeParams","buildRulesBeforeParams","rulesAfterParams","buildRulesAfterParams","paramTypesOverrides","buildParamRules","_b","validRules","toCanonical","includes","_c","_d","_e","custom","v","tokenKey","quoteChar","customParam","_a2","filter","Boolean","cache","Map","createDialect","options","dialect","get","dialectFromOptions","set","dialectOptions","tokenizer","processDialectFormatOptions","fromEntries","indentString","indentStyle","repeat","useTabs","tabWidth","isTabularStyle","Params","params","getPositionalParameterIndex","setPositionalParameterIndex","nearley","disambiguateTokens","propertyNameKeywordToIdent","funcNameToIdent","dataTypeToParameterizedDataType","identToArrayIdent","dataTypeToArrayKeyword","prevNonCommentToken","nextNonCommentToken","isOpenParen","isOpenBracket","dir","isComment","t","LexerAdapter","reset","chunk","_info","next","save","formatError","has","id","d","lexer","unwrap","el","toKeywordNode","tokenType","toDataTypeNode","addComments","leading","trailing","leadingComments","trailingComments","addCommentsToArray","nodes","lead","last2","grammar","Lexer","ParserRules","concat","postprocess","statements","hasSemicolon","children","DELIMITER","EOF","delimiter","expressions","clauses","COMMA","LIMIT","limitToken","_","exp1","optional","comma","exp2","limitKw","offset","count","RESERVED_SELECT","nameToken","exp","nameKw","ASTERISK","RESERVED_CLAUSE","RESERVED_SET_OPERATION","expr","chain","ARRAY_IDENTIFIER","arrayToken","brackets","array","ARRAY_KEYWORD","RESERVED_FUNCTION_NAME","open","close","openParen","closeParen","PROPERTY_ACCESS_OPERATOR","object","_1","dot","_2","property","BETWEEN","AND","betweenToken","expr1","andToken","_3","expr2","betweenKw","andKw","CASE","END","caseToken","endToken","caseKw","endKw","WHEN","THEN","whenToken","cond","thenToken","whenKw","thenKw","condition","ELSE","elseToken","elseKw","OPERATOR","IDENTIFIER","QUOTED_IDENTIFIER","VARIABLE","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","CUSTOM_PARAMETER","NUMBER","STRING","RESERVED_KEYWORD","RESERVED_PHRASE","RESERVED_JOIN","RESERVED_DATA_TYPE","RESERVED_PARAMETERIZED_DATA_TYPE","dataType","OR","XOR","comments","LINE_COMMENT","BLOCK_COMMENT","DISABLE_COMMENT","ParserStart","grammar_default","Parser","NearleyParser","Grammar","createParser","lexer2","parser","fromCompiled","parse","sql2","feed","JSON","stringify","Layout","indentation","add","item","trimHorizontalWhitespace","trimWhitespace","addNewline","addIndentation","isHorizontalWhitespace","pop","isRemovableWhitespace","newline","getLevel","toString","itemToString","getLayoutItems","getSingleIndent","toTabularFormat","tokenText","tail","padEnd","padStart","isTabularToken","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","indentTypes","increaseTopLevel","increaseBlockLevel","decreaseTopLevel","decreaseBlockLevel","InlineLayout","expressionWidth","trailingSpace","forEach","addToLength","InlineLayoutError","ExpressionFormatter","_ExpressionFormatter","dialectCfg","layout","inline","format","formatNode","formatComments","formatNodeWithoutComments","formatFunctionCall","formatParameterizedDataType","formatArraySubscript","formatPropertyAccess","formatParenthesis","formatBetweenPredicate","formatCaseExpression","formatCaseWhen","formatCaseElse","formatClause","formatSetOperation","formatLimitClause","formatAllColumnsAsterisk","formatLiteral","formatIdentifier","formatParameter","formatOperator","formatComma","formatLineComment","formatBlockComment","formatDataType","formatKeywordNode","withComments","showFunctionKw","showDataType","formattedArray","showKw","showIdentifier","inlineLayout","formatInlineExpression","formatSubExpression","showNonTabularKw","isOnelineClause","formatClauseInOnelineStyle","formatClauseInTabularStyle","formatClauseInIndentedStyle","_node","denseOperators","fn","com","isMultilineBlockComment","splitBlockComment","isDocComment","comment","every","oldParamIndex","e","formatJoin","formatLogicalOperator","formatKeyword","logicalOperatorNewline","keywordCase","showNonTabularFunctionKw","functionCase","identifierCase","dataTypeCase","Formatter","query","ast","formattedQuery","formatAst","trimEnd","stat","formatStatement","linesBetweenQueries","statement","newlineBeforeSemicolon","ConfigError","validateConfig","removedOptions","optionName","validateParams","console","warn","validateParamTypes","paramValues","Array","values","p","isArray","dialectNameMap","tsql","supportedDialects","defaultOptions","language","canonicalDialectName","formatDialect","__objRest"],"sources":["/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/allDialects.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/expandPhrases.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/token.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/bigquery/bigquery.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/bigquery/bigquery.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/bigquery/bigquery.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2/db2.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2/db2.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2/db2.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2i/db2i.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2i/db2i.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/db2i/db2i.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/hive/hive.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/hive/hive.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/hive/hive.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mariadb/likeMariaDb.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mariadb/mariadb.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mariadb/mariadb.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mariadb/mariadb.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mysql/mysql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mysql/mysql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/mysql/mysql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/tidb/tidb.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/tidb/tidb.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/tidb/tidb.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/n1ql/n1ql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/n1ql/n1ql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/n1ql/n1ql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/plsql/plsql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/plsql/plsql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/plsql/plsql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/postgresql/postgresql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/postgresql/postgresql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/postgresql/postgresql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/redshift/redshift.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/redshift/redshift.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/redshift/redshift.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/spark/spark.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/spark/spark.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/spark/spark.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sqlite/sqlite.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sqlite/sqlite.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sqlite/sqlite.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sql/sql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sql/sql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/sql/sql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/trino/trino.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/trino/trino.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/trino/trino.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/transactsql/transactsql.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/transactsql/transactsql.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/transactsql/transactsql.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/singlestoredb/singlestoredb.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/singlestoredb/singlestoredb.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/singlestoredb/singlestoredb.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/snowflake/snowflake.functions.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/snowflake/snowflake.keywords.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/languages/snowflake/snowflake.formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/utils.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/regexUtil.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/regexFactory.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/lineColFromIndex.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/TokenizerEngine.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/NestedComment.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/Tokenizer.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/dialect.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/config.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/Params.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/parser/createParser.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/lexer/disambiguateTokens.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/parser/LexerAdapter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/parser/grammar.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/Layout.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/tabularStyle.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/Indentation.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/InlineLayout.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/ExpressionFormatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/formatter/Formatter.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/validateConfig.ts","/Users/yuyangzhang/Desktop/llm-sql/node_modules/sql-formatter/src/sqlFormatter.ts"],"sourcesContent":["export { bigquery } from './languages/bigquery/bigquery.formatter.js';\nexport { db2 } from './languages/db2/db2.formatter.js';\nexport { db2i } from './languages/db2i/db2i.formatter.js';\nexport { hive } from './languages/hive/hive.formatter.js';\nexport { mariadb } from './languages/mariadb/mariadb.formatter.js';\nexport { mysql } from './languages/mysql/mysql.formatter.js';\nexport { tidb } from './languages/tidb/tidb.formatter.js';\nexport { n1ql } from './languages/n1ql/n1ql.formatter.js';\nexport { plsql } from './languages/plsql/plsql.formatter.js';\nexport { postgresql } from './languages/postgresql/postgresql.formatter.js';\nexport { redshift } from './languages/redshift/redshift.formatter.js';\nexport { spark } from './languages/spark/spark.formatter.js';\nexport { sqlite } from './languages/sqlite/sqlite.formatter.js';\nexport { sql } from './languages/sql/sql.formatter.js';\nexport { trino } from './languages/trino/trino.formatter.js';\nexport { transactsql } from './languages/transactsql/transactsql.formatter.js';\nexport { singlestoredb } from './languages/singlestoredb/singlestoredb.formatter.js';\nexport { snowflake } from './languages/snowflake/snowflake.formatter.js';\n","/**\n * Performs expandSinglePhrase() on array\n */\nexport const expandPhrases = (phrases: string[]): string[] => phrases.flatMap(expandSinglePhrase);\n\n/**\n * Expands a syntax description like\n *\n *     \"CREATE [OR REPLACE] [TEMP|TEMPORARY] TABLE\"\n *\n * into an array of all possible combinations like:\n *\n *     [ \"CREATE TABLE\",\n *       \"CREATE TEMP TABLE\",\n *       \"CREATE TEMPORARY TABLE\",\n *       \"CREATE OR REPLACE TABLE\",\n *       \"CREATE OR REPLACE TEMP TABLE\",\n *       \"CREATE OR REPLACE TEMPORARY TABLE\" ]\n *\n * The [] and {} parenthesis can also be nested like\n *\n *     \"FOR [OF {UNIQUE | MANDATORY} TABLES]\"\n *\n * resulting in:\n *\n *     [ \"FOR\",\n *       \"FOR OF UNIQUE TABLES\",\n *       \"FOR OF MANDATORY TABLES\" ]\n */\nexport const expandSinglePhrase = (phrase: string): string[] =>\n  buildCombinations(parsePhrase(phrase)).map(stripExtraWhitespace);\n\nconst stripExtraWhitespace = (text: string) => text.replace(/ +/g, ' ').trim();\n\nconst parsePhrase = (text: string): Phrase => ({\n  type: 'mandatory_block',\n  items: parseAlteration(text, 0)[0],\n});\n\ntype Phrase = string | MandatoryBlock | OptionalBlock | Concatenation;\ntype Concatenation = { type: 'concatenation'; items: Phrase[] };\ntype MandatoryBlock = { type: 'mandatory_block'; items: Phrase[] };\ntype OptionalBlock = { type: 'optional_block'; items: Phrase[] };\n\nconst parseAlteration = (\n  text: string,\n  index: number,\n  expectClosing?: ']' | '}'\n): [Phrase[], number] => {\n  const alterations: Phrase[] = [];\n  while (text[index]) {\n    const [term, newIndex] = parseConcatenation(text, index);\n    alterations.push(term);\n    index = newIndex;\n    if (text[index] === '|') {\n      index++;\n    } else if (text[index] === '}' || text[index] === ']') {\n      if (expectClosing !== text[index]) {\n        throw new Error(`Unbalanced parenthesis in: ${text}`);\n      }\n      index++;\n      return [alterations, index];\n    } else if (index === text.length) {\n      if (expectClosing) {\n        throw new Error(`Unbalanced parenthesis in: ${text}`);\n      }\n      return [alterations, index];\n    } else {\n      throw new Error(`Unexpected \"${text[index]}\"`);\n    }\n  }\n  return [alterations, index];\n};\n\nconst parseConcatenation = (text: string, index: number): [Phrase, number] => {\n  const items: Phrase[] = [];\n  while (true) {\n    const [term, newIndex] = parseTerm(text, index);\n    if (term) {\n      items.push(term);\n      index = newIndex;\n    } else {\n      break;\n    }\n  }\n  return items.length === 1 ? [items[0], index] : [{ type: 'concatenation', items }, index];\n};\n\nconst parseTerm = (text: string, index: number): [Phrase, number] => {\n  if (text[index] === '{') {\n    return parseMandatoryBlock(text, index + 1);\n  } else if (text[index] === '[') {\n    return parseOptionalBlock(text, index + 1);\n  } else {\n    let word = '';\n    while (text[index] && /[A-Za-z0-9_ ]/.test(text[index])) {\n      word += text[index];\n      index++;\n    }\n    return [word, index];\n  }\n};\n\nconst parseMandatoryBlock = (text: string, index: number): [MandatoryBlock, number] => {\n  const [items, newIndex] = parseAlteration(text, index, '}');\n  return [{ type: 'mandatory_block', items }, newIndex];\n};\n\nconst parseOptionalBlock = (text: string, index: number): [OptionalBlock, number] => {\n  const [items, newIndex] = parseAlteration(text, index, ']');\n  return [{ type: 'optional_block', items }, newIndex];\n};\n\nconst buildCombinations = (node: Phrase): string[] => {\n  if (typeof node === 'string') {\n    return [node];\n  } else if (node.type === 'concatenation') {\n    return node.items.map(buildCombinations).reduce(stringCombinations, ['']);\n  } else if (node.type === 'mandatory_block') {\n    return node.items.flatMap(buildCombinations);\n  } else if (node.type === 'optional_block') {\n    return ['', ...node.items.flatMap(buildCombinations)];\n  } else {\n    throw new Error(`Unknown node type: ${node}`);\n  }\n};\n\nconst stringCombinations = (xs: string[], ys: string[]): string[] => {\n  const results: string[] = [];\n  for (const x of xs) {\n    for (const y of ys) {\n      results.push(x + y);\n    }\n  }\n  return results;\n};\n","/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  QUOTED_IDENTIFIER = 'QUOTED_IDENTIFIER',\n  IDENTIFIER = 'IDENTIFIER',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_DATA_TYPE = 'RESERVED_DATA_TYPE',\n  RESERVED_PARAMETERIZED_DATA_TYPE = 'RESERVED_PARAMETERIZED_DATA_TYPE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_FUNCTION_NAME = 'RESERVED_FUNCTION_NAME',\n  RESERVED_PHRASE = 'RESERVED_PHRASE',\n  RESERVED_SET_OPERATION = 'RESERVED_SET_OPERATION',\n  RESERVED_CLAUSE = 'RESERVED_CLAUSE',\n  RESERVED_SELECT = 'RESERVED_SELECT',\n  RESERVED_JOIN = 'RESERVED_JOIN',\n  ARRAY_IDENTIFIER = 'ARRAY_IDENTIFIER', // IDENTIFIER token in front of [\n  ARRAY_KEYWORD = 'ARRAY_KEYWORD', // RESERVED_DATA_TYPE token in front of [\n  CASE = 'CASE',\n  END = 'END',\n  WHEN = 'WHEN',\n  ELSE = 'ELSE',\n  THEN = 'THEN',\n  LIMIT = 'LIMIT',\n  BETWEEN = 'BETWEEN',\n  AND = 'AND',\n  OR = 'OR',\n  XOR = 'XOR',\n  OPERATOR = 'OPERATOR',\n  COMMA = 'COMMA',\n  ASTERISK = 'ASTERISK', // *\n  PROPERTY_ACCESS_OPERATOR = 'PROPERTY_ACCESS_OPERATOR', // Usually \".\"\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  // Text between /* sql-formatter-disable */ and /* sql-formatter-enable */\n  DISABLE_COMMENT = 'DISABLE_COMMENT',\n  NUMBER = 'NUMBER',\n  NAMED_PARAMETER = 'NAMED_PARAMETER',\n  QUOTED_PARAMETER = 'QUOTED_PARAMETER',\n  NUMBERED_PARAMETER = 'NUMBERED_PARAMETER',\n  POSITIONAL_PARAMETER = 'POSITIONAL_PARAMETER',\n  CUSTOM_PARAMETER = 'CUSTOM_PARAMETER',\n  DELIMITER = 'DELIMITER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  raw: string; // The raw original text that was matched\n  text: string; // Cleaned up text e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  start: number;\n  precedingWhitespace?: string; // Whitespace before this token, if any\n}\n\n/** Creates EOF token positioned at given location */\nexport const createEofToken = (index: number) => ({\n  type: TokenType.EOF,\n  raw: '«EOF»',\n  text: '«EOF»',\n  start: index,\n});\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN = createEofToken(Infinity);\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; text: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.text === compareToken.text;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  ARRAY: testToken({ text: 'ARRAY', type: TokenType.RESERVED_DATA_TYPE }),\n  BY: testToken({ text: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  SET: testToken({ text: 'SET', type: TokenType.RESERVED_CLAUSE }),\n  STRUCT: testToken({ text: 'STRUCT', type: TokenType.RESERVED_DATA_TYPE }),\n  WINDOW: testToken({ text: 'WINDOW', type: TokenType.RESERVED_CLAUSE }),\n  VALUES: testToken({ text: 'VALUES', type: TokenType.RESERVED_CLAUSE }),\n};\n\n/** Checks if token is any Reserved Keyword or Clause */\nexport const isReserved = (type: TokenType): boolean =>\n  type === TokenType.RESERVED_DATA_TYPE ||\n  type === TokenType.RESERVED_KEYWORD ||\n  type === TokenType.RESERVED_FUNCTION_NAME ||\n  type === TokenType.RESERVED_PHRASE ||\n  type === TokenType.RESERVED_CLAUSE ||\n  type === TokenType.RESERVED_SELECT ||\n  type === TokenType.RESERVED_SET_OPERATION ||\n  type === TokenType.RESERVED_JOIN ||\n  type === TokenType.ARRAY_KEYWORD ||\n  type === TokenType.CASE ||\n  type === TokenType.END ||\n  type === TokenType.WHEN ||\n  type === TokenType.ELSE ||\n  type === TokenType.THEN ||\n  type === TokenType.LIMIT ||\n  type === TokenType.BETWEEN ||\n  type === TokenType.AND ||\n  type === TokenType.OR ||\n  type === TokenType.XOR;\n\nexport const isLogicalOperator = (type: TokenType): boolean =>\n  type === TokenType.AND || type === TokenType.OR || type === TokenType.XOR;\n","export const functions: string[] = [\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions\n  'KEYS.NEW_KEYSET',\n  'KEYS.ADD_KEY_FROM_RAW_BYTES',\n  'AEAD.DECRYPT_BYTES',\n  'AEAD.DECRYPT_STRING',\n  'AEAD.ENCRYPT',\n  'KEYS.KEYSET_CHAIN',\n  'KEYS.KEYSET_FROM_JSON',\n  'KEYS.KEYSET_TO_JSON',\n  'KEYS.ROTATE_KEYSET',\n  'KEYS.KEYSET_LENGTH',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions\n  'ANY_VALUE',\n  'ARRAY_AGG',\n  'AVG',\n  'CORR',\n  'COUNT',\n  'COUNTIF',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'MAX',\n  'MIN',\n  'ST_CLUSTERDBSCAN',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STRING_AGG',\n  'SUM',\n  'VAR_POP',\n  'VAR_SAMP',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions\n  'ANY_VALUE',\n  'ARRAY_AGG',\n  'ARRAY_CONCAT_AGG',\n  'AVG',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'COUNT',\n  'COUNTIF',\n  'LOGICAL_AND',\n  'LOGICAL_OR',\n  'MAX',\n  'MIN',\n  'STRING_AGG',\n  'SUM',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions\n  'APPROX_COUNT_DISTINCT',\n  'APPROX_QUANTILES',\n  'APPROX_TOP_COUNT',\n  'APPROX_TOP_SUM',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions\n  // 'ARRAY',\n  'ARRAY_CONCAT',\n  'ARRAY_LENGTH',\n  'ARRAY_TO_STRING',\n  'GENERATE_ARRAY',\n  'GENERATE_DATE_ARRAY',\n  'GENERATE_TIMESTAMP_ARRAY',\n  'ARRAY_REVERSE',\n  'OFFSET',\n  'SAFE_OFFSET',\n  'ORDINAL',\n  'SAFE_ORDINAL',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions\n  'BIT_COUNT',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions\n  // 'CASE',\n  'PARSE_BIGNUMERIC',\n  'PARSE_NUMERIC',\n  'SAFE_CAST',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions\n  'CURRENT_DATE',\n  'EXTRACT',\n  'DATE',\n  'DATE_ADD',\n  'DATE_SUB',\n  'DATE_DIFF',\n  'DATE_TRUNC',\n  'DATE_FROM_UNIX_DATE',\n  'FORMAT_DATE',\n  'LAST_DAY',\n  'PARSE_DATE',\n  'UNIX_DATE',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions\n  'CURRENT_DATETIME',\n  'DATETIME',\n  'EXTRACT',\n  'DATETIME_ADD',\n  'DATETIME_SUB',\n  'DATETIME_DIFF',\n  'DATETIME_TRUNC',\n  'FORMAT_DATETIME',\n  'LAST_DAY',\n  'PARSE_DATETIME',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions\n  'ERROR',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/federated_query_functions\n  'EXTERNAL_QUERY',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions\n  'S2_CELLIDFROMPOINT',\n  'S2_COVERINGCELLIDS',\n  'ST_ANGLE',\n  'ST_AREA',\n  'ST_ASBINARY',\n  'ST_ASGEOJSON',\n  'ST_ASTEXT',\n  'ST_AZIMUTH',\n  'ST_BOUNDARY',\n  'ST_BOUNDINGBOX',\n  'ST_BUFFER',\n  'ST_BUFFERWITHTOLERANCE',\n  'ST_CENTROID',\n  'ST_CENTROID_AGG',\n  'ST_CLOSESTPOINT',\n  'ST_CLUSTERDBSCAN',\n  'ST_CONTAINS',\n  'ST_CONVEXHULL',\n  'ST_COVEREDBY',\n  'ST_COVERS',\n  'ST_DIFFERENCE',\n  'ST_DIMENSION',\n  'ST_DISJOINT',\n  'ST_DISTANCE',\n  'ST_DUMP',\n  'ST_DWITHIN',\n  'ST_ENDPOINT',\n  'ST_EQUALS',\n  'ST_EXTENT',\n  'ST_EXTERIORRING',\n  'ST_GEOGFROM',\n  'ST_GEOGFROMGEOJSON',\n  'ST_GEOGFROMTEXT',\n  'ST_GEOGFROMWKB',\n  'ST_GEOGPOINT',\n  'ST_GEOGPOINTFROMGEOHASH',\n  'ST_GEOHASH',\n  'ST_GEOMETRYTYPE',\n  'ST_INTERIORRINGS',\n  'ST_INTERSECTION',\n  'ST_INTERSECTS',\n  'ST_INTERSECTSBOX',\n  'ST_ISCOLLECTION',\n  'ST_ISEMPTY',\n  'ST_LENGTH',\n  'ST_MAKELINE',\n  'ST_MAKEPOLYGON',\n  'ST_MAKEPOLYGONORIENTED',\n  'ST_MAXDISTANCE',\n  'ST_NPOINTS',\n  'ST_NUMGEOMETRIES',\n  'ST_NUMPOINTS',\n  'ST_PERIMETER',\n  'ST_POINTN',\n  'ST_SIMPLIFY',\n  'ST_SNAPTOGRID',\n  'ST_STARTPOINT',\n  'ST_TOUCHES',\n  'ST_UNION',\n  'ST_UNION_AGG',\n  'ST_WITHIN',\n  'ST_X',\n  'ST_Y',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions\n  'FARM_FINGERPRINT',\n  'MD5',\n  'SHA1',\n  'SHA256',\n  'SHA512',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions\n  'HLL_COUNT.INIT',\n  'HLL_COUNT.MERGE',\n  'HLL_COUNT.MERGE_PARTIAL',\n  'HLL_COUNT.EXTRACT',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions\n  'MAKE_INTERVAL',\n  'EXTRACT',\n  'JUSTIFY_DAYS',\n  'JUSTIFY_HOURS',\n  'JUSTIFY_INTERVAL',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions\n  'JSON_EXTRACT',\n  'JSON_QUERY',\n  'JSON_EXTRACT_SCALAR',\n  'JSON_VALUE',\n  'JSON_EXTRACT_ARRAY',\n  'JSON_QUERY_ARRAY',\n  'JSON_EXTRACT_STRING_ARRAY',\n  'JSON_VALUE_ARRAY',\n  'TO_JSON_STRING',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions\n  'ABS',\n  'SIGN',\n  'IS_INF',\n  'IS_NAN',\n  'IEEE_DIVIDE',\n  'RAND',\n  'SQRT',\n  'POW',\n  'POWER',\n  'EXP',\n  'LN',\n  'LOG',\n  'LOG10',\n  'GREATEST',\n  'LEAST',\n  'DIV',\n  'SAFE_DIVIDE',\n  'SAFE_MULTIPLY',\n  'SAFE_NEGATE',\n  'SAFE_ADD',\n  'SAFE_SUBTRACT',\n  'MOD',\n  'ROUND',\n  'TRUNC',\n  'CEIL',\n  'CEILING',\n  'FLOOR',\n  'COS',\n  'COSH',\n  'ACOS',\n  'ACOSH',\n  'SIN',\n  'SINH',\n  'ASIN',\n  'ASINH',\n  'TAN',\n  'TANH',\n  'ATAN',\n  'ATANH',\n  'ATAN2',\n  'RANGE_BUCKET',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions\n  'FIRST_VALUE',\n  'LAST_VALUE',\n  'NTH_VALUE',\n  'LEAD',\n  'LAG',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions\n  'NET.IP_FROM_STRING',\n  'NET.SAFE_IP_FROM_STRING',\n  'NET.IP_TO_STRING',\n  'NET.IP_NET_MASK',\n  'NET.IP_TRUNC',\n  'NET.IPV4_FROM_INT64',\n  'NET.IPV4_TO_INT64',\n  'NET.HOST',\n  'NET.PUBLIC_SUFFIX',\n  'NET.REG_DOMAIN',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions\n  'RANK',\n  'DENSE_RANK',\n  'PERCENT_RANK',\n  'CUME_DIST',\n  'NTILE',\n  'ROW_NUMBER',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions\n  'SESSION_USER',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions\n  'CORR',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STDDEV',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions\n  'ASCII',\n  'BYTE_LENGTH',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHR',\n  'CODE_POINTS_TO_BYTES',\n  'CODE_POINTS_TO_STRING',\n  'CONCAT',\n  'CONTAINS_SUBSTR',\n  'ENDS_WITH',\n  'FORMAT',\n  'FROM_BASE32',\n  'FROM_BASE64',\n  'FROM_HEX',\n  'INITCAP',\n  'INSTR',\n  'LEFT',\n  'LENGTH',\n  'LPAD',\n  'LOWER',\n  'LTRIM',\n  'NORMALIZE',\n  'NORMALIZE_AND_CASEFOLD',\n  'OCTET_LENGTH',\n  'REGEXP_CONTAINS',\n  'REGEXP_EXTRACT',\n  'REGEXP_EXTRACT_ALL',\n  'REGEXP_INSTR',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REPLACE',\n  'REPEAT',\n  'REVERSE',\n  'RIGHT',\n  'RPAD',\n  'RTRIM',\n  'SAFE_CONVERT_BYTES_TO_STRING',\n  'SOUNDEX',\n  'SPLIT',\n  'STARTS_WITH',\n  'STRPOS',\n  'SUBSTR',\n  'SUBSTRING',\n  'TO_BASE32',\n  'TO_BASE64',\n  'TO_CODE_POINTS',\n  'TO_HEX',\n  'TRANSLATE',\n  'TRIM',\n  'UNICODE',\n  'UPPER',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions\n  'CURRENT_TIME',\n  'TIME',\n  'EXTRACT',\n  'TIME_ADD',\n  'TIME_SUB',\n  'TIME_DIFF',\n  'TIME_TRUNC',\n  'FORMAT_TIME',\n  'PARSE_TIME',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions\n  'CURRENT_TIMESTAMP',\n  'EXTRACT',\n  'STRING',\n  'TIMESTAMP',\n  'TIMESTAMP_ADD',\n  'TIMESTAMP_SUB',\n  'TIMESTAMP_DIFF',\n  'TIMESTAMP_TRUNC',\n  'FORMAT_TIMESTAMP',\n  'PARSE_TIMESTAMP',\n  'TIMESTAMP_SECONDS',\n  'TIMESTAMP_MILLIS',\n  'TIMESTAMP_MICROS',\n  'UNIX_SECONDS',\n  'UNIX_MILLIS',\n  'UNIX_MICROS',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/uuid_functions\n  'GENERATE_UUID',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions\n  'COALESCE',\n  'IF',\n  'IFNULL',\n  'NULLIF',\n\n  // https://cloud.google.com/bigquery/docs/reference/legacy-sql\n  // legacyAggregate\n  'AVG',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'CORR',\n  'COUNT',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'EXACT_COUNT_DISTINCT',\n  'FIRST',\n  'GROUP_CONCAT',\n  'GROUP_CONCAT_UNQUOTED',\n  'LAST',\n  'MAX',\n  'MIN',\n  'NEST',\n  'NTH',\n  'QUANTILES',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUM',\n  'TOP',\n  'UNIQUE',\n  'VARIANCE',\n  'VAR_POP',\n  'VAR_SAMP',\n\n  // legacyBitwise\n  'BIT_COUNT',\n\n  // legacyCasting\n  'BOOLEAN',\n  'BYTES',\n  'CAST',\n  'FLOAT',\n  'HEX_STRING',\n  'INTEGER',\n  'STRING',\n\n  // legacyComparison\n  // expr 'IN',\n  'COALESCE',\n  'GREATEST',\n  'IFNULL',\n  'IS_INF',\n  'IS_NAN',\n  'IS_EXPLICITLY_DEFINED',\n  'LEAST',\n  'NVL',\n\n  // legacyDatetime\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'DATE',\n  'DATE_ADD',\n  'DATEDIFF',\n  'DAY',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'FORMAT_UTC_USEC',\n  'HOUR',\n  'MINUTE',\n  'MONTH',\n  'MSEC_TO_TIMESTAMP',\n  'NOW',\n  'PARSE_UTC_USEC',\n  'QUARTER',\n  'SEC_TO_TIMESTAMP',\n  'SECOND',\n  'STRFTIME_UTC_USEC',\n  'TIME',\n  'TIMESTAMP',\n  'TIMESTAMP_TO_MSEC',\n  'TIMESTAMP_TO_SEC',\n  'TIMESTAMP_TO_USEC',\n  'USEC_TO_TIMESTAMP',\n  'UTC_USEC_TO_DAY',\n  'UTC_USEC_TO_HOUR',\n  'UTC_USEC_TO_MONTH',\n  'UTC_USEC_TO_WEEK',\n  'UTC_USEC_TO_YEAR',\n  'WEEK',\n  'YEAR',\n\n  // legacyIp\n  'FORMAT_IP',\n  'PARSE_IP',\n  'FORMAT_PACKED_IP',\n  'PARSE_PACKED_IP',\n\n  // legacyJson\n  'JSON_EXTRACT',\n  'JSON_EXTRACT_SCALAR',\n\n  // legacyMath\n  'ABS',\n  'ACOS',\n  'ACOSH',\n  'ASIN',\n  'ASINH',\n  'ATAN',\n  'ATANH',\n  'ATAN2',\n  'CEIL',\n  'COS',\n  'COSH',\n  'DEGREES',\n  'EXP',\n  'FLOOR',\n  'LN',\n  'LOG',\n  'LOG2',\n  'LOG10',\n  'PI',\n  'POW',\n  'RADIANS',\n  'RAND',\n  'ROUND',\n  'SIN',\n  'SINH',\n  'SQRT',\n  'TAN',\n  'TANH',\n\n  // legacyRegex\n  'REGEXP_MATCH',\n  'REGEXP_EXTRACT',\n  'REGEXP_REPLACE',\n\n  // legacyString\n  'CONCAT',\n  // expr CONTAINS 'str'\n  'INSTR',\n  'LEFT',\n  'LENGTH',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'REPLACE',\n  'RIGHT',\n  'RPAD',\n  'RTRIM',\n  'SPLIT',\n  'SUBSTR',\n  'UPPER',\n\n  // legacyTableWildcard\n  'TABLE_DATE_RANGE',\n  'TABLE_DATE_RANGE_STRICT',\n  'TABLE_QUERY',\n\n  // legacyUrl\n  'HOST',\n  'DOMAIN',\n  'TLD',\n\n  // legacyWindow\n  'AVG',\n  'COUNT',\n  'MAX',\n  'MIN',\n  'STDDEV',\n  'SUM',\n  'CUME_DIST',\n  'DENSE_RANK',\n  'FIRST_VALUE',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'NTH_VALUE',\n  'NTILE',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'ROW_NUMBER',\n\n  // legacyMisc\n  'CURRENT_USER',\n  'EVERY',\n  'FROM_BASE64',\n  'HASH',\n  'FARM_FINGERPRINT',\n  'IF',\n  'POSITION',\n  'SHA1',\n  'SOME',\n  'TO_BASE64',\n\n  // other\n  'BQ.JOBS.CANCEL',\n  'BQ.REFRESH_MATERIALIZED_VIEW',\n\n  // ddl\n  'OPTIONS',\n\n  // pivot\n  'PIVOT',\n  'UNPIVOT',\n];\n","export const keywords: string[] = [\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#reserved_keywords\n  'ALL',\n  'AND',\n  'ANY',\n  'AS',\n  'ASC',\n  'ASSERT_ROWS_MODIFIED',\n  'AT',\n  'BETWEEN',\n  'BY',\n  'CASE',\n  'CAST',\n  'COLLATE',\n  'CONTAINS',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'DEFAULT',\n  'DEFINE',\n  'DESC',\n  'DISTINCT',\n  'ELSE',\n  'END',\n  'ENUM',\n  'ESCAPE',\n  'EXCEPT',\n  'EXCLUDE',\n  'EXISTS',\n  'EXTRACT',\n  'FALSE',\n  'FETCH',\n  'FOLLOWING',\n  'FOR',\n  'FROM',\n  'FULL',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HASH',\n  'HAVING',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INNER',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'JOIN',\n  'LATERAL',\n  'LEFT',\n  'LIMIT',\n  'LOOKUP',\n  'MERGE',\n  'NATURAL',\n  'NEW',\n  'NO',\n  'NOT',\n  'NULL',\n  'NULLS',\n  'OF',\n  'ON',\n  'OR',\n  'ORDER',\n  'OUTER',\n  'OVER',\n  'PARTITION',\n  'PRECEDING',\n  'PROTO',\n  'RANGE',\n  'RECURSIVE',\n  'RESPECT',\n  'RIGHT',\n  'ROLLUP',\n  'ROWS',\n  'SELECT',\n  'SET',\n  'SOME',\n  'TABLE',\n  'TABLESAMPLE',\n  'THEN',\n  'TO',\n  'TREAT',\n  'TRUE',\n  'UNBOUNDED',\n  'UNION',\n  'UNNEST',\n  'USING',\n  'WHEN',\n  'WHERE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n\n  // misc\n  'SAFE',\n\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  'LIKE', // CREATE TABLE LIKE\n  'COPY', // CREATE TABLE COPY\n  'CLONE', // CREATE TABLE CLONE\n  'IN',\n  'OUT',\n  'INOUT',\n  'RETURNS',\n  'LANGUAGE',\n  'CASCADE',\n  'RESTRICT',\n  'DETERMINISTIC',\n];\n\nexport const dataTypes: string[] = [\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n  'ARRAY', // parametric, ARRAY<T>\n  'BOOL',\n  'BYTES', // parameterised, BYTES(Length)\n  'DATE',\n  'DATETIME',\n  'GEOGRAPHY',\n  'INTERVAL',\n  'INT64',\n  'INT',\n  'SMALLINT',\n  'INTEGER',\n  'BIGINT',\n  'TINYINT',\n  'BYTEINT',\n  'NUMERIC', // parameterised, NUMERIC(Precision[, Scale])\n  'DECIMAL', // parameterised, DECIMAL(Precision[, Scale])\n  'BIGNUMERIC', // parameterised, BIGNUMERIC(Precision[, Scale])\n  'BIGDECIMAL', // parameterised, BIGDECIMAL(Precision[, Scale])\n  'FLOAT64',\n  'STRING', // parameterised, STRING(Length)\n  'STRUCT', // parametric, STRUCT<T>\n  'TIME',\n  'TIMEZONE',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { EOF_TOKEN, isToken, Token, TokenType } from '../../lexer/token.js';\nimport { functions } from './bigquery.functions.js';\nimport { dataTypes, keywords } from './bigquery.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]']);\n\nconst reservedClauses = expandPhrases([\n  // Queries: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'QUALIFY',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'OMIT RECORD IF', // legacy\n  // Data modification: https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax\n  // - insert:\n  'INSERT [INTO]',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]',\n  'UPDATE SET',\n\n  'CLUSTER BY',\n  'FOR SYSTEM_TIME AS OF', // CREATE SNAPSHOT TABLE\n  'WITH CONNECTION',\n  'WITH PARTITION COLUMNS',\n  'REMOTE WITH CONNECTION',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  'CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE [FROM]',\n  // - drop table:\n  'DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS]',\n  'ADD COLUMN [IF NOT EXISTS]',\n  'DROP COLUMN [IF EXISTS]',\n  'RENAME TO',\n  'ALTER COLUMN [IF EXISTS]',\n  'SET DEFAULT COLLATE', // for alter column\n  'SET OPTIONS', // for alter column\n  'DROP NOT NULL', // for alter column\n  'SET DATA TYPE', // for alter column\n  // - alter schema\n  'ALTER SCHEMA [IF EXISTS]',\n  // - alter view\n  'ALTER [MATERIALIZED] VIEW [IF EXISTS]',\n  // - alter bi_capacity\n  'ALTER BI_CAPACITY',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - create schema\n  'CREATE SCHEMA [IF NOT EXISTS]',\n  'DEFAULT COLLATE',\n\n  // stored procedures\n  'CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]',\n  // row access policy\n  'CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]',\n  'GRANT TO',\n  'FILTER USING',\n  // capacity\n  'CREATE CAPACITY',\n  'AS JSON',\n  // reservation\n  'CREATE RESERVATION',\n  // assignment\n  'CREATE ASSIGNMENT',\n  // search index\n  'CREATE SEARCH INDEX [IF NOT EXISTS]',\n  // drop\n  'DROP SCHEMA [IF EXISTS]',\n  'DROP [MATERIALIZED] VIEW [IF EXISTS]',\n  'DROP [TABLE] FUNCTION [IF EXISTS]',\n  'DROP PROCEDURE [IF EXISTS]',\n  'DROP ROW ACCESS POLICY',\n  'DROP ALL ROW ACCESS POLICIES',\n  'DROP CAPACITY [IF EXISTS]',\n  'DROP RESERVATION [IF EXISTS]',\n  'DROP ASSIGNMENT [IF EXISTS]',\n  'DROP SEARCH INDEX [IF EXISTS]',\n  'DROP [IF EXISTS]',\n  // DCL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language\n  'GRANT',\n  'REVOKE',\n  // Script, https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting\n  'DECLARE',\n  'EXECUTE IMMEDIATE',\n  'LOOP',\n  'END LOOP',\n  'REPEAT',\n  'END REPEAT',\n  'WHILE',\n  'END WHILE',\n  'BREAK',\n  'LEAVE',\n  'CONTINUE',\n  'ITERATE',\n  'FOR',\n  'END FOR',\n  'BEGIN',\n  'BEGIN TRANSACTION',\n  'COMMIT TRANSACTION',\n  'ROLLBACK TRANSACTION',\n  'RAISE',\n  'RETURN',\n  'CALL',\n  // Debug, https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements\n  'ASSERT',\n  // Other, https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements\n  'EXPORT DATA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION {ALL | DISTINCT}',\n  'EXCEPT DISTINCT',\n  'INTERSECT DISTINCT',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#tablesample_operator\n  'TABLESAMPLE SYSTEM',\n  // From DDL: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  'ANY TYPE',\n  'ALL COLUMNS',\n  'NOT DETERMINISTIC',\n  // inside window definitions\n  '{ROWS | RANGE} BETWEEN',\n  // comparison operator\n  'IS [NOT] DISTINCT FROM',\n]);\n\n// https://cloud.google.com/bigquery/docs/reference/#standard-sql-reference\nexport const bigquery: DialectOptions = {\n  name: 'bigquery',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...tabularOnelineClauses, ...standardOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    extraParens: ['[]'],\n    stringTypes: [\n      // The triple-quoted strings are listed first, so they get matched first.\n      // Otherwise the first two quotes of \"\"\" will get matched as an empty \"\" string.\n      { quote: '\"\"\"..\"\"\"', prefixes: ['R', 'B', 'RB', 'BR'] },\n      { quote: \"'''..'''\", prefixes: ['R', 'B', 'RB', 'BR'] },\n      '\"\"-bs',\n      \"''-bs\",\n      { quote: '\"\"-raw', prefixes: ['R', 'B', 'RB', 'BR'], requirePrefix: true },\n      { quote: \"''-raw\", prefixes: ['R', 'B', 'RB', 'BR'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    identChars: { dashes: true },\n    paramTypes: { positional: true, named: ['@'], quoted: ['@'] },\n    variableTypes: [{ regex: String.raw`@@\\w+` }],\n    lineCommentTypes: ['--', '#'],\n    operators: ['&', '|', '^', '~', '>>', '<<', '||', '=>'],\n    postProcess,\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n\nfunction postProcess(tokens: Token[]): Token[] {\n  return detectArraySubscripts(combineParameterizedTypes(tokens));\n}\n\n// Converts OFFSET token inside array from RESERVED_CLAUSE to RESERVED_FUNCTION_NAME\n// See: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#array_subscript_operator\nfunction detectArraySubscripts(tokens: Token[]) {\n  let prevToken = EOF_TOKEN;\n  return tokens.map(token => {\n    if (token.text === 'OFFSET' && prevToken.text === '[') {\n      prevToken = token;\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    } else {\n      prevToken = token;\n      return token;\n    }\n  });\n}\n\n// Combines multiple tokens forming a parameterized type like STRUCT<ARRAY<INT64>> into a single token\nfunction combineParameterizedTypes(tokens: Token[]) {\n  const processed: Token[] = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n\n    if ((isToken.ARRAY(token) || isToken.STRUCT(token)) && tokens[i + 1]?.text === '<') {\n      const endIndex = findClosingAngleBracketIndex(tokens, i + 1);\n      const typeDefTokens = tokens.slice(i, endIndex + 1);\n      processed.push({\n        type: TokenType.IDENTIFIER,\n        raw: typeDefTokens.map(formatTypeDefToken('raw')).join(''),\n        text: typeDefTokens.map(formatTypeDefToken('text')).join(''),\n        start: token.start,\n      });\n      i = endIndex;\n    } else {\n      processed.push(token);\n    }\n  }\n  return processed;\n}\n\nconst formatTypeDefToken =\n  (key: Extract<keyof Token, 'raw' | 'text'>) =>\n  (token: Token): string => {\n    if (token.type === TokenType.IDENTIFIER || token.type === TokenType.COMMA) {\n      return token[key] + ' ';\n    } else {\n      return token[key];\n    }\n  };\n\nfunction findClosingAngleBracketIndex(tokens: Token[], startIndex: number): number {\n  let level = 0;\n  for (let i = startIndex; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.text === '<') {\n      level++;\n    } else if (token.text === '>') {\n      level--;\n    } else if (token.text === '>>') {\n      level -= 2;\n    }\n    if (level === 0) {\n      return i;\n    }\n  }\n  return tokens.length - 1;\n}\n","export const functions: string[] = [\n  // https://www.ibm.com/docs/en/db2/11.5?topic=bif-aggregate-functions\n  'ARRAY_AGG',\n  'AVG',\n  'CORRELATION',\n  'COUNT',\n  'COUNT_BIG',\n  'COVARIANCE',\n  'COVARIANCE_SAMP',\n  'CUME_DIST',\n  'GROUPING',\n  'LISTAGG',\n  'MAX',\n  'MEDIAN',\n  'MIN',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERCENT_RANK',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_ICPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'STDDEV',\n  'STDDEV_SAMP',\n  'SUM',\n  'VARIANCE',\n  'VARIANCE_SAMP',\n  'XMLAGG',\n  'XMLGROUP',\n\n  // https://www.ibm.com/docs/en/db2/11.5?topic=bif-scalar-functions\n  'ABS',\n  'ABSVAL',\n  'ACOS',\n  'ADD_DAYS',\n  'ADD_HOURS',\n  'ADD_MINUTES',\n  'ADD_MONTHS',\n  'ADD_SECONDS',\n  'ADD_YEARS',\n  'AGE',\n  'ARRAY_DELETE',\n  'ARRAY_FIRST',\n  'ARRAY_LAST',\n  'ARRAY_NEXT',\n  'ARRAY_PRIOR',\n  'ASCII',\n  'ASCII_STR',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'BITAND',\n  'BITANDNOT',\n  'BITOR',\n  'BITXOR',\n  'BITNOT',\n  'BPCHAR',\n  'BSON_TO_JSON',\n  'BTRIM',\n  'CARDINALITY',\n  'CEILING',\n  'CEIL',\n  'CHARACTER_LENGTH',\n  'CHR',\n  'COALESCE',\n  'COLLATION_KEY',\n  'COLLATION_KEY_BIT',\n  'COMPARE_DECFLOAT',\n  'CONCAT',\n  'COS',\n  'COSH',\n  'COT',\n  'CURSOR_ROWCOUNT',\n  'DATAPARTITIONNUM',\n  'DATE_PART',\n  'DATE_TRUNC',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFWEEK_ISO',\n  'DAYOFYEAR',\n  'DAYS',\n  'DAYS_BETWEEN',\n  'DAYS_TO_END_OF_MONTH',\n  'DBPARTITIONNUM',\n  'DECFLOAT',\n  'DECFLOAT_FORMAT',\n  'DECODE',\n  'DECRYPT_BIN',\n  'DECRYPT_CHAR',\n  'DEGREES',\n  'DEREF',\n  'DIFFERENCE',\n  'DIGITS',\n  'DOUBLE_PRECISION',\n  'EMPTY_BLOB',\n  'EMPTY_CLOB',\n  'EMPTY_DBCLOB',\n  'EMPTY_NCLOB',\n  'ENCRYPT',\n  'EVENT_MON_STATE',\n  'EXP',\n  'EXTRACT',\n  'FIRST_DAY',\n  'FLOOR',\n  'FROM_UTC_TIMESTAMP',\n  'GENERATE_UNIQUE',\n  'GETHINT',\n  'GREATEST',\n  'HASH',\n  'HASH4',\n  'HASH8',\n  'HASHEDVALUE',\n  'HEX',\n  'HEXTORAW',\n  'HOUR',\n  'HOURS_BETWEEN',\n  'IDENTITY_VAL_LOCAL',\n  'IFNULL',\n  'INITCAP',\n  'INSERT',\n  'INSTR',\n  'INSTR2',\n  'INSTR4',\n  'INSTRB',\n  'INTNAND',\n  'INTNOR',\n  'INTNXOR',\n  'INTNNOT',\n  'ISNULL',\n  'JSON_ARRAY',\n  'JSON_OBJECT',\n  'JSON_QUERY',\n  'JSON_TO_BSON',\n  'JSON_VALUE',\n  'JULIAN_DAY',\n  'LAST_DAY',\n  'LCASE',\n  'LEAST',\n  'LEFT',\n  'LENGTH',\n  'LENGTH2',\n  'LENGTH4',\n  'LENGTHB',\n  'LN',\n  'LOCATE',\n  'LOCATE_IN_STRING',\n  'LOG10',\n  'LONG_VARCHAR',\n  'LONG_VARGRAPHIC',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MAX',\n  'MAX_CARDINALITY',\n  'MICROSECOND',\n  'MIDNIGHT_SECONDS',\n  'MIN',\n  'MINUTE',\n  'MINUTES_BETWEEN',\n  'MOD',\n  'MONTH',\n  'MONTHNAME',\n  'MONTHS_BETWEEN',\n  'MULTIPLY_ALT',\n  'NEXT_DAY',\n  'NEXT_MONTH',\n  'NEXT_QUARTER',\n  'NEXT_WEEK',\n  'NEXT_YEAR',\n  'NORMALIZE_DECFLOAT',\n  'NOW',\n  'NULLIF',\n  'NVL',\n  'NVL2',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'PARAMETER',\n  'POSITION',\n  'POSSTR',\n  'POW',\n  'POWER',\n  'QUANTIZE',\n  'QUARTER',\n  'QUOTE_IDENT',\n  'QUOTE_LITERAL',\n  'RADIANS',\n  'RAISE_ERROR',\n  'RAND',\n  'RANDOM',\n  'RAWTOHEX',\n  'REC2XML',\n  'REGEXP_COUNT',\n  'REGEXP_EXTRACT',\n  'REGEXP_INSTR',\n  'REGEXP_LIKE',\n  'REGEXP_MATCH_COUNT',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REPEAT',\n  'REPLACE',\n  'RID',\n  'RID_BIT',\n  'RIGHT',\n  'ROUND',\n  'ROUND_TIMESTAMP',\n  'RPAD',\n  'RTRIM',\n  'SECLABEL',\n  'SECLABEL_BY_NAME',\n  'SECLABEL_TO_CHAR',\n  'SECOND',\n  'SECONDS_BETWEEN',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SOUNDEX',\n  'SPACE',\n  'SQRT',\n  'STRIP',\n  'STRLEFT',\n  'STRPOS',\n  'STRRIGHT',\n  'SUBSTR',\n  'SUBSTR2',\n  'SUBSTR4',\n  'SUBSTRB',\n  'SUBSTRING',\n  'TABLE_NAME',\n  'TABLE_SCHEMA',\n  'TAN',\n  'TANH',\n  'THIS_MONTH',\n  'THIS_QUARTER',\n  'THIS_WEEK',\n  'THIS_YEAR',\n  'TIMESTAMP_FORMAT',\n  'TIMESTAMP_ISO',\n  'TIMESTAMPDIFF',\n  'TIMEZONE',\n  'TO_CHAR',\n  'TO_CLOB',\n  'TO_DATE',\n  'TO_HEX',\n  'TO_MULTI_BYTE',\n  'TO_NCHAR',\n  'TO_NCLOB',\n  'TO_NUMBER',\n  'TO_SINGLE_BYTE',\n  'TO_TIMESTAMP',\n  'TO_UTC_TIMESTAMP',\n  'TOTALORDER',\n  'TRANSLATE',\n  'TRIM',\n  'TRIM_ARRAY',\n  'TRUNC_TIMESTAMP',\n  'TRUNCATE',\n  'TRUNC',\n  'TYPE_ID',\n  'TYPE_NAME',\n  'TYPE_SCHEMA',\n  'UCASE',\n  'UNICODE_STR',\n  'UPPER',\n  'VALUE',\n  'VARCHAR_BIT_FORMAT',\n  'VARCHAR_FORMAT',\n  'VARCHAR_FORMAT_BIT',\n  'VERIFY_GROUP_FOR_USER',\n  'VERIFY_ROLE_FOR_USER',\n  'VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER',\n  'WEEK',\n  'WEEK_ISO',\n  'WEEKS_BETWEEN',\n  'WIDTH_BUCKET',\n  'XMLATTRIBUTES',\n  'XMLCOMMENT',\n  'XMLCONCAT',\n  'XMLDOCUMENT',\n  'XMLELEMENT',\n  'XMLFOREST',\n  'XMLNAMESPACES',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLQUERY',\n  'XMLROW',\n  'XMLSERIALIZE',\n  'XMLTEXT',\n  'XMLVALIDATE',\n  'XMLXSROBJECTID',\n  'XSLTRANSFORM',\n  'YEAR',\n  'YEARS_BETWEEN',\n  'YMD_BETWEEN',\n\n  // https://www.ibm.com/docs/en/db2/11.5?topic=bif-table-functions\n  'BASE_TABLE',\n  'JSON_TABLE',\n  'UNNEST',\n  'XMLTABLE',\n\n  // https://www.ibm.com/docs/en/db2/11.5?topic=expressions-olap-specification\n  // Additional function names not already present in the aggregate functions list\n  'RANK',\n  'DENSE_RANK',\n  'NTILE',\n  'LAG',\n  'LEAD',\n  'ROW_NUMBER',\n  'FIRST_VALUE',\n  'LAST_VALUE',\n  'NTH_VALUE',\n  'RATIO_TO_REPORT',\n\n  // Type casting\n  'CAST',\n];\n","export const keywords: string[] = [\n  // https://www.ibm.com/docs/en/db2/11.5?topic=sql-reserved-schema-names-reserved-words\n  'ACTIVATE',\n  'ADD',\n  'AFTER',\n  'ALIAS',\n  'ALL',\n  'ALLOCATE',\n  'ALLOW',\n  'ALTER',\n  'AND',\n  'ANY',\n  'AS',\n  'ASENSITIVE',\n  'ASSOCIATE',\n  'ASUTIME',\n  'AT',\n  'ATTRIBUTES',\n  'AUDIT',\n  'AUTHORIZATION',\n  'AUX',\n  'AUXILIARY',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BINARY',\n  'BUFFERPOOL',\n  'BY',\n  'CACHE',\n  'CALL',\n  'CALLED',\n  'CAPTURE',\n  'CARDINALITY',\n  'CASCADED',\n  'CASE',\n  'CAST',\n  'CHECK',\n  'CLONE',\n  'CLOSE',\n  'CLUSTER',\n  'COLLECTION',\n  'COLLID',\n  'COLUMN',\n  'COMMENT',\n  'COMMIT',\n  'CONCAT',\n  'CONDITION',\n  'CONNECT',\n  'CONNECTION',\n  'CONSTRAINT',\n  'CONTAINS',\n  'CONTINUE',\n  'COUNT',\n  'COUNT_BIG',\n  'CREATE',\n  'CROSS',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_LC_CTYPE',\n  'CURRENT_PATH',\n  'CURRENT_SCHEMA',\n  'CURRENT_SERVER',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DATA',\n  'DATABASE',\n  'DATAPARTITIONNAME',\n  'DATAPARTITIONNUM',\n  'DAY',\n  'DAYS',\n  'DB2GENERAL',\n  'DB2GENRL',\n  'DB2SQL',\n  'DBINFO',\n  'DBPARTITIONNAME',\n  'DBPARTITIONNUM',\n  'DEALLOCATE',\n  'DECLARE',\n  'DEFAULT',\n  'DEFAULTS',\n  'DEFINITION',\n  'DELETE',\n  'DENSERANK',\n  'DENSE_RANK',\n  'DESCRIBE',\n  'DESCRIPTOR',\n  'DETERMINISTIC',\n  'DIAGNOSTICS',\n  'DISABLE',\n  'DISALLOW',\n  'DISCONNECT',\n  'DISTINCT',\n  'DO',\n  'DOCUMENT',\n  'DROP',\n  'DSSIZE',\n  'DYNAMIC',\n  'EACH',\n  'EDITPROC',\n  'ELSE',\n  'ELSEIF',\n  'ENABLE',\n  'ENCODING',\n  'ENCRYPTION',\n  'END',\n  'END-EXEC',\n  'ENDING',\n  'ERASE',\n  'ESCAPE',\n  'EVERY',\n  'EXCEPT',\n  'EXCEPTION',\n  'EXCLUDING',\n  'EXCLUSIVE',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'EXTENDED',\n  'EXTERNAL',\n  'EXTRACT',\n  'FENCED',\n  'FETCH',\n  'FIELDPROC',\n  'FILE',\n  'FINAL',\n  'FIRST1',\n  'FOR',\n  'FOREIGN',\n  'FREE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'GENERAL',\n  'GENERATED',\n  'GET',\n  'GLOBAL',\n  'GO',\n  'GOTO',\n  'GRANT',\n  'GRAPHIC',\n  'GROUP',\n  'HANDLER',\n  'HASH',\n  'HASHED_VALUE',\n  'HAVING',\n  'HINT',\n  'HOLD',\n  'HOUR',\n  'HOURS',\n  'IDENTITY',\n  'IF',\n  'IMMEDIATE',\n  'IMPORT',\n  'IN',\n  'INCLUDING',\n  'INCLUSIVE',\n  'INCREMENT',\n  'INDEX',\n  'INDICATOR',\n  'INDICATORS',\n  'INF',\n  'INFINITY',\n  'INHERIT',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INTEGRITY',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ISNULL',\n  'ISOBID',\n  'ISOLATION',\n  'ITERATE',\n  'JAR',\n  'JAVA',\n  'JOIN',\n  'KEEP',\n  'KEY',\n  'LABEL',\n  'LANGUAGE',\n  'LAST3',\n  'LATERAL',\n  'LC_CTYPE',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINKTYPE',\n  'LOCAL',\n  'LOCALDATE',\n  'LOCALE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATOR',\n  'LOCATORS',\n  'LOCK',\n  'LOCKMAX',\n  'LOCKSIZE',\n  'LOOP',\n  'MAINTAINED',\n  'MATERIALIZED',\n  'MAXVALUE',\n  'MICROSECOND',\n  'MICROSECONDS',\n  'MINUTE',\n  'MINUTES',\n  'MINVALUE',\n  'MODE',\n  'MODIFIES',\n  'MONTH',\n  'MONTHS',\n  'NAN',\n  'NEW',\n  'NEW_TABLE',\n  'NEXTVAL',\n  'NO',\n  'NOCACHE',\n  'NOCYCLE',\n  'NODENAME',\n  'NODENUMBER',\n  'NOMAXVALUE',\n  'NOMINVALUE',\n  'NONE',\n  'NOORDER',\n  'NORMALIZED',\n  'NOT2',\n  'NOTNULL',\n  'NULL',\n  'NULLS',\n  'NUMPARTS',\n  'OBID',\n  'OF',\n  'OFF',\n  'OFFSET',\n  'OLD',\n  'OLD_TABLE',\n  'ON',\n  'OPEN',\n  'OPTIMIZATION',\n  'OPTIMIZE',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERRIDING',\n  'PACKAGE',\n  'PADDED',\n  'PAGESIZE',\n  'PARAMETER',\n  'PART',\n  'PARTITION',\n  'PARTITIONED',\n  'PARTITIONING',\n  'PARTITIONS',\n  'PASSWORD',\n  'PATH',\n  'PERCENT',\n  'PIECESIZE',\n  'PLAN',\n  'POSITION',\n  'PRECISION',\n  'PREPARE',\n  'PREVVAL',\n  'PRIMARY',\n  'PRIQTY',\n  'PRIVILEGES',\n  'PROCEDURE',\n  'PROGRAM',\n  'PSID',\n  'PUBLIC',\n  'QUERY',\n  'QUERYNO',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'RECOVERY',\n  'REFERENCES',\n  'REFERENCING',\n  'REFRESH',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'RESET',\n  'RESIGNAL',\n  'RESTART',\n  'RESTRICT',\n  'RESULT',\n  'RESULT_SET_LOCATOR',\n  'RETURN',\n  'RETURNS',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLLBACK',\n  'ROUND_CEILING',\n  'ROUND_DOWN',\n  'ROUND_FLOOR',\n  'ROUND_HALF_DOWN',\n  'ROUND_HALF_EVEN',\n  'ROUND_HALF_UP',\n  'ROUND_UP',\n  'ROUTINE',\n  'ROW',\n  'ROWNUMBER',\n  'ROWS',\n  'ROWSET',\n  'ROW_NUMBER',\n  'RRN',\n  'RUN',\n  'SAVEPOINT',\n  'SCHEMA',\n  'SCRATCHPAD',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SECONDS',\n  'SECQTY',\n  'SECURITY',\n  'SELECT',\n  'SENSITIVE',\n  'SEQUENCE',\n  'SESSION',\n  'SESSION_USER',\n  'SET',\n  'SIGNAL',\n  'SIMPLE',\n  'SNAN',\n  'SOME',\n  'SOURCE',\n  'SPECIFIC',\n  'SQL',\n  'SQLID',\n  'STACKED',\n  'STANDARD',\n  'START',\n  'STARTING',\n  'STATEMENT',\n  'STATIC',\n  'STATMENT',\n  'STAY',\n  'STOGROUP',\n  'STORES',\n  'STYLE',\n  'SUBSTRING',\n  'SUMMARY',\n  'SYNONYM',\n  'SYSFUN',\n  'SYSIBM',\n  'SYSPROC',\n  'SYSTEM',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESPACE',\n  'THEN',\n  'TO',\n  'TRANSACTION',\n  'TRIGGER',\n  'TRIM',\n  'TRUNCATE',\n  'TYPE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNTIL',\n  'UPDATE',\n  'USAGE',\n  'USER',\n  'USING',\n  'VALIDPROC',\n  'VALUE',\n  'VALUES',\n  'VARIABLE',\n  'VARIANT',\n  'VCAT',\n  'VERSION',\n  'VIEW',\n  'VOLATILE',\n  'VOLUMES',\n  'WHEN',\n  'WHENEVER',\n  'WHERE',\n  'WHILE',\n  'WITH',\n  'WITHOUT',\n  'WLM',\n  'WRITE',\n  'XMLELEMENT',\n  'XMLEXISTS',\n  'XMLNAMESPACES',\n  'YEAR',\n  'YEARS',\n];\n\nexport const dataTypes: string[] = [\n  // https://www.ibm.com/docs/en/db2-for-zos/12?topic=columns-data-types\n  'ARRAY',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOOLEAN',\n  'CCSID',\n  'CHAR',\n  'CHARACTER',\n  'CLOB',\n  'DATE',\n  'DATETIME',\n  'DBCLOB',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE',\n  'DOUBLE PRECISION',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'GRAPHIC',\n  'INT',\n  'INT2',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERVAL',\n  'LONG VARCHAR',\n  'LONG VARGRAPHIC',\n  'NCHAR',\n  'NCHR',\n  'NCLOB',\n  'NVARCHAR',\n  'NUMERIC',\n  'SMALLINT',\n  'REAL',\n  'TIME',\n  'TIMESTAMP',\n  'VARBINARY',\n  'VARCHAR',\n  'VARGRAPHIC',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './db2.functions.js';\nimport { dataTypes, keywords } from './db2.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER BY [INPUT SEQUENCE]',\n  'LIMIT',\n  'OFFSET',\n  'FETCH NEXT',\n  'FOR UPDATE [OF]',\n  'FOR {READ | FETCH} ONLY',\n  'FOR {RR | CS | UR | RS} [USE AND KEEP {SHARE | UPDATE | EXCLUSIVE} LOCKS]',\n  'WAIT FOR OUTCOME',\n  'SKIP LOCKED DATA',\n  'INTO',\n  // Data modification\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  'INSERT',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [GLOBAL TEMPORARY | EXTERNAL] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] VIEW',\n  // - update:\n  'UPDATE',\n  'WHERE CURRENT OF',\n  'WITH {RR | RS | CS | UR}',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  'SET DATA TYPE', // for alter column\n  'SET NOT NULL', // for alter column\n  'DROP {DEFAULT | GENERATED | NOT NULL}', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // https://www.ibm.com/docs/en/db2/11.5?topic=s-statements\n  'ALLOCATE',\n  'ALTER AUDIT POLICY',\n  'ALTER BUFFERPOOL',\n  'ALTER DATABASE PARTITION GROUP',\n  'ALTER DATABASE',\n  'ALTER EVENT MONITOR',\n  'ALTER FUNCTION',\n  'ALTER HISTOGRAM TEMPLATE',\n  'ALTER INDEX',\n  'ALTER MASK',\n  'ALTER METHOD',\n  'ALTER MODULE',\n  'ALTER NICKNAME',\n  'ALTER PACKAGE',\n  'ALTER PERMISSION',\n  'ALTER PROCEDURE',\n  'ALTER SCHEMA',\n  'ALTER SECURITY LABEL COMPONENT',\n  'ALTER SECURITY POLICY',\n  'ALTER SEQUENCE',\n  'ALTER SERVER',\n  'ALTER SERVICE CLASS',\n  'ALTER STOGROUP',\n  'ALTER TABLESPACE',\n  'ALTER THRESHOLD',\n  'ALTER TRIGGER',\n  'ALTER TRUSTED CONTEXT',\n  'ALTER TYPE',\n  'ALTER USAGE LIST',\n  'ALTER USER MAPPING',\n  'ALTER VIEW',\n  'ALTER WORK ACTION SET',\n  'ALTER WORK CLASS SET',\n  'ALTER WORKLOAD',\n  'ALTER WRAPPER',\n  'ALTER XSROBJECT',\n  'ALTER STOGROUP',\n  'ALTER TABLESPACE',\n  'ALTER TRIGGER',\n  'ALTER TRUSTED CONTEXT',\n  'ALTER VIEW',\n  'ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}',\n  'AUDIT',\n  'BEGIN DECLARE SECTION',\n  'CALL',\n  'CLOSE',\n  'COMMENT ON',\n  'COMMIT [WORK]',\n  'CONNECT',\n  'CREATE [OR REPLACE] [PUBLIC] ALIAS',\n  'CREATE AUDIT POLICY',\n  'CREATE BUFFERPOOL',\n  'CREATE DATABASE PARTITION GROUP',\n  'CREATE EVENT MONITOR',\n  'CREATE [OR REPLACE] FUNCTION',\n  'CREATE FUNCTION MAPPING',\n  'CREATE HISTOGRAM TEMPLATE',\n  'CREATE [UNIQUE] INDEX',\n  'CREATE INDEX EXTENSION',\n  'CREATE [OR REPLACE] MASK',\n  'CREATE [SPECIFIC] METHOD',\n  'CREATE [OR REPLACE] MODULE',\n  'CREATE [OR REPLACE] NICKNAME',\n  'CREATE [OR REPLACE] PERMISSION',\n  'CREATE [OR REPLACE] PROCEDURE',\n  'CREATE ROLE',\n  'CREATE SCHEMA',\n  'CREATE SECURITY LABEL [COMPONENT]',\n  'CREATE SECURITY POLICY',\n  'CREATE [OR REPLACE] SEQUENCE',\n  'CREATE SERVICE CLASS',\n  'CREATE SERVER',\n  'CREATE STOGROUP',\n  'CREATE SYNONYM',\n  'CREATE [LARGE | REGULAR | {SYSTEM | USER} TEMPORARY] TABLESPACE',\n  'CREATE THRESHOLD',\n  'CREATE {TRANSFORM | TRANSFORMS} FOR',\n  'CREATE [OR REPLACE] TRIGGER',\n  'CREATE TRUSTED CONTEXT',\n  'CREATE [OR REPLACE] TYPE',\n  'CREATE TYPE MAPPING',\n  'CREATE USAGE LIST',\n  'CREATE USER MAPPING FOR',\n  'CREATE [OR REPLACE] VARIABLE',\n  'CREATE WORK ACTION SET',\n  'CREATE WORK CLASS SET',\n  'CREATE WORKLOAD',\n  'CREATE WRAPPER',\n  'DECLARE',\n  'DECLARE GLOBAL TEMPORARY TABLE',\n  'DESCRIBE [INPUT | OUTPUT]',\n  'DISCONNECT',\n  'DROP [PUBLIC] ALIAS',\n  'DROP AUDIT POLICY',\n  'DROP BUFFERPOOL',\n  'DROP DATABASE PARTITION GROUP',\n  'DROP EVENT MONITOR',\n  'DROP [SPECIFIC] FUNCTION',\n  'DROP FUNCTION MAPPING',\n  'DROP HISTOGRAM TEMPLATE',\n  'DROP INDEX [EXTENSION]',\n  'DROP MASK',\n  'DROP [SPECIFIC] METHOD',\n  'DROP MODULE',\n  'DROP NICKNAME',\n  'DROP PACKAGE',\n  'DROP PERMISSION',\n  'DROP [SPECIFIC] PROCEDURE',\n  'DROP ROLE',\n  'DROP SCHEMA',\n  'DROP SECURITY LABEL [COMPONENT]',\n  'DROP SECURITY POLICY',\n  'DROP SEQUENCE',\n  'DROP SERVER',\n  'DROP SERVICE CLASS',\n  'DROP STOGROUP',\n  'DROP TABLE HIERARCHY',\n  'DROP {TABLESPACE | TABLESPACES}',\n  'DROP {TRANSFORM | TRANSFORMS}',\n  'DROP THRESHOLD',\n  'DROP TRIGGER',\n  'DROP TRUSTED CONTEXT',\n  'DROP TYPE [MAPPING]',\n  'DROP USAGE LIST',\n  'DROP USER MAPPING FOR',\n  'DROP VARIABLE',\n  'DROP VIEW [HIERARCHY]',\n  'DROP WORK {ACTION | CLASS} SET',\n  'DROP WORKLOAD',\n  'DROP WRAPPER',\n  'DROP XSROBJECT',\n  'END DECLARE SECTION',\n  'EXECUTE [IMMEDIATE]',\n  'EXPLAIN {PLAN [SECTION] | ALL}',\n  'FETCH [FROM]',\n  'FLUSH {BUFFERPOOL | BUFFERPOOLS} ALL',\n  'FLUSH EVENT MONITOR',\n  'FLUSH FEDERATED CACHE',\n  'FLUSH OPTIMIZATION PROFILE CACHE',\n  'FLUSH PACKAGE CACHE [DYNAMIC]',\n  'FLUSH AUTHENTICATION CACHE [FOR ALL]',\n  'FREE LOCATOR',\n  'GET DIAGNOSTICS',\n  'GOTO',\n  'GRANT', // TODO: lots of syntax here\n  'INCLUDE',\n  'ITERATE',\n  'LEAVE',\n  'LOCK TABLE',\n  'LOOP',\n  'OPEN',\n  'PIPE',\n  'PREPARE',\n  'REFRESH TABLE',\n  'RELEASE',\n  'RELEASE [TO] SAVEPOINT',\n  'RENAME [TABLE | INDEX | STOGROUP | TABLESPACE]',\n  'REPEAT',\n  'RESIGNAL',\n  'RETURN',\n  'REVOKE', // TODO: lots of syntax here\n  'ROLLBACK [WORK] [TO SAVEPOINT]',\n  'SAVEPOINT',\n  'SET COMPILATION ENVIRONMENT',\n  'SET CONNECTION',\n  'SET CURRENT', // TODO: bunch of syntax here\n  'SET ENCRYPTION PASSWORD',\n  'SET EVENT MONITOR STATE',\n  'SET INTEGRITY',\n  'SET PASSTHRU',\n  'SET PATH',\n  'SET ROLE',\n  'SET SCHEMA',\n  'SET SERVER OPTION',\n  'SET {SESSION AUTHORIZATION | SESSION_USER}',\n  'SET USAGE LIST',\n  'SIGNAL',\n  'TRANSFER OWNERSHIP OF',\n  'WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}',\n  'WHILE',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT [ALL]', 'INTERSECT [ALL]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON DELETE',\n  'ON UPDATE',\n  'SET NULL',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\nexport const db2: DialectOptions = {\n  name: 'db2',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    extraParens: ['[]'],\n    stringTypes: [\n      { quote: \"''-qq\", prefixes: ['G', 'N', 'U&'] },\n      { quote: \"''-raw\", prefixes: ['X', 'BX', 'GX', 'UX'], requirePrefix: true },\n    ],\n    identTypes: [`\"\"-qq`],\n    identChars: { first: '@#$', rest: '@#$' },\n    paramTypes: { positional: true, named: [':'] },\n    paramChars: { first: '@#$', rest: '@#$' },\n    operators: [\n      '**',\n      '%',\n      '|',\n      '&',\n      '^',\n      '~',\n      '¬=',\n      '¬>',\n      '¬<',\n      '!>',\n      '!<',\n      '^=',\n      '^>',\n      '^<',\n      '||',\n      '->',\n      '=>',\n    ],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://www.ibm.com/docs/en/i/7.5?topic=functions-aggregate\n  // TODO: 'ANY', - conflicts with test for ANY predicate in 'operators.ys'!!\n  'ARRAY_AGG',\n  'AVG',\n  'CORR',\n  'CORRELATION',\n  'COUNT',\n  'COUNT_BIG',\n  'COVAR_POP',\n  'COVARIANCE',\n  'COVAR',\n  'COVAR_SAMP',\n  'COVARIANCE_SAMP',\n  'EVERY',\n  'GROUPING',\n  'JSON_ARRAYAGG',\n  'JSON_OBJECTAGG',\n  'LISTAGG',\n  'MAX',\n  'MEDIAN',\n  'MIN',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  // https://www.ibm.com/docs/en/i/7.5?topic=functions-regression'\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'SOME',\n  'STDDEV_POP',\n  'STDDEV',\n  'STDDEV_SAMP',\n  'SUM',\n  'VAR_POP',\n  'VARIANCE',\n  'VAR',\n  'VAR_SAMP',\n  'VARIANCE_SAMP',\n  'XMLAGG',\n  'XMLGROUP',\n\n  // https://www.ibm.com/docs/en/i/7.5?topic=functions-scalar\n  'ABS',\n  'ABSVAL',\n  'ACOS',\n  'ADD_DAYS',\n  'ADD_HOURS',\n  'ADD_MINUTES',\n  'ADD_MONTHS',\n  'ADD_SECONDS',\n  'ADD_YEARS',\n  'ANTILOG',\n  'ARRAY_MAX_CARDINALITY',\n  'ARRAY_TRIM',\n  'ASCII',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'BASE64_DECODE',\n  'BASE64_ENCODE',\n  'BIT_LENGTH',\n  'BITAND',\n  'BITANDNOT',\n  'BITNOT',\n  'BITOR',\n  'BITXOR',\n  'BSON_TO_JSON',\n  'CARDINALITY',\n  'CEIL',\n  'CEILING',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHR',\n  'COALESCE',\n  'COMPARE_DECFLOAT',\n  'CONCAT',\n  'CONTAINS',\n  'COS',\n  'COSH',\n  'COT',\n  'CURDATE',\n  'CURTIME',\n  'DATABASE',\n  'DATAPARTITIONNAME',\n  'DATAPARTITIONNUM',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK_ISO',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'DAYS',\n  'DBPARTITIONNAME',\n  'DBPARTITIONNUM',\n  'DECFLOAT_FORMAT',\n  'DECFLOAT_SORTKEY',\n  'DECRYPT_BINARY',\n  'DECRYPT_BIT',\n  'DECRYPT_CHAR',\n  'DECRYPT_DB',\n  'DEGREES',\n  'DIFFERENCE',\n  'DIGITS',\n  'DLCOMMENT',\n  'DLLINKTYPE',\n  'DLURLCOMPLETE',\n  'DLURLPATH',\n  'DLURLPATHONLY',\n  'DLURLSCHEME',\n  'DLURLSERVER',\n  'DLVALUE',\n  'DOUBLE_PRECISION',\n  'DOUBLE',\n  'ENCRPYT',\n  'ENCRYPT_AES',\n  'ENCRYPT_AES256',\n  'ENCRYPT_RC2',\n  'ENCRYPT_TDES',\n  'EXP',\n  'EXTRACT',\n  'FIRST_DAY',\n  'FLOOR',\n  'GENERATE_UNIQUE',\n  'GET_BLOB_FROM_FILE',\n  'GET_CLOB_FROM_FILE',\n  'GET_DBCLOB_FROM_FILE',\n  'GET_XML_FILE',\n  'GETHINT',\n  'GREATEST',\n  'HASH_MD5',\n  'HASH_ROW',\n  'HASH_SHA1',\n  'HASH_SHA256',\n  'HASH_SHA512',\n  'HASH_VALUES',\n  'HASHED_VALUE',\n  'HEX',\n  'HEXTORAW',\n  'HOUR',\n  'HTML_ENTITY_DECODE',\n  'HTML_ENTITY_ENCODE',\n  'HTTP_DELETE_BLOB',\n  'HTTP_DELETE',\n  'HTTP_GET_BLOB',\n  'HTTP_GET',\n  'HTTP_PATCH_BLOB',\n  'HTTP_PATCH',\n  'HTTP_POST_BLOB',\n  'HTTP_POST',\n  'HTTP_PUT_BLOB',\n  'HTTP_PUT',\n  'IDENTITY_VAL_LOCAL',\n  'IFNULL',\n  'INSERT',\n  'INSTR',\n  'INTERPRET',\n  'ISFALSE',\n  'ISNOTFALSE',\n  'ISNOTTRUE',\n  'ISTRUE',\n  'JSON_ARRAY',\n  'JSON_OBJECT',\n  'JSON_QUERY',\n  'JSON_TO_BSON',\n  'JSON_UPDATE',\n  'JSON_VALUE',\n  'JULIAN_DAY',\n  'LAND',\n  'LAST_DAY',\n  'LCASE',\n  'LEAST',\n  'LEFT',\n  'LENGTH',\n  'LN',\n  'LNOT',\n  'LOCATE_IN_STRING',\n  'LOCATE',\n  'LOG10',\n  'LOR',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MAX_CARDINALITY',\n  'MAX',\n  'MICROSECOND',\n  'MIDNIGHT_SECONDS',\n  'MIN',\n  'MINUTE',\n  'MOD',\n  'MONTH',\n  'MONTHNAME',\n  'MONTHS_BETWEEN',\n  'MQREAD',\n  'MQREADCLOB',\n  'MQRECEIVE',\n  'MQRECEIVECLOB',\n  'MQSEND',\n  'MULTIPLY_ALT',\n  'NEXT_DAY',\n  'NORMALIZE_DECFLOAT',\n  'NOW',\n  'NULLIF',\n  'NVL',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'PI',\n  'POSITION',\n  'POSSTR',\n  'POW',\n  'POWER',\n  'QUANTIZE',\n  'QUARTER',\n  'RADIANS',\n  'RAISE_ERROR',\n  'RANDOM',\n  'RAND',\n  'REGEXP_COUNT',\n  'REGEXP_INSTR',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REPEAT',\n  'REPLACE',\n  'RID',\n  'RIGHT',\n  'ROUND_TIMESTAMP',\n  'ROUND',\n  'RPAD',\n  'RRN',\n  'RTRIM',\n  'SCORE',\n  'SECOND',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SOUNDEX',\n  'SPACE',\n  'SQRT',\n  'STRIP',\n  'STRLEFT',\n  'STRPOS',\n  'STRRIGHT',\n  'SUBSTR',\n  'SUBSTRING',\n  'TABLE_NAME',\n  'TABLE_SCHEMA',\n  'TAN',\n  'TANH',\n  'TIMESTAMP_FORMAT',\n  'TIMESTAMP_ISO',\n  'TIMESTAMPDIFF_BIG',\n  'TIMESTAMPDIFF',\n  'TO_CHAR',\n  'TO_CLOB',\n  'TO_DATE',\n  'TO_NUMBER',\n  'TO_TIMESTAMP',\n  'TOTALORDER',\n  'TRANSLATE',\n  'TRIM_ARRAY',\n  'TRIM',\n  'TRUNC_TIMESTAMP',\n  'TRUNC',\n  'TRUNCATE',\n  'UCASE',\n  'UPPER',\n  'URL_DECODE',\n  'URL_ENCODE',\n  'VALUE',\n  'VARBINARY_FORMAT',\n  'VARCHAR_BIT_FORMAT',\n  'VARCHAR_FORMAT_BINARY',\n  'VARCHAR_FORMAT',\n  'VERIFY_GROUP_FOR_USER',\n  'WEEK_ISO',\n  'WEEK',\n  'WRAP',\n  'XMLATTRIBUTES',\n  'XMLCOMMENT',\n  'XMLCONCAT',\n  'XMLDOCUMENT',\n  'XMLELEMENT',\n  'XMLFOREST',\n  'XMLNAMESPACES',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLROW',\n  'XMLSERIALIZE',\n  'XMLTEXT',\n  'XMLVALIDATE',\n  'XOR',\n  'XSLTRANSFORM',\n  'YEAR',\n  'ZONED',\n\n  // https://www.ibm.com/docs/en/i/7.5?topic=functions-table\n  'BASE_TABLE',\n  'HTTP_DELETE_BLOB_VERBOSE',\n  'HTTP_DELETE_VERBOSE',\n  'HTTP_GET_BLOB_VERBOSE',\n  'HTTP_GET_VERBOSE',\n  'HTTP_PATCH_BLOB_VERBOSE',\n  'HTTP_PATCH_VERBOSE',\n  'HTTP_POST_BLOB_VERBOSE',\n  'HTTP_POST_VERBOSE',\n  'HTTP_PUT_BLOB_VERBOSE',\n  'HTTP_PUT_VERBOSE',\n  'JSON_TABLE',\n  'MQREADALL',\n  'MQREADALLCLOB',\n  'MQRECEIVEALL',\n  'MQRECEIVEALLCLOB',\n  'XMLTABLE',\n\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-row\n  'UNPACK',\n\n  // https://www.ibm.com/docs/en/i/7.5?topic=expressions-olap-specifications\n  'CUME_DIST',\n  'DENSE_RANK',\n  'FIRST_VALUE',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'NTH_VALUE',\n  'NTILE',\n  'PERCENT_RANK',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'ROW_NUMBER',\n\n  // Type casting\n  'CAST',\n];\n","export const keywords: string[] = [\n  // https://www.ibm.com/docs/en/i/7.5?topic=words-reserved\n  // TODO: This list likely contains all keywords, not only the reserved ones,\n  // try to filter it down to just the reserved keywords.\n  'ABSENT',\n  'ACCORDING',\n  'ACCTNG',\n  'ACTION',\n  'ACTIVATE',\n  'ADD',\n  'ALIAS',\n  'ALL',\n  'ALLOCATE',\n  'ALLOW',\n  'ALTER',\n  'AND',\n  'ANY',\n  'APPEND',\n  'APPLNAME',\n  'ARRAY',\n  'ARRAY_AGG',\n  'ARRAY_TRIM',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'ASSOCIATE',\n  'ATOMIC',\n  'ATTACH',\n  'ATTRIBUTES',\n  'AUTHORIZATION',\n  'AUTONOMOUS',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BIND',\n  'BSON',\n  'BUFFERPOOL',\n  'BY',\n  'CACHE',\n  'CALL',\n  'CALLED',\n  'CARDINALITY',\n  'CASE',\n  'CAST',\n  'CHECK',\n  'CL',\n  'CLOSE',\n  'CLUSTER',\n  'COLLECT',\n  'COLLECTION',\n  'COLUMN',\n  'COMMENT',\n  'COMMIT',\n  'COMPACT',\n  'COMPARISONS',\n  'COMPRESS',\n  'CONCAT',\n  'CONCURRENT',\n  'CONDITION',\n  'CONNECT',\n  'CONNECT_BY_ROOT',\n  'CONNECTION',\n  'CONSTANT',\n  'CONSTRAINT',\n  'CONTAINS',\n  'CONTENT',\n  'CONTINUE',\n  'COPY',\n  'COUNT',\n  'COUNT_BIG',\n  'CREATE',\n  'CREATEIN',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_PATH',\n  'CURRENT_SCHEMA',\n  'CURRENT_SERVER',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DATABASE',\n  'DATAPARTITIONNAME',\n  'DATAPARTITIONNUM',\n  'DAY',\n  'DAYS',\n  'DB2GENERAL',\n  'DB2GENRL',\n  'DB2SQL',\n  'DBINFO',\n  'DBPARTITIONNAME',\n  'DBPARTITIONNUM',\n  'DEACTIVATE',\n  'DEALLOCATE',\n  'DECLARE',\n  'DEFAULT',\n  'DEFAULTS',\n  'DEFER',\n  'DEFINE',\n  'DEFINITION',\n  'DELETE',\n  'DELETING',\n  'DENSE_RANK',\n  'DENSERANK',\n  'DESC',\n  'DESCRIBE',\n  'DESCRIPTOR',\n  'DETACH',\n  'DETERMINISTIC',\n  'DIAGNOSTICS',\n  'DISABLE',\n  'DISALLOW',\n  'DISCONNECT',\n  'DISTINCT',\n  'DO',\n  'DOCUMENT',\n  'DROP',\n  'DYNAMIC',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENABLE',\n  'ENCODING',\n  'ENCRYPTION',\n  'END',\n  'END-EXEC',\n  'ENDING',\n  'ENFORCED',\n  'ERROR',\n  'ESCAPE',\n  'EVERY',\n  'EXCEPT',\n  'EXCEPTION',\n  'EXCLUDING',\n  'EXCLUSIVE',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXTEND',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FENCED',\n  'FETCH',\n  'FIELDPROC',\n  'FILE',\n  'FINAL',\n  'FIRST_VALUE',\n  'FOR',\n  'FOREIGN',\n  'FORMAT',\n  'FREE',\n  'FREEPAGE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'GBPCACHE',\n  'GENERAL',\n  'GENERATED',\n  'GET',\n  'GLOBAL',\n  'GO',\n  'GOTO',\n  'GRANT',\n  'GROUP',\n  'HANDLER',\n  'HASH',\n  'HASH_ROW',\n  'HASHED_VALUE',\n  'HAVING',\n  'HINT',\n  'HOLD',\n  'HOUR',\n  'HOURS',\n  // 'ID', Not actually a reserved keyword\n  'IDENTITY',\n  'IF',\n  'IGNORE',\n  'IMMEDIATE',\n  'IMPLICITLY',\n  'IN',\n  'INCLUDE',\n  'INCLUDING',\n  'INCLUSIVE',\n  'INCREMENT',\n  'INDEX',\n  'INDEXBP',\n  'INDICATOR',\n  'INF',\n  'INFINITY',\n  'INHERIT',\n  'INLINE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INSERTING',\n  'INTEGRITY',\n  'INTERPRET',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ISNULL',\n  'ISOLATION',\n  'ITERATE',\n  'JAVA',\n  'JOIN',\n  'JSON',\n  'JSON_ARRAY',\n  'JSON_ARRAYAGG',\n  'JSON_EXISTS',\n  'JSON_OBJECT',\n  'JSON_OBJECTAGG',\n  'JSON_QUERY',\n  'JSON_TABLE',\n  'JSON_VALUE',\n  'KEEP',\n  'KEY',\n  'KEYS',\n  'LABEL',\n  'LAG',\n  'LANGUAGE',\n  'LAST_VALUE',\n  'LATERAL',\n  'LEAD',\n  'LEAVE',\n  'LEFT',\n  'LEVEL2',\n  'LIKE',\n  'LIMIT',\n  'LINKTYPE',\n  'LISTAGG',\n  'LOCAL',\n  'LOCALDATE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATION',\n  'LOCATOR',\n  'LOCK',\n  'LOCKSIZE',\n  'LOG',\n  'LOGGED',\n  'LOOP',\n  'MAINTAINED',\n  'MASK',\n  'MATCHED',\n  'MATERIALIZED',\n  'MAXVALUE',\n  'MERGE',\n  'MICROSECOND',\n  'MICROSECONDS',\n  'MINPCTUSED',\n  'MINUTE',\n  'MINUTES',\n  'MINVALUE',\n  'MIRROR',\n  'MIXED',\n  'MODE',\n  'MODIFIES',\n  'MONTH',\n  'MONTHS',\n  'NAMESPACE',\n  'NAN',\n  'NATIONAL',\n  'NCHAR',\n  'NCLOB',\n  'NESTED',\n  'NEW',\n  'NEW_TABLE',\n  'NEXTVAL',\n  'NO',\n  'NOCACHE',\n  'NOCYCLE',\n  'NODENAME',\n  'NODENUMBER',\n  'NOMAXVALUE',\n  'NOMINVALUE',\n  'NONE',\n  'NOORDER',\n  'NORMALIZED',\n  'NOT',\n  'NOTNULL',\n  'NTH_VALUE',\n  'NTILE',\n  'NULL',\n  'NULLS',\n  'NVARCHAR',\n  'OBID',\n  'OBJECT',\n  'OF',\n  'OFF',\n  'OFFSET',\n  'OLD',\n  'OLD_TABLE',\n  'OMIT',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'OPTIMIZE',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'ORDINALITY',\n  'ORGANIZE',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERLAY',\n  'OVERRIDING',\n  'PACKAGE',\n  'PADDED',\n  'PAGE',\n  'PAGESIZE',\n  'PARAMETER',\n  'PART',\n  'PARTITION',\n  'PARTITIONED',\n  'PARTITIONING',\n  'PARTITIONS',\n  'PASSING',\n  'PASSWORD',\n  'PATH',\n  'PCTFREE',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERIOD',\n  'PERMISSION',\n  'PIECESIZE',\n  'PIPE',\n  'PLAN',\n  'POSITION',\n  'PREPARE',\n  'PREVVAL',\n  'PRIMARY',\n  'PRIOR',\n  'PRIQTY',\n  'PRIVILEGES',\n  'PROCEDURE',\n  'PROGRAM',\n  'PROGRAMID',\n  'QUERY',\n  'RANGE',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'RCDFMT',\n  'READ',\n  'READS',\n  'RECOVERY',\n  'REFERENCES',\n  'REFERENCING',\n  'REFRESH',\n  'REGEXP_LIKE',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'RESET',\n  'RESIGNAL',\n  'RESTART',\n  'RESULT',\n  'RESULT_SET_LOCATOR',\n  'RETURN',\n  'RETURNING',\n  'RETURNS',\n  'REVOKE',\n  'RID',\n  'RIGHT',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROUTINE',\n  'ROW',\n  'ROW_NUMBER',\n  'ROWNUMBER',\n  'ROWS',\n  'RRN',\n  'RUN',\n  'SAVEPOINT',\n  'SBCS',\n  'SCALAR',\n  'SCHEMA',\n  'SCRATCHPAD',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SECONDS',\n  'SECQTY',\n  'SECURED',\n  'SELECT',\n  'SENSITIVE',\n  'SEQUENCE',\n  'SESSION',\n  'SESSION_USER',\n  'SET',\n  'SIGNAL',\n  'SIMPLE',\n  'SKIP',\n  'SNAN',\n  'SOME',\n  'SOURCE',\n  'SPECIFIC',\n  'SQL',\n  'SQLID',\n  'SQLIND_DEFAULT',\n  'SQLIND_UNASSIGNED',\n  'STACKED',\n  'START',\n  'STARTING',\n  'STATEMENT',\n  'STATIC',\n  'STOGROUP',\n  'SUBSTRING',\n  'SUMMARY',\n  'SYNONYM',\n  'SYSTEM_TIME',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESPACE',\n  'TABLESPACES',\n  'TAG',\n  'THEN',\n  'THREADSAFE',\n  'TO',\n  'TRANSACTION',\n  'TRANSFER',\n  'TRIGGER',\n  'TRIM',\n  'TRIM_ARRAY',\n  'TRUE',\n  'TRUNCATE',\n  'TRY_CAST',\n  'TYPE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNIT',\n  'UNKNOWN',\n  'UNNEST',\n  'UNTIL',\n  'UPDATE',\n  'UPDATING',\n  'URI',\n  'USAGE',\n  'USE',\n  'USER',\n  'USERID',\n  'USING',\n  'VALUE',\n  'VALUES',\n  'VARIABLE',\n  'VARIANT',\n  'VCAT',\n  'VERSION',\n  'VERSIONING',\n  'VIEW',\n  'VOLATILE',\n  'WAIT',\n  'WHEN',\n  'WHENEVER',\n  'WHERE',\n  'WHILE',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'WRAPPED',\n  'WRAPPER',\n  'WRITE',\n  'WRKSTNNAME',\n  'XMLAGG',\n  'XMLATTRIBUTES',\n  'XMLCAST',\n  'XMLCOMMENT',\n  'XMLCONCAT',\n  'XMLDOCUMENT',\n  'XMLELEMENT',\n  'XMLFOREST',\n  'XMLGROUP',\n  'XMLNAMESPACES',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLROW',\n  'XMLSERIALIZE',\n  'XMLTABLE',\n  'XMLTEXT',\n  'XMLVALIDATE',\n  'XSLTRANSFORM',\n  'XSROBJECT',\n  'YEAR',\n  'YEARS',\n  'YES',\n  'ZONE',\n];\n\nexport const dataTypes: string[] = [\n  // https://www.ibm.com/docs/en/i/7.2?topic=iaodsd-odbc-data-types-how-they-correspond-db2-i-database-types\n  'ARRAY',\n  'BIGINT',\n  'BINARY',\n  'BIT',\n  'BLOB',\n  'BOOLEAN',\n  'CCSID',\n  'CHAR',\n  'CHARACTER',\n  'CLOB',\n  'DATA',\n  'DATALINK',\n  'DATE',\n  'DBCLOB',\n  'DECFLOAT',\n  'DECIMAL',\n  'DEC',\n  'DOUBLE',\n  'DOUBLE PRECISION',\n  'FLOAT',\n  'GRAPHIC',\n  'INT',\n  'INTEGER',\n  'LONG',\n  'NUMERIC',\n  'REAL',\n  'ROWID',\n  'SMALLINT',\n  'TIME',\n  'TIMESTAMP',\n  'VARBINARY',\n  'VARCHAR',\n  'VARGRAPHIC',\n  'XML',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './db2i.functions.js';\nimport { dataTypes, keywords } from './db2i.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'INTO',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER [SIBLINGS] BY [INPUT SEQUENCE]',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR UPDATE [OF]',\n  'FOR READ ONLY',\n  'OPTIMIZE FOR',\n  // Data modification\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  'DELETE',\n  'INSERT',\n  // Data definition - table\n  'FOR SYSTEM NAME',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [OR REPLACE] TABLE']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [RECURSIVE] VIEW',\n  // - update:\n  'UPDATE',\n  'WHERE CURRENT OF',\n  'WITH {NC | RR | RS | CS | UR}',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE',\n  // alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  'ALTER [COLUMN]',\n  'DROP [COLUMN]',\n  'SET DATA TYPE', // for alter column\n  'SET {GENERATED ALWAYS | GENERATED BY DEFAULT}', // for alter column\n  'SET NOT NULL', // for alter column\n  'SET {NOT HIDDEN | IMPLICITLY HIDDEN}', // for alter column\n  'SET FIELDPROC', // for alter column\n  'DROP {DEFAULT | NOT NULL | GENERATED | IDENTITY | ROW CHANGE TIMESTAMP | FIELDPROC}', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // other\n  'SET [CURRENT] SCHEMA',\n  'SET CURRENT_SCHEMA',\n  // https://www.ibm.com/docs/en/i/7.5?topic=reference-statements\n  'ALLOCATE CURSOR',\n  'ALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL] SQL',\n  'ALTER [SPECIFIC] {FUNCTION | PROCEDURE}',\n  'ALTER {MASK | PERMISSION | SEQUENCE | TRIGGER}',\n  'ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}',\n  'BEGIN DECLARE SECTION',\n  'CALL',\n  'CLOSE',\n  'COMMENT ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PARAMETER | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}',\n  'COMMENT ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}',\n  'COMMENT ON PARAMETER SPECIFIC {FUNCTION | PROCEDURE | ROUTINE}',\n  'COMMENT ON [TABLE FUNCTION] RETURN COLUMN',\n  'COMMENT ON [TABLE FUNCTION] RETURN COLUMN SPECIFIC [PROCEDURE | ROUTINE]',\n  'COMMIT [WORK] [HOLD]',\n  'CONNECT [TO | RESET] USER',\n  'CREATE [OR REPLACE] {ALIAS | FUNCTION | MASK | PERMISSION | PROCEDURE | SEQUENCE | TRIGGER | VARIABLE}',\n  'CREATE [ENCODED VECTOR] INDEX',\n  'CREATE UNIQUE [WHERE NOT NULL] INDEX',\n  'CREATE SCHEMA',\n  'CREATE TYPE',\n  'DEALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL]',\n  'DECLARE CURSOR',\n  'DECLARE GLOBAL TEMPORARY TABLE',\n  'DECLARE',\n  'DESCRIBE CURSOR',\n  'DESCRIBE INPUT',\n  'DESCRIBE [OUTPUT]',\n  'DESCRIBE {PROCEDURE | ROUTINE}',\n  'DESCRIBE TABLE',\n  'DISCONNECT ALL [SQL]',\n  'DISCONNECT [CURRENT]',\n  'DROP {ALIAS | INDEX | MASK | PACKAGE | PERMISSION | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT} [IF EXISTS]',\n  'DROP [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE} [IF EXISTS]',\n  'END DECLARE SECTION',\n  'EXECUTE [IMMEDIATE]',\n  // 'FETCH {NEXT | PRIOR | FIRST | LAST | BEFORE | AFTER | CURRENT} [FROM]',\n  'FREE LOCATOR',\n  'GET [SQL] DESCRIPTOR [LOCAL | GLOBAL]',\n  'GET [CURRENT | STACKED] DIAGNOSTICS',\n  'GRANT {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}',\n  'HOLD LOCATOR',\n  'INCLUDE',\n  'LABEL ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}',\n  'LABEL ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}',\n  'LOCK TABLE',\n  'OPEN',\n  'PREPARE',\n  'REFRESH TABLE',\n  'RELEASE',\n  'RELEASE [TO] SAVEPOINT',\n  'RENAME [TABLE | INDEX] TO',\n  'REVOKE {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}',\n  'ROLLBACK [WORK] [HOLD | TO SAVEPOINT]',\n  'SAVEPOINT',\n  'SET CONNECTION',\n  'SET CURRENT {DEBUG MODE | DECFLOAT ROUNDING MODE | DEGREE | IMPLICIT XMLPARSE OPTION | TEMPORAL SYSTEM_TIME}',\n  'SET [SQL] DESCRIPTOR [LOCAL | GLOBAL]',\n  'SET ENCRYPTION PASSWORD',\n  'SET OPTION',\n  'SET {[CURRENT [FUNCTION]] PATH | CURRENT_PATH}',\n  'SET RESULT SETS [WITH RETURN [TO CALLER | TO CLIENT]]',\n  'SET SESSION AUTHORIZATION',\n  'SET SESSION_USER',\n  'SET TRANSACTION',\n  'SIGNAL SQLSTATE [VALUE]',\n  'TAG',\n  'TRANSFER OWNERSHIP OF',\n  'WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT [ALL]', 'INTERSECT [ALL]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '[LEFT | RIGHT] EXCEPTION JOIN',\n  '{INNER | CROSS} JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON DELETE',\n  'ON UPDATE',\n  'SET NULL',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\n// https://www.ibm.com/docs/en/i/7.5?topic=reference-sql\nexport const db2i: DialectOptions = {\n  name: 'db2i',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    nestedBlockComments: true,\n    extraParens: ['[]'],\n    stringTypes: [\n      { quote: \"''-qq\", prefixes: ['G', 'N'] },\n      { quote: \"''-raw\", prefixes: ['X', 'BX', 'GX', 'UX'], requirePrefix: true },\n    ],\n    identTypes: [`\"\"-qq`],\n    identChars: { first: '@#$', rest: '@#$' },\n    paramTypes: { positional: true, named: [':'] },\n    paramChars: { first: '@#$', rest: '@#$' },\n    operators: ['**', '¬=', '¬>', '¬<', '!>', '!<', '||', '=>'],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF\n  // math\n  'ABS',\n  'ACOS',\n  'ASIN',\n  'ATAN',\n  'BIN',\n  'BROUND',\n  'CBRT',\n  'CEIL',\n  'CEILING',\n  'CONV',\n  'COS',\n  'DEGREES',\n  // 'E',\n  'EXP',\n  'FACTORIAL',\n  'FLOOR',\n  'GREATEST',\n  'HEX',\n  'LEAST',\n  'LN',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'NEGATIVE',\n  'PI',\n  'PMOD',\n  'POSITIVE',\n  'POW',\n  'POWER',\n  'RADIANS',\n  'RAND',\n  'ROUND',\n  'SHIFTLEFT',\n  'SHIFTRIGHT',\n  'SHIFTRIGHTUNSIGNED',\n  'SIGN',\n  'SIN',\n  'SQRT',\n  'TAN',\n  'UNHEX',\n  'WIDTH_BUCKET',\n\n  // array\n  'ARRAY_CONTAINS',\n  'MAP_KEYS',\n  'MAP_VALUES',\n  'SIZE',\n  'SORT_ARRAY',\n\n  // conversion\n  'BINARY',\n  'CAST',\n\n  // date\n  'ADD_MONTHS',\n  'DATE',\n  'DATE_ADD',\n  'DATE_FORMAT',\n  'DATE_SUB',\n  'DATEDIFF',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFYEAR',\n  'EXTRACT',\n  'FROM_UNIXTIME',\n  'FROM_UTC_TIMESTAMP',\n  'HOUR',\n  'LAST_DAY',\n  'MINUTE',\n  'MONTH',\n  'MONTHS_BETWEEN',\n  'NEXT_DAY',\n  'QUARTER',\n  'SECOND',\n  'TIMESTAMP',\n  'TO_DATE',\n  'TO_UTC_TIMESTAMP',\n  'TRUNC',\n  'UNIX_TIMESTAMP',\n  'WEEKOFYEAR',\n  'YEAR',\n\n  // conditional\n  'ASSERT_TRUE',\n  'COALESCE',\n  'IF',\n  'ISNOTNULL',\n  'ISNULL',\n  'NULLIF',\n  'NVL',\n\n  // string\n  'ASCII',\n  'BASE64',\n  'CHARACTER_LENGTH',\n  'CHR',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONTEXT_NGRAMS',\n  'DECODE',\n  'ELT',\n  'ENCODE',\n  'FIELD',\n  'FIND_IN_SET',\n  'FORMAT_NUMBER',\n  'GET_JSON_OBJECT',\n  'IN_FILE',\n  'INITCAP',\n  'INSTR',\n  'LCASE',\n  'LENGTH',\n  'LEVENSHTEIN',\n  'LOCATE',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'NGRAMS',\n  'OCTET_LENGTH',\n  'PARSE_URL',\n  'PRINTF',\n  'QUOTE',\n  'REGEXP_EXTRACT',\n  'REGEXP_REPLACE',\n  'REPEAT',\n  'REVERSE',\n  'RPAD',\n  'RTRIM',\n  'SENTENCES',\n  'SOUNDEX',\n  'SPACE',\n  'SPLIT',\n  'STR_TO_MAP',\n  'SUBSTR',\n  'SUBSTRING',\n  'TRANSLATE',\n  'TRIM',\n  'UCASE',\n  'UNBASE64',\n  'UPPER',\n\n  // masking\n  'MASK',\n  'MASK_FIRST_N',\n  'MASK_HASH',\n  'MASK_LAST_N',\n  'MASK_SHOW_FIRST_N',\n  'MASK_SHOW_LAST_N',\n\n  // misc\n  'AES_DECRYPT',\n  'AES_ENCRYPT',\n  'CRC32',\n  'CURRENT_DATABASE',\n  'CURRENT_USER',\n  'HASH',\n  'JAVA_METHOD',\n  'LOGGED_IN_USER',\n  'MD5',\n  'REFLECT',\n  'SHA',\n  'SHA1',\n  'SHA2',\n  'SURROGATE_KEY',\n  'VERSION',\n\n  // aggregate\n  'AVG',\n  'COLLECT_LIST',\n  'COLLECT_SET',\n  'CORR',\n  'COUNT',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'HISTOGRAM_NUMERIC',\n  'MAX',\n  'MIN',\n  'NTILE',\n  'PERCENTILE',\n  'PERCENTILE_APPROX',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUM',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n\n  // table\n  'EXPLODE',\n  'INLINE',\n  'JSON_TUPLE',\n  'PARSE_URL_TUPLE',\n  'POSEXPLODE',\n  'STACK',\n\n  // https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics\n  'LEAD',\n  'LAG',\n  'FIRST_VALUE',\n  'LAST_VALUE',\n  'RANK',\n  'ROW_NUMBER',\n  'DENSE_RANK',\n  'CUME_DIST',\n  'PERCENT_RANK',\n  'NTILE',\n];\n","export const keywords: string[] = [\n  // https://cwiki.apache.org/confluence/display/hive/languagemanual+ddl\n  // Non-reserved keywords have proscribed meanings in. HiveQL, but can still be used as table or column names\n  'ADD',\n  'ADMIN',\n  'AFTER',\n  'ANALYZE',\n  'ARCHIVE',\n  'ASC',\n  'BEFORE',\n  'BUCKET',\n  'BUCKETS',\n  'CASCADE',\n  'CHANGE',\n  'CLUSTER',\n  'CLUSTERED',\n  'CLUSTERSTATUS',\n  'COLLECTION',\n  'COLUMNS',\n  'COMMENT',\n  'COMPACT',\n  'COMPACTIONS',\n  'COMPUTE',\n  'CONCATENATE',\n  'CONTINUE',\n  'DATA',\n  'DATABASES',\n  'DATETIME',\n  'DAY',\n  'DBPROPERTIES',\n  'DEFERRED',\n  'DEFINED',\n  'DELIMITED',\n  'DEPENDENCY',\n  'DESC',\n  'DIRECTORIES',\n  'DIRECTORY',\n  'DISABLE',\n  'DISTRIBUTE',\n  'ELEM_TYPE',\n  'ENABLE',\n  'ESCAPED',\n  'EXCLUSIVE',\n  'EXPLAIN',\n  'EXPORT',\n  'FIELDS',\n  'FILE',\n  'FILEFORMAT',\n  'FIRST',\n  'FORMAT',\n  'FORMATTED',\n  'FUNCTIONS',\n  'HOLD_DDLTIME',\n  'HOUR',\n  'IDXPROPERTIES',\n  'IGNORE',\n  'INDEX',\n  'INDEXES',\n  'INPATH',\n  'INPUTDRIVER',\n  'INPUTFORMAT',\n  'ITEMS',\n  'JAR',\n  'KEYS',\n  'KEY_TYPE',\n  'LIMIT',\n  'LINES',\n  'LOAD',\n  'LOCATION',\n  'LOCK',\n  'LOCKS',\n  'LOGICAL',\n  'LONG',\n  'MAPJOIN',\n  'MATERIALIZED',\n  'METADATA',\n  'MINUS',\n  'MINUTE',\n  'MONTH',\n  'MSCK',\n  'NOSCAN',\n  'NO_DROP',\n  'OFFLINE',\n  'OPTION',\n  'OUTPUTDRIVER',\n  'OUTPUTFORMAT',\n  'OVERWRITE',\n  'OWNER',\n  'PARTITIONED',\n  'PARTITIONS',\n  'PLUS',\n  'PRETTY',\n  'PRINCIPALS',\n  'PROTECTION',\n  'PURGE',\n  'READ',\n  'READONLY',\n  'REBUILD',\n  'RECORDREADER',\n  'RECORDWRITER',\n  'RELOAD',\n  'RENAME',\n  'REPAIR',\n  'REPLACE',\n  'REPLICATION',\n  'RESTRICT',\n  'REWRITE',\n  'ROLE',\n  'ROLES',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND',\n  'SEMI',\n  'SERDE',\n  'SERDEPROPERTIES',\n  'SERVER',\n  'SETS',\n  'SHARED',\n  'SHOW',\n  'SHOW_DATABASE',\n  'SKEWED',\n  'SORT',\n  'SORTED',\n  'SSL',\n  'STATISTICS',\n  'STORED',\n  'STREAMTABLE',\n  'STRING',\n  'TABLES',\n  'TBLPROPERTIES',\n  'TEMPORARY',\n  'TERMINATED',\n  'TINYINT',\n  'TOUCH',\n  'TRANSACTIONS',\n  'UNARCHIVE',\n  'UNDO',\n  'UNIONTYPE',\n  'UNLOCK',\n  'UNSET',\n  'UNSIGNED',\n  'URI',\n  'USE',\n  'UTC',\n  'UTCTIMESTAMP',\n  'VALUE_TYPE',\n  'VIEW',\n  'WHILE',\n  'YEAR',\n  'AUTOCOMMIT',\n  'ISOLATION',\n  'LEVEL',\n  'OFFSET',\n  'SNAPSHOT',\n  'TRANSACTION',\n  'WORK',\n  'WRITE',\n  'ABORT',\n  'KEY',\n  'LAST',\n  'NORELY',\n  'NOVALIDATE',\n  'NULLS',\n  'RELY',\n  'VALIDATE',\n  'DETAIL',\n  'DOW',\n  'EXPRESSION',\n  'OPERATOR',\n  'QUARTER',\n  'SUMMARY',\n  'VECTORIZATION',\n  'WEEK',\n  'YEARS',\n  'MONTHS',\n  'WEEKS',\n  'DAYS',\n  'HOURS',\n  'MINUTES',\n  'SECONDS',\n  'TIMESTAMPTZ',\n  'ZONE',\n\n  // reserved\n  'ALL',\n  'ALTER',\n  'AND',\n  'AS',\n  'AUTHORIZATION',\n  'BETWEEN',\n  'BOTH',\n  'BY',\n  'CASE',\n  'CAST',\n  'COLUMN',\n  'CONF',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_TIMESTAMP',\n  'CURSOR',\n  'DATABASE',\n  'DELETE',\n  'DESCRIBE',\n  'DISTINCT',\n  'DROP',\n  'ELSE',\n  'END',\n  'EXCHANGE',\n  'EXISTS',\n  'EXTENDED',\n  'EXTERNAL',\n  'FALSE',\n  'FETCH',\n  'FOLLOWING',\n  'FOR',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'HAVING',\n  'IF',\n  'IMPORT',\n  'IN',\n  'INNER',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'JOIN',\n  'LATERAL',\n  'LEFT',\n  'LESS',\n  'LIKE',\n  'LOCAL',\n  'MACRO',\n  'MORE',\n  'NONE',\n  'NOT',\n  'NULL',\n  'OF',\n  'ON',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'PARTIALSCAN',\n  'PARTITION',\n  'PERCENT',\n  'PRECEDING',\n  'PRESERVE',\n  'PROCEDURE',\n  'RANGE',\n  'READS',\n  'REDUCE',\n  'REVOKE',\n  'RIGHT',\n  'ROLLUP',\n  'ROW',\n  'ROWS',\n  'SELECT',\n  'SET',\n  'TABLE',\n  'TABLESAMPLE',\n  'THEN',\n  'TO',\n  'TRANSFORM',\n  'TRIGGER',\n  'TRUE',\n  'TRUNCATE',\n  'UNBOUNDED',\n  'UNION',\n  'UNIQUEJOIN',\n  'UPDATE',\n  'USER',\n  'USING',\n  'UTC_TMESTAMP',\n  'VALUES',\n  'WHEN',\n  'WHERE',\n  'WINDOW',\n  'WITH',\n  'COMMIT',\n  'ONLY',\n  'REGEXP',\n  'RLIKE',\n  'ROLLBACK',\n  'START',\n  'CACHE',\n  'CONSTRAINT',\n  'FOREIGN',\n  'PRIMARY',\n  'REFERENCES',\n  'DAYOFWEEK',\n  'EXTRACT',\n  'FLOOR',\n  'VIEWS',\n  'TIME',\n  'SYNC',\n\n  // fileTypes\n  'TEXTFILE',\n  'SEQUENCEFILE',\n  'ORC',\n  'CSV',\n  'TSV',\n  'PARQUET',\n  'AVRO',\n  'RCFILE',\n  'JSONFILE',\n  'INPUTFORMAT',\n  'OUTPUTFORMAT',\n];\n\nexport const dataTypes: string[] = [\n  // https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types\n  'ARRAY',\n  'BIGINT',\n  'BINARY',\n  'BOOLEAN',\n  'CHAR',\n  'DATE',\n  'DECIMAL',\n  'DOUBLE',\n  'FLOAT',\n  'INT',\n  'INTEGER',\n  'INTERVAL',\n  'MAP',\n  'NUMERIC',\n  'PRECISION',\n  'SMALLINT',\n  'STRUCT',\n  'TIMESTAMP',\n  'VARCHAR',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './hive.functions.js';\nimport { dataTypes, keywords } from './hive.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'SORT BY',\n  'CLUSTER BY',\n  'DISTRIBUTE BY',\n  'LIMIT',\n  // Data manipulation\n  // - insert:\n  //   Hive does not actually support plain INSERT INTO, only INSERT INTO TABLE\n  //   but it's a nuisance to not support it, as all other dialects do.\n  'INSERT INTO [TABLE]',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  'INSERT [VALUES]',\n  // - insert overwrite directory:\n  //   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Writingdataintothefilesystemfromqueries\n  'INSERT OVERWRITE [LOCAL] DIRECTORY',\n  // - load:\n  //   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Loadingfilesintotables\n  'LOAD DATA [LOCAL] INPATH',\n  '[OVERWRITE] INTO TABLE',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'RENAME TO',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // other\n  'ALTER',\n  'CREATE',\n  'USE',\n  'DESCRIBE',\n  'DROP',\n  'FETCH',\n  'SHOW',\n  'STORED AS',\n  'STORED BY',\n  'ROW FORMAT',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL | DISTINCT]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  // non-standard joins\n  'LEFT SEMI JOIN',\n]);\n\nconst reservedPhrases = expandPhrases(['{ROWS | RANGE} BETWEEN']);\n\n// https://cwiki.apache.org/confluence/display/Hive/LanguageManual\nexport const hive: DialectOptions = {\n  name: 'hive',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    extraParens: ['[]'],\n    stringTypes: ['\"\"-bs', \"''-bs\"],\n    identTypes: ['``'],\n    variableTypes: [{ quote: '{}', prefixes: ['$'], requirePrefix: true }],\n    operators: ['%', '~', '^', '|', '&', '<=>', '==', '!', '||'],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","import { EOF_TOKEN, isToken, Token, TokenType } from '../../lexer/token.js';\n\n// Shared functionality used by all MariaDB-like SQL dialects.\n\nexport function postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.SET(token) && nextToken.text === '(') {\n      // This is SET datatype, not SET statement\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n    const prevToken = tokens[i - 1] || EOF_TOKEN;\n    if (isToken.VALUES(token) && prevToken.text === '=') {\n      // This is VALUES() function, not VALUES clause\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n    return token;\n  });\n}\n","export const keywords: string[] = [\n  // https://mariadb.com/kb/en/reserved-words/\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CURRENT_DATE',\n  'CURRENT_ROLE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DELETE_DOMAIN_ID',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DO_DOMAIN_IDS',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'GENERAL',\n  'GRANT',\n  'GROUP',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IGNORE_DOMAIN_IDS',\n  'IGNORE_SERVER_IDS',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_HEARTBEAT_PERIOD',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NULL',\n  'OFFSET',\n  'ON',\n  'OPTIMIZE',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PAGE_CHECKSUM',\n  'PARSE_VCOL_EXPR',\n  'PARTITION',\n  'POSITION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'RECURSIVE',\n  'REF_SYSTEM_ID',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'RETURNING',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW_NUMBER',\n  'ROWS',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SLOW',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STATS_AUTO_RECALC',\n  'STATS_PERSISTENT',\n  'STATS_SAMPLE_PAGES',\n  'STRAIGHT_JOIN',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n\nexport const dataTypes: string[] = [\n  // https://mariadb.com/kb/en/data-types/\n  'BIGINT',\n  'BINARY',\n  'BIT',\n  'BLOB',\n  'CHAR BYTE',\n  'CHAR',\n  'CHARACTER',\n  'DATETIME',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE PRECISION',\n  'DOUBLE',\n  'ENUM',\n  'FIXED',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'NATIONAL CHAR',\n  'NATIONAL VARCHAR',\n  'NUMERIC',\n  'PRECISION',\n  'REAL',\n  'SMALLINT',\n  'TEXT',\n  'TIMESTAMP',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'YEAR',\n  // 'NUMBER', // ?? In oracle mode only\n  // 'SET' // handled as special-case in postProcess\n];\n","export const functions: string[] = [\n  // https://mariadb.com/kb/en/information-schema-sql_functions-table/\n  'ADDDATE',\n  'ADD_MONTHS',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'CAST',\n  'COUNT',\n  'CUME_DIST',\n  'CURDATE',\n  'CURTIME',\n  'DATE_ADD',\n  'DATE_SUB',\n  'DATE_FORMAT',\n  'DECODE',\n  'DENSE_RANK',\n  'EXTRACT',\n  'FIRST_VALUE',\n  'GROUP_CONCAT',\n  'JSON_ARRAYAGG',\n  'JSON_OBJECTAGG',\n  'LAG',\n  'LEAD',\n  'MAX',\n  'MEDIAN',\n  'MID',\n  'MIN',\n  'NOW',\n  'NTH_VALUE',\n  'NTILE',\n  'POSITION',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'RANK',\n  'ROW_NUMBER',\n  'SESSION_USER',\n  'STD',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUBDATE',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUM',\n  'SYSTEM_USER',\n  'TRIM',\n  'TRIM_ORACLE',\n  'VARIANCE',\n  'VAR_POP',\n  'VAR_SAMP',\n  'ABS',\n  'ACOS',\n  'ADDTIME',\n  'AES_DECRYPT',\n  'AES_ENCRYPT',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'BENCHMARK',\n  'BIN',\n  'BINLOG_GTID_POS',\n  'BIT_COUNT',\n  'BIT_LENGTH',\n  'CEIL',\n  'CEILING',\n  'CHARACTER_LENGTH',\n  'CHAR_LENGTH',\n  'CHR',\n  'COERCIBILITY',\n  'COLUMN_CHECK',\n  'COLUMN_EXISTS',\n  'COLUMN_LIST',\n  'COLUMN_JSON',\n  'COMPRESS',\n  'CONCAT',\n  'CONCAT_OPERATOR_ORACLE',\n  'CONCAT_WS',\n  'CONNECTION_ID',\n  'CONV',\n  'CONVERT_TZ',\n  'COS',\n  'COT',\n  'CRC32',\n  'DATEDIFF',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'DEGREES',\n  'DECODE_HISTOGRAM',\n  'DECODE_ORACLE',\n  'DES_DECRYPT',\n  'DES_ENCRYPT',\n  'ELT',\n  'ENCODE',\n  'ENCRYPT',\n  'EXP',\n  'EXPORT_SET',\n  'EXTRACTVALUE',\n  'FIELD',\n  'FIND_IN_SET',\n  'FLOOR',\n  'FORMAT',\n  'FOUND_ROWS',\n  'FROM_BASE64',\n  'FROM_DAYS',\n  'FROM_UNIXTIME',\n  'GET_LOCK',\n  'GREATEST',\n  'HEX',\n  'IFNULL',\n  'INSTR',\n  'ISNULL',\n  'IS_FREE_LOCK',\n  'IS_USED_LOCK',\n  'JSON_ARRAY',\n  'JSON_ARRAY_APPEND',\n  'JSON_ARRAY_INSERT',\n  'JSON_COMPACT',\n  'JSON_CONTAINS',\n  'JSON_CONTAINS_PATH',\n  'JSON_DEPTH',\n  'JSON_DETAILED',\n  'JSON_EXISTS',\n  'JSON_EXTRACT',\n  'JSON_INSERT',\n  'JSON_KEYS',\n  'JSON_LENGTH',\n  'JSON_LOOSE',\n  'JSON_MERGE',\n  'JSON_MERGE_PATCH',\n  'JSON_MERGE_PRESERVE',\n  'JSON_QUERY',\n  'JSON_QUOTE',\n  'JSON_OBJECT',\n  'JSON_REMOVE',\n  'JSON_REPLACE',\n  'JSON_SET',\n  'JSON_SEARCH',\n  'JSON_TYPE',\n  'JSON_UNQUOTE',\n  'JSON_VALID',\n  'JSON_VALUE',\n  'LAST_DAY',\n  'LAST_INSERT_ID',\n  'LCASE',\n  'LEAST',\n  'LENGTH',\n  'LENGTHB',\n  'LN',\n  'LOAD_FILE',\n  'LOCATE',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'LOWER',\n  'LPAD',\n  'LPAD_ORACLE',\n  'LTRIM',\n  'LTRIM_ORACLE',\n  'MAKEDATE',\n  'MAKETIME',\n  'MAKE_SET',\n  'MASTER_GTID_WAIT',\n  'MASTER_POS_WAIT',\n  'MD5',\n  'MONTHNAME',\n  'NAME_CONST',\n  'NVL',\n  'NVL2',\n  'OCT',\n  'OCTET_LENGTH',\n  'ORD',\n  'PERIOD_ADD',\n  'PERIOD_DIFF',\n  'PI',\n  'POW',\n  'POWER',\n  'QUOTE',\n  'REGEXP_INSTR',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'RADIANS',\n  'RAND',\n  'RELEASE_ALL_LOCKS',\n  'RELEASE_LOCK',\n  'REPLACE_ORACLE',\n  'REVERSE',\n  'ROUND',\n  'RPAD',\n  'RPAD_ORACLE',\n  'RTRIM',\n  'RTRIM_ORACLE',\n  'SEC_TO_TIME',\n  'SHA',\n  'SHA1',\n  'SHA2',\n  'SIGN',\n  'SIN',\n  'SLEEP',\n  'SOUNDEX',\n  'SPACE',\n  'SQRT',\n  'STRCMP',\n  'STR_TO_DATE',\n  'SUBSTR_ORACLE',\n  'SUBSTRING_INDEX',\n  'SUBTIME',\n  'SYS_GUID',\n  'TAN',\n  'TIMEDIFF',\n  'TIME_FORMAT',\n  'TIME_TO_SEC',\n  'TO_BASE64',\n  'TO_CHAR',\n  'TO_DAYS',\n  'TO_SECONDS',\n  'UCASE',\n  'UNCOMPRESS',\n  'UNCOMPRESSED_LENGTH',\n  'UNHEX',\n  'UNIX_TIMESTAMP',\n  'UPDATEXML',\n  'UPPER',\n  'UUID',\n  'UUID_SHORT',\n  'VERSION',\n  'WEEKDAY',\n  'WEEKOFYEAR',\n  'WSREP_LAST_WRITTEN_GTID',\n  'WSREP_LAST_SEEN_GTID',\n  'WSREP_SYNC_WAIT_UPTO_GTID',\n  'YEARWEEK',\n  // CASE expression shorthands\n  'COALESCE',\n  'NULLIF',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { postProcess } from './likeMariaDb.js';\nimport { dataTypes, keywords } from './mariadb.keywords.js';\nimport { functions } from './mariadb.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | DISTINCTROW]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]',\n  'REPLACE [LOW_PRIORITY | DELAYED] [INTO]',\n  'VALUES',\n  'ON DUPLICATE KEY UPDATE',\n  // - update:\n  'SET',\n  // other\n  'RETURNING',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE [LOW_PRIORITY] [IGNORE]',\n  // - delete:\n  'DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM',\n  // - drop table:\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]',\n  'ADD [COLUMN] [IF NOT EXISTS]',\n  '{CHANGE | MODIFY} [COLUMN] [IF EXISTS]',\n  'DROP [COLUMN] [IF EXISTS]',\n  'RENAME [TO]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  'SET {VISIBLE | INVISIBLE}', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // https://mariadb.com/docs/reference/mdb/sql-statements/\n  'ALTER DATABASE',\n  'ALTER DATABASE COMMENT',\n  'ALTER EVENT',\n  'ALTER FUNCTION',\n  'ALTER PROCEDURE',\n  'ALTER SCHEMA',\n  'ALTER SCHEMA COMMENT',\n  'ALTER SEQUENCE',\n  'ALTER SERVER',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE',\n  'ANALYZE TABLE',\n  'BACKUP LOCK',\n  'BACKUP STAGE',\n  'BACKUP UNLOCK',\n  'BEGIN',\n  'BINLOG',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE MASTER TO',\n  'CHECK TABLE',\n  'CHECK VIEW',\n  'CHECKSUM TABLE',\n  'COMMIT',\n  'CREATE AGGREGATE FUNCTION',\n  'CREATE DATABASE',\n  'CREATE EVENT',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE PROCEDURE',\n  'CREATE ROLE',\n  'CREATE SEQUENCE',\n  'CREATE SERVER',\n  'CREATE SPATIAL INDEX',\n  'CREATE TRIGGER',\n  'CREATE UNIQUE INDEX',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DROP DATABASE',\n  'DROP EVENT',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP PREPARE',\n  'DROP PROCEDURE',\n  'DROP ROLE',\n  'DROP SEQUENCE',\n  'DROP SERVER',\n  'DROP TRIGGER',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'GET DIAGNOSTICS',\n  'GET DIAGNOSTICS CONDITION',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'INSTALL PLUGIN',\n  'INSTALL SONAME',\n  'KILL',\n  'LOAD DATA INFILE',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML INFILE',\n  'LOCK TABLE',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'PURGE MASTER LOGS',\n  'RELEASE SAVEPOINT',\n  'RENAME TABLE',\n  'RENAME USER',\n  'REPAIR TABLE',\n  'REPAIR VIEW',\n  'RESET MASTER',\n  'RESET QUERY CACHE',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESIGNAL',\n  'REVOKE',\n  'ROLLBACK',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET GLOBAL TRANSACTION',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET ROLE',\n  'SET STATEMENT',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW ALL REPLICAS STATUS',\n  'SHOW ALL SLAVES STATUS',\n  'SHOW AUTHORS',\n  'SHOW BINARY LOGS',\n  'SHOW BINLOG EVENTS',\n  'SHOW BINLOG STATUS',\n  'SHOW CHARACTER SET',\n  'SHOW CLIENT_STATISTICS',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CONTRIBUTORS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE EVENT',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PACKAGE',\n  'SHOW CREATE PACKAGE BODY',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE SEQUENCE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE TRIGGER',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINE INNODB STATUS',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW EVENTS',\n  'SHOW EXPLAIN',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW INDEXES',\n  'SHOW INDEX_STATISTICS',\n  'SHOW KEYS',\n  'SHOW LOCALES',\n  'SHOW MASTER LOGS',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PACKAGE BODY CODE',\n  'SHOW PACKAGE BODY STATUS',\n  'SHOW PACKAGE STATUS',\n  'SHOW PLUGINS',\n  'SHOW PLUGINS SONAME',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW QUERY_RESPONSE_TIME',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA',\n  'SHOW REPLICA HOSTS',\n  'SHOW REPLICA STATUS',\n  'SHOW SCHEMAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW SLAVE STATUS',\n  'SHOW STATUS',\n  'SHOW STORAGE ENGINES',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW TRIGGERS',\n  'SHOW USER_STATISTICS',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHOW WSREP_MEMBERSHIP',\n  'SHOW WSREP_STATUS',\n  'SHUTDOWN',\n  'SIGNAL',\n  'START ALL REPLICAS',\n  'START ALL SLAVES',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP ALL REPLICAS',\n  'STOP ALL SLAVES',\n  'STOP REPLICA',\n  'STOP SLAVE',\n  'UNINSTALL PLUGIN',\n  'UNINSTALL SONAME',\n  'UNLOCK TABLE',\n  'USE',\n  'XA BEGIN',\n  'XA COMMIT',\n  'XA END',\n  'XA PREPARE',\n  'XA RECOVER',\n  'XA ROLLBACK',\n  'XA START',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n  'MINUS [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n  'CHARACTER SET',\n  '{ROWS | RANGE} BETWEEN',\n  'IDENTIFIED BY',\n]);\n\n// For reference: https://mariadb.com/kb/en/sql-statements-structure/\nexport const mariadb: DialectOptions = {\n  name: 'mariadb',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: [\n      '\"\"-qq-bs',\n      \"''-qq-bs\",\n      { quote: \"''-raw\", prefixes: ['B', 'X'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n    variableTypes: [\n      { regex: '@@?[A-Za-z0-9_.$]+' },\n      { quote: '\"\"-qq-bs', prefixes: ['@'], requirePrefix: true },\n      { quote: \"''-qq-bs\", prefixes: ['@'], requirePrefix: true },\n      { quote: '``', prefixes: ['@'], requirePrefix: true },\n    ],\n    paramTypes: { positional: true },\n    lineCommentTypes: ['--', '#'],\n    operators: [\n      '%',\n      ':=',\n      '&',\n      '|',\n      '^',\n      '~',\n      '<<',\n      '>>',\n      '<=>',\n      '&&',\n      '||',\n      '!',\n      '*.*', // Not actually an operator\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const keywords: string[] = [\n  // https://dev.mysql.com/doc/refman/8.0/en/keywords.html\n  'ACCESSIBLE', // (R)\n  'ADD', // (R)\n  'ALL', // (R)\n  'ALTER', // (R)\n  'ANALYZE', // (R)\n  'AND', // (R)\n  'AS', // (R)\n  'ASC', // (R)\n  'ASENSITIVE', // (R)\n  'BEFORE', // (R)\n  'BETWEEN', // (R)\n  'BOTH', // (R)\n  'BY', // (R)\n  'CALL', // (R)\n  'CASCADE', // (R)\n  'CASE', // (R)\n  'CHANGE', // (R)\n  'CHECK', // (R)\n  'COLLATE', // (R)\n  'COLUMN', // (R)\n  'CONDITION', // (R)\n  'CONSTRAINT', // (R)\n  'CONTINUE', // (R)\n  'CONVERT', // (R)\n  'CREATE', // (R)\n  'CROSS', // (R)\n  'CUBE', // (R)\n  'CUME_DIST', // (R)\n  'CURRENT_DATE', // (R)\n  'CURRENT_TIME', // (R)\n  'CURRENT_TIMESTAMP', // (R)\n  'CURRENT_USER', // (R)\n  'CURSOR', // (R)\n  'DATABASE', // (R)\n  'DATABASES', // (R)\n  'DAY_HOUR', // (R)\n  'DAY_MICROSECOND', // (R)\n  'DAY_MINUTE', // (R)\n  'DAY_SECOND', // (R)\n  'DECLARE', // (R)\n  'DEFAULT', // (R)\n  'DELAYED', // (R)\n  'DELETE', // (R)\n  'DENSE_RANK', // (R)\n  'DESC', // (R)\n  'DESCRIBE', // (R)\n  'DETERMINISTIC', // (R)\n  'DISTINCT', // (R)\n  'DISTINCTROW', // (R)\n  'DIV', // (R)\n  'DROP', // (R)\n  'DUAL', // (R)\n  'EACH', // (R)\n  'ELSE', // (R)\n  'ELSEIF', // (R)\n  'EMPTY', // (R)\n  'ENCLOSED', // (R)\n  'ESCAPED', // (R)\n  'EXCEPT', // (R)\n  'EXISTS', // (R)\n  'EXIT', // (R)\n  'EXPLAIN', // (R)\n  'FALSE', // (R)\n  'FETCH', // (R)\n  'FIRST_VALUE', // (R)\n  'FOR', // (R)\n  'FORCE', // (R)\n  'FOREIGN', // (R)\n  'FROM', // (R)\n  'FULLTEXT', // (R)\n  'FUNCTION', // (R)\n  'GENERATED', // (R)\n  'GET', // (R)\n  'GRANT', // (R)\n  'GROUP', // (R)\n  'GROUPING', // (R)\n  'GROUPS', // (R)\n  'HAVING', // (R)\n  'HIGH_PRIORITY', // (R)\n  'HOUR_MICROSECOND', // (R)\n  'HOUR_MINUTE', // (R)\n  'HOUR_SECOND', // (R)\n  'IF', // (R)\n  'IGNORE', // (R)\n  'IN', // (R)\n  'INDEX', // (R)\n  'INFILE', // (R)\n  'INNER', // (R)\n  'INOUT', // (R)\n  'INSENSITIVE', // (R)\n  'INSERT', // (R)\n  'IN', // <-- moved over from functions\n  'INTERSECT', // (R)\n  'INTERVAL', // (R)\n  'INTO', // (R)\n  'IO_AFTER_GTIDS', // (R)\n  'IO_BEFORE_GTIDS', // (R)\n  'IS', // (R)\n  'ITERATE', // (R)\n  'JOIN', // (R)\n  'JSON_TABLE', // (R)\n  'KEY', // (R)\n  'KEYS', // (R)\n  'KILL', // (R)\n  'LAG', // (R)\n  'LAST_VALUE', // (R)\n  'LATERAL', // (R)\n  'LEAD', // (R)\n  'LEADING', // (R)\n  'LEAVE', // (R)\n  'LEFT', // (R)\n  'LIKE', // (R)\n  'LIMIT', // (R)\n  'LINEAR', // (R)\n  'LINES', // (R)\n  'LOAD', // (R)\n  'LOCALTIME', // (R)\n  'LOCALTIMESTAMP', // (R)\n  'LOCK', // (R)\n  'LONG', // (R)\n  'LOOP', // (R)\n  'LOW_PRIORITY', // (R)\n  'MASTER_BIND', // (R)\n  'MASTER_SSL_VERIFY_SERVER_CERT', // (R)\n  'MATCH', // (R)\n  'MAXVALUE', // (R)\n  'MINUTE_MICROSECOND', // (R)\n  'MINUTE_SECOND', // (R)\n  'MOD', // (R)\n  'MODIFIES', // (R)\n  'NATURAL', // (R)\n  'NOT', // (R)\n  'NO_WRITE_TO_BINLOG', // (R)\n  'NTH_VALUE', // (R)\n  'NTILE', // (R)\n  'NULL', // (R)\n  'OF', // (R)\n  'ON', // (R)\n  'OPTIMIZE', // (R)\n  'OPTIMIZER_COSTS', // (R)\n  'OPTION', // (R)\n  'OPTIONALLY', // (R)\n  'OR', // (R)\n  'ORDER', // (R)\n  'OUT', // (R)\n  'OUTER', // (R)\n  'OUTFILE', // (R)\n  'OVER', // (R)\n  'PARTITION', // (R)\n  'PERCENT_RANK', // (R)\n  'PRIMARY', // (R)\n  'PROCEDURE', // (R)\n  'PURGE', // (R)\n  'RANGE', // (R)\n  'RANK', // (R)\n  'READ', // (R)\n  'READS', // (R)\n  'READ_WRITE', // (R)\n  'RECURSIVE', // (R)\n  'REFERENCES', // (R)\n  'REGEXP', // (R)\n  'RELEASE', // (R)\n  'RENAME', // (R)\n  'REPEAT', // (R)\n  'REPLACE', // (R)\n  'REQUIRE', // (R)\n  'RESIGNAL', // (R)\n  'RESTRICT', // (R)\n  'RETURN', // (R)\n  'REVOKE', // (R)\n  'RIGHT', // (R)\n  'RLIKE', // (R)\n  'ROW', // (R)\n  'ROWS', // (R)\n  'ROW_NUMBER', // (R)\n  'SCHEMA', // (R)\n  'SCHEMAS', // (R)\n  'SECOND_MICROSECOND', // (R)\n  'SELECT', // (R)\n  'SENSITIVE', // (R)\n  'SEPARATOR', // (R)\n  'SET', // (R)\n  'SHOW', // (R)\n  'SIGNAL', // (R)\n  'SPATIAL', // (R)\n  'SPECIFIC', // (R)\n  'SQL', // (R)\n  'SQLEXCEPTION', // (R)\n  'SQLSTATE', // (R)\n  'SQLWARNING', // (R)\n  'SQL_BIG_RESULT', // (R)\n  'SQL_CALC_FOUND_ROWS', // (R)\n  'SQL_SMALL_RESULT', // (R)\n  'SSL', // (R)\n  'STARTING', // (R)\n  'STORED', // (R)\n  'STRAIGHT_JOIN', // (R)\n  'SYSTEM', // (R)\n  'TABLE', // (R)\n  'TERMINATED', // (R)\n  'THEN', // (R)\n  'TO', // (R)\n  'TRAILING', // (R)\n  'TRIGGER', // (R)\n  'TRUE', // (R)\n  'UNDO', // (R)\n  'UNION', // (R)\n  'UNIQUE', // (R)\n  'UNLOCK', // (R)\n  'UNSIGNED', // (R)\n  'UPDATE', // (R)\n  'USAGE', // (R)\n  'USE', // (R)\n  'USING', // (R)\n  'UTC_DATE', // (R)\n  'UTC_TIME', // (R)\n  'UTC_TIMESTAMP', // (R)\n  'VALUES', // (R)\n  'VIRTUAL', // (R)\n  'WHEN', // (R)\n  'WHERE', // (R)\n  'WHILE', // (R)\n  'WINDOW', // (R)\n  'WITH', // (R)\n  'WRITE', // (R)\n  'XOR', // (R)\n  'YEAR_MONTH', // (R)\n  'ZEROFILL', // (R)\n];\n\nexport const dataTypes: string[] = [\n  // https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n  'BIGINT', // (R)\n  'BINARY', // (R)\n  'BIT',\n  'BLOB', // (R)\n  'BOOL', // (R)\n  'BOOLEAN', // (R)\n  'CHAR', // (R)\n  'CHARACTER', // (R)\n  'DATE', // (R)\n  'DATETIME', // (R)\n  'DEC', // (R)\n  'DECIMAL', // (R)\n  'DOUBLE PRECISION',\n  'DOUBLE', // (R)\n  'ENUM',\n  'FIXED',\n  'FLOAT', // (R)\n  'FLOAT4', // (R)\n  'FLOAT8', // (R)\n  'INT', // (R)\n  'INT1', // (R)\n  'INT2', // (R)\n  'INT3', // (R)\n  'INT4', // (R)\n  'INT8', // (R)\n  'INTEGER', // (R)\n  'LONGBLOB', // (R)\n  'LONGTEXT', // (R)\n  'MEDIUMBLOB', // (R)\n  'MEDIUMINT', // (R)\n  'MEDIUMTEXT', // (R)\n  'MIDDLEINT', // (R)\n  'NATIONAL CHAR', // (R)\n  'NATIONAL VARCHAR', // (R)\n  'NUMERIC', // (R)\n  'PRECISION', // (R)\n  'REAL', // (R)\n  'SMALLINT', // (R)\n  'TEXT',\n  'TIME',\n  'TIMESTAMP', // (R)\n  'TINYBLOB', // (R)\n  'TINYINT', // (R)\n  'TINYTEXT', // (R)\n  'VARBINARY', // (R)\n  'VARCHAR', // (R)\n  'VARCHARACTER', // (R)\n  'VARYING', // (R)\n  'YEAR',\n  // 'SET' // handled as special-case in postProcess\n];\n","export const functions: string[] = [\n  // https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html\n  'ABS',\n  'ACOS',\n  'ADDDATE',\n  'ADDTIME',\n  'AES_DECRYPT',\n  'AES_ENCRYPT',\n  // 'AND',\n  'ANY_VALUE',\n  'ASCII',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'AVG',\n  'BENCHMARK',\n  'BIN',\n  'BIN_TO_UUID',\n  'BINARY',\n  'BIT_AND',\n  'BIT_COUNT',\n  'BIT_LENGTH',\n  'BIT_OR',\n  'BIT_XOR',\n  'CAN_ACCESS_COLUMN',\n  'CAN_ACCESS_DATABASE',\n  'CAN_ACCESS_TABLE',\n  'CAN_ACCESS_USER',\n  'CAN_ACCESS_VIEW',\n  'CAST',\n  'CEIL',\n  'CEILING',\n  'CHAR',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHARSET',\n  'COALESCE',\n  'COERCIBILITY',\n  'COLLATION',\n  'COMPRESS',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONNECTION_ID',\n  'CONV',\n  'CONVERT',\n  'CONVERT_TZ',\n  'COS',\n  'COT',\n  'COUNT',\n  'CRC32',\n  'CUME_DIST',\n  'CURDATE',\n  'CURRENT_DATE',\n  'CURRENT_ROLE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURTIME',\n  'DATABASE',\n  'DATE',\n  'DATE_ADD',\n  'DATE_FORMAT',\n  'DATE_SUB',\n  'DATEDIFF',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'DEFAULT',\n  'DEGREES',\n  'DENSE_RANK',\n  'DIV',\n  'ELT',\n  'EXP',\n  'EXPORT_SET',\n  'EXTRACT',\n  'EXTRACTVALUE',\n  'FIELD',\n  'FIND_IN_SET',\n  'FIRST_VALUE',\n  'FLOOR',\n  'FORMAT',\n  'FORMAT_BYTES',\n  'FORMAT_PICO_TIME',\n  'FOUND_ROWS',\n  'FROM_BASE64',\n  'FROM_DAYS',\n  'FROM_UNIXTIME',\n  'GEOMCOLLECTION',\n  'GEOMETRYCOLLECTION',\n  'GET_DD_COLUMN_PRIVILEGES',\n  'GET_DD_CREATE_OPTIONS',\n  'GET_DD_INDEX_SUB_PART_LENGTH',\n  'GET_FORMAT',\n  'GET_LOCK',\n  'GREATEST',\n  'GROUP_CONCAT',\n  'GROUPING',\n  'GTID_SUBSET',\n  'GTID_SUBTRACT',\n  'HEX',\n  'HOUR',\n  'ICU_VERSION',\n  'IF',\n  'IFNULL',\n  // 'IN',\n  'INET_ATON',\n  'INET_NTOA',\n  'INET6_ATON',\n  'INET6_NTOA',\n  'INSERT',\n  'INSTR',\n  'INTERNAL_AUTO_INCREMENT',\n  'INTERNAL_AVG_ROW_LENGTH',\n  'INTERNAL_CHECK_TIME',\n  'INTERNAL_CHECKSUM',\n  'INTERNAL_DATA_FREE',\n  'INTERNAL_DATA_LENGTH',\n  'INTERNAL_DD_CHAR_LENGTH',\n  'INTERNAL_GET_COMMENT_OR_ERROR',\n  'INTERNAL_GET_ENABLED_ROLE_JSON',\n  'INTERNAL_GET_HOSTNAME',\n  'INTERNAL_GET_USERNAME',\n  'INTERNAL_GET_VIEW_WARNING_OR_ERROR',\n  'INTERNAL_INDEX_COLUMN_CARDINALITY',\n  'INTERNAL_INDEX_LENGTH',\n  'INTERNAL_IS_ENABLED_ROLE',\n  'INTERNAL_IS_MANDATORY_ROLE',\n  'INTERNAL_KEYS_DISABLED',\n  'INTERNAL_MAX_DATA_LENGTH',\n  'INTERNAL_TABLE_ROWS',\n  'INTERNAL_UPDATE_TIME',\n  'INTERVAL',\n  'IS',\n  'IS_FREE_LOCK',\n  'IS_IPV4',\n  'IS_IPV4_COMPAT',\n  'IS_IPV4_MAPPED',\n  'IS_IPV6',\n  'IS NOT',\n  'IS NOT NULL',\n  'IS NULL',\n  'IS_USED_LOCK',\n  'IS_UUID',\n  'ISNULL',\n  'JSON_ARRAY',\n  'JSON_ARRAY_APPEND',\n  'JSON_ARRAY_INSERT',\n  'JSON_ARRAYAGG',\n  'JSON_CONTAINS',\n  'JSON_CONTAINS_PATH',\n  'JSON_DEPTH',\n  'JSON_EXTRACT',\n  'JSON_INSERT',\n  'JSON_KEYS',\n  'JSON_LENGTH',\n  'JSON_MERGE',\n  'JSON_MERGE_PATCH',\n  'JSON_MERGE_PRESERVE',\n  'JSON_OBJECT',\n  'JSON_OBJECTAGG',\n  'JSON_OVERLAPS',\n  'JSON_PRETTY',\n  'JSON_QUOTE',\n  'JSON_REMOVE',\n  'JSON_REPLACE',\n  'JSON_SCHEMA_VALID',\n  'JSON_SCHEMA_VALIDATION_REPORT',\n  'JSON_SEARCH',\n  'JSON_SET',\n  'JSON_STORAGE_FREE',\n  'JSON_STORAGE_SIZE',\n  'JSON_TABLE',\n  'JSON_TYPE',\n  'JSON_UNQUOTE',\n  'JSON_VALID',\n  'JSON_VALUE',\n  'LAG',\n  'LAST_DAY',\n  'LAST_INSERT_ID',\n  'LAST_VALUE',\n  'LCASE',\n  'LEAD',\n  'LEAST',\n  'LEFT',\n  'LENGTH',\n  'LIKE',\n  'LINESTRING',\n  'LN',\n  'LOAD_FILE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATE',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MAKE_SET',\n  'MAKEDATE',\n  'MAKETIME',\n  'MASTER_POS_WAIT',\n  'MATCH',\n  'MAX',\n  'MBRCONTAINS',\n  'MBRCOVEREDBY',\n  'MBRCOVERS',\n  'MBRDISJOINT',\n  'MBREQUALS',\n  'MBRINTERSECTS',\n  'MBROVERLAPS',\n  'MBRTOUCHES',\n  'MBRWITHIN',\n  'MD5',\n  'MEMBER OF',\n  'MICROSECOND',\n  'MID',\n  'MIN',\n  'MINUTE',\n  'MOD',\n  'MONTH',\n  'MONTHNAME',\n  'MULTILINESTRING',\n  'MULTIPOINT',\n  'MULTIPOLYGON',\n  'NAME_CONST',\n  'NOT',\n  'NOT IN',\n  'NOT LIKE',\n  'NOT REGEXP',\n  'NOW',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLIF',\n  'OCT',\n  'OCTET_LENGTH',\n  // 'OR',\n  'ORD',\n  'PERCENT_RANK',\n  'PERIOD_ADD',\n  'PERIOD_DIFF',\n  'PI',\n  'POINT',\n  'POLYGON',\n  'POSITION',\n  'POW',\n  'POWER',\n  'PS_CURRENT_THREAD_ID',\n  'PS_THREAD_ID',\n  'QUARTER',\n  'QUOTE',\n  'RADIANS',\n  'RAND',\n  'RANDOM_BYTES',\n  'RANK',\n  'REGEXP',\n  'REGEXP_INSTR',\n  'REGEXP_LIKE',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'RELEASE_ALL_LOCKS',\n  'RELEASE_LOCK',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RIGHT',\n  'RLIKE',\n  'ROLES_GRAPHML',\n  'ROUND',\n  'ROW_COUNT',\n  'ROW_NUMBER',\n  'RPAD',\n  'RTRIM',\n  'SCHEMA',\n  'SEC_TO_TIME',\n  'SECOND',\n  'SESSION_USER',\n  'SHA1',\n  'SHA2',\n  'SIGN',\n  'SIN',\n  'SLEEP',\n  'SOUNDEX',\n  'SOUNDS LIKE',\n  'SOURCE_POS_WAIT',\n  'SPACE',\n  'SQRT',\n  'ST_AREA',\n  'ST_ASBINARY',\n  'ST_ASGEOJSON',\n  'ST_ASTEXT',\n  'ST_BUFFER',\n  'ST_BUFFER_STRATEGY',\n  'ST_CENTROID',\n  'ST_COLLECT',\n  'ST_CONTAINS',\n  'ST_CONVEXHULL',\n  'ST_CROSSES',\n  'ST_DIFFERENCE',\n  'ST_DIMENSION',\n  'ST_DISJOINT',\n  'ST_DISTANCE',\n  'ST_DISTANCE_SPHERE',\n  'ST_ENDPOINT',\n  'ST_ENVELOPE',\n  'ST_EQUALS',\n  'ST_EXTERIORRING',\n  'ST_FRECHETDISTANCE',\n  'ST_GEOHASH',\n  'ST_GEOMCOLLFROMTEXT',\n  'ST_GEOMCOLLFROMWKB',\n  'ST_GEOMETRYN',\n  'ST_GEOMETRYTYPE',\n  'ST_GEOMFROMGEOJSON',\n  'ST_GEOMFROMTEXT',\n  'ST_GEOMFROMWKB',\n  'ST_HAUSDORFFDISTANCE',\n  'ST_INTERIORRINGN',\n  'ST_INTERSECTION',\n  'ST_INTERSECTS',\n  'ST_ISCLOSED',\n  'ST_ISEMPTY',\n  'ST_ISSIMPLE',\n  'ST_ISVALID',\n  'ST_LATFROMGEOHASH',\n  'ST_LATITUDE',\n  'ST_LENGTH',\n  'ST_LINEFROMTEXT',\n  'ST_LINEFROMWKB',\n  'ST_LINEINTERPOLATEPOINT',\n  'ST_LINEINTERPOLATEPOINTS',\n  'ST_LONGFROMGEOHASH',\n  'ST_LONGITUDE',\n  'ST_MAKEENVELOPE',\n  'ST_MLINEFROMTEXT',\n  'ST_MLINEFROMWKB',\n  'ST_MPOINTFROMTEXT',\n  'ST_MPOINTFROMWKB',\n  'ST_MPOLYFROMTEXT',\n  'ST_MPOLYFROMWKB',\n  'ST_NUMGEOMETRIES',\n  'ST_NUMINTERIORRING',\n  'ST_NUMPOINTS',\n  'ST_OVERLAPS',\n  'ST_POINTATDISTANCE',\n  'ST_POINTFROMGEOHASH',\n  'ST_POINTFROMTEXT',\n  'ST_POINTFROMWKB',\n  'ST_POINTN',\n  'ST_POLYFROMTEXT',\n  'ST_POLYFROMWKB',\n  'ST_SIMPLIFY',\n  'ST_SRID',\n  'ST_STARTPOINT',\n  'ST_SWAPXY',\n  'ST_SYMDIFFERENCE',\n  'ST_TOUCHES',\n  'ST_TRANSFORM',\n  'ST_UNION',\n  'ST_VALIDATE',\n  'ST_WITHIN',\n  'ST_X',\n  'ST_Y',\n  'STATEMENT_DIGEST',\n  'STATEMENT_DIGEST_TEXT',\n  'STD',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STR_TO_DATE',\n  'STRCMP',\n  'SUBDATE',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUBSTRING_INDEX',\n  'SUBTIME',\n  'SUM',\n  'SYSDATE',\n  'SYSTEM_USER',\n  'TAN',\n  'TIME',\n  'TIME_FORMAT',\n  'TIME_TO_SEC',\n  'TIMEDIFF',\n  'TIMESTAMP',\n  'TIMESTAMPADD',\n  'TIMESTAMPDIFF',\n  'TO_BASE64',\n  'TO_DAYS',\n  'TO_SECONDS',\n  'TRIM',\n  'TRUNCATE',\n  'UCASE',\n  'UNCOMPRESS',\n  'UNCOMPRESSED_LENGTH',\n  'UNHEX',\n  'UNIX_TIMESTAMP',\n  'UPDATEXML',\n  'UPPER',\n  // 'USER',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'UUID',\n  'UUID_SHORT',\n  'UUID_TO_BIN',\n  'VALIDATE_PASSWORD_STRENGTH',\n  'VALUES',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n  'VERSION',\n  'WAIT_FOR_EXECUTED_GTID_SET',\n  'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS',\n  'WEEK',\n  'WEEKDAY',\n  'WEEKOFYEAR',\n  'WEIGHT_STRING',\n  // 'XOR',\n  'YEAR',\n  'YEARWEEK',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { postProcess } from '../mariadb/likeMariaDb.js';\nimport { dataTypes, keywords } from './mysql.keywords.js';\nimport { functions } from './mysql.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | DISTINCTROW]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]',\n  'REPLACE [LOW_PRIORITY | DELAYED] [INTO]',\n  'VALUES',\n  'ON DUPLICATE KEY UPDATE',\n  // - update:\n  'SET',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [TEMPORARY] TABLE [IF NOT EXISTS]']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE [LOW_PRIORITY] [IGNORE]',\n  // - delete:\n  'DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM',\n  // - drop table:\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  '{CHANGE | MODIFY} [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [TO | AS]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html\n  'ALTER DATABASE',\n  'ALTER EVENT',\n  'ALTER FUNCTION',\n  'ALTER INSTANCE',\n  'ALTER LOGFILE GROUP',\n  'ALTER PROCEDURE',\n  'ALTER RESOURCE GROUP',\n  'ALTER SERVER',\n  'ALTER TABLESPACE',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE TABLE',\n  'BINLOG',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE MASTER TO',\n  'CHANGE REPLICATION FILTER',\n  'CHANGE REPLICATION SOURCE TO',\n  'CHECK TABLE',\n  'CHECKSUM TABLE',\n  'CLONE',\n  'COMMIT',\n  'CREATE DATABASE',\n  'CREATE EVENT',\n  'CREATE FUNCTION',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE LOGFILE GROUP',\n  'CREATE PROCEDURE',\n  'CREATE RESOURCE GROUP',\n  'CREATE ROLE',\n  'CREATE SERVER',\n  'CREATE SPATIAL REFERENCE SYSTEM',\n  'CREATE TABLESPACE',\n  'CREATE TRIGGER',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DROP DATABASE',\n  'DROP EVENT',\n  'DROP FUNCTION',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP LOGFILE GROUP',\n  'DROP PROCEDURE',\n  'DROP RESOURCE GROUP',\n  'DROP ROLE',\n  'DROP SERVER',\n  'DROP SPATIAL REFERENCE SYSTEM',\n  'DROP TABLESPACE',\n  'DROP TRIGGER',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'IMPORT TABLE',\n  'INSTALL COMPONENT',\n  'INSTALL PLUGIN',\n  'KILL',\n  'LOAD DATA',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML',\n  'LOCK INSTANCE FOR BACKUP',\n  'LOCK TABLES',\n  'MASTER_POS_WAIT',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'RELEASE SAVEPOINT',\n  'RENAME TABLE',\n  'RENAME USER',\n  'REPAIR TABLE',\n  'RESET',\n  'RESET MASTER',\n  'RESET PERSIST',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESTART',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET RESOURCE GROUP',\n  'SET ROLE',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW BINARY LOGS',\n  'SHOW BINLOG EVENTS',\n  'SHOW CHARACTER SET',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE EVENT',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE TRIGGER',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW EVENTS',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PLUGINS',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA STATUS',\n  'SHOW REPLICAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW STATUS',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW TRIGGERS',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHUTDOWN',\n  'SOURCE_POS_WAIT',\n  'START GROUP_REPLICATION',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP GROUP_REPLICATION',\n  'STOP REPLICA',\n  'STOP SLAVE',\n  'TABLE',\n  'UNINSTALL COMPONENT',\n  'UNINSTALL PLUGIN',\n  'UNLOCK INSTANCE',\n  'UNLOCK TABLES',\n  'USE',\n  'XA',\n  // flow control\n  // 'IF',\n  'ITERATE',\n  'LEAVE',\n  'LOOP',\n  'REPEAT',\n  'RETURN',\n  'WHILE',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL | DISTINCT]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL]',\n  'CHARACTER SET',\n  '{ROWS | RANGE} BETWEEN',\n  'IDENTIFIED BY',\n]);\n\n// https://dev.mysql.com/doc/refman/8.0/en/\nexport const mysql: DialectOptions = {\n  name: 'mysql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: [\n      '\"\"-qq-bs',\n      { quote: \"''-qq-bs\", prefixes: ['N'] },\n      { quote: \"''-raw\", prefixes: ['B', 'X'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n    variableTypes: [\n      { regex: '@@?[A-Za-z0-9_.$]+' },\n      { quote: '\"\"-qq-bs', prefixes: ['@'], requirePrefix: true },\n      { quote: \"''-qq-bs\", prefixes: ['@'], requirePrefix: true },\n      { quote: '``', prefixes: ['@'], requirePrefix: true },\n    ],\n    paramTypes: { positional: true },\n    lineCommentTypes: ['--', '#'],\n    operators: [\n      '%',\n      ':=',\n      '&',\n      '|',\n      '^',\n      '~',\n      '<<',\n      '>>',\n      '<=>',\n      '->',\n      '->>',\n      '&&',\n      '||',\n      '!',\n      '*.*', // Not actually an operator\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const keywords: string[] = [\n  // https://docs.pingcap.com/tidb/stable/keywords\n  'ADD', // (R)\n  'ALL', // (R)\n  'ALTER', // (R)\n  'ANALYZE', // (R)\n  'AND', // (R)\n  'ARRAY', // (R)\n  'AS', // (R)\n  'ASC', // (R)\n  'BETWEEN', // (R)\n  'BOTH', // (R)\n  'BY', // (R)\n  'CALL', // (R)\n  'CASCADE', // (R)\n  'CASE', // (R)\n  'CHANGE', // (R)\n  'CHECK', // (R)\n  'COLLATE', // (R)\n  'COLUMN', // (R)\n  'CONSTRAINT', // (R)\n  'CONTINUE', // (R)\n  'CONVERT', // (R)\n  'CREATE', // (R)\n  'CROSS', // (R)\n  'CURRENT_DATE', // (R)\n  'CURRENT_ROLE', // (R)\n  'CURRENT_TIME', // (R)\n  'CURRENT_TIMESTAMP', // (R)\n  'CURRENT_USER', // (R)\n  'CURSOR', // (R)\n  'DATABASE', // (R)\n  'DATABASES', // (R)\n  'DAY_HOUR', // (R)\n  'DAY_MICROSECOND', // (R)\n  'DAY_MINUTE', // (R)\n  'DAY_SECOND', // (R)\n  'DEFAULT', // (R)\n  'DELAYED', // (R)\n  'DELETE', // (R)\n  'DESC', // (R)\n  'DESCRIBE', // (R)\n  'DISTINCT', // (R)\n  'DISTINCTROW', // (R)\n  'DIV', // (R)\n  'DOUBLE', // (R)\n  'DROP', // (R)\n  'DUAL', // (R)\n  'ELSE', // (R)\n  'ELSEIF', // (R)\n  'ENCLOSED', // (R)\n  'ESCAPED', // (R)\n  'EXCEPT', // (R)\n  'EXISTS', // (R)\n  'EXIT', // (R)\n  'EXPLAIN', // (R)\n  'FALSE', // (R)\n  'FETCH', // (R)\n  'FOR', // (R)\n  'FORCE', // (R)\n  'FOREIGN', // (R)\n  'FROM', // (R)\n  'FULLTEXT', // (R)\n  'GENERATED', // (R)\n  'GRANT', // (R)\n  'GROUP', // (R)\n  'GROUPS', // (R)\n  'HAVING', // (R)\n  'HIGH_PRIORITY', // (R)\n  'HOUR_MICROSECOND', // (R)\n  'HOUR_MINUTE', // (R)\n  'HOUR_SECOND', // (R)\n  'IF', // (R)\n  'IGNORE', // (R)\n  'ILIKE', // (R)\n  'IN', // (R)\n  'INDEX', // (R)\n  'INFILE', // (R)\n  'INNER', // (R)\n  'INOUT', // (R)\n  'INSERT', // (R)\n  'INTERSECT', // (R)\n  'INTERVAL', // (R)\n  'INTO', // (R)\n  'IS', // (R)\n  'ITERATE', // (R)\n  'JOIN', // (R)\n  'KEY', // (R)\n  'KEYS', // (R)\n  'KILL', // (R)\n  'LEADING', // (R)\n  'LEAVE', // (R)\n  'LEFT', // (R)\n  'LIKE', // (R)\n  'LIMIT', // (R)\n  'LINEAR', // (R)\n  'LINES', // (R)\n  'LOAD', // (R)\n  'LOCALTIME', // (R)\n  'LOCALTIMESTAMP', // (R)\n  'LOCK', // (R)\n  'LONG', // (R)\n  'LOW_PRIORITY', // (R)\n  'MATCH', // (R)\n  'MAXVALUE', // (R)\n  'MINUTE_MICROSECOND', // (R)\n  'MINUTE_SECOND', // (R)\n  'MOD', // (R)\n  'NATURAL', // (R)\n  'NOT', // (R)\n  'NO_WRITE_TO_BINLOG', // (R)\n  'NULL', // (R)\n  'OF', // (R)\n  'ON', // (R)\n  'OPTIMIZE', // (R)\n  'OPTION', // (R)\n  'OPTIONALLY', // (R)\n  'OR', // (R)\n  'ORDER', // (R)\n  'OUT', // (R)\n  'OUTER', // (R)\n  'OUTFILE', // (R)\n  'OVER', // (R)\n  'PARTITION', // (R)\n  'PRIMARY', // (R)\n  'PROCEDURE', // (R)\n  'RANGE', // (R)\n  'READ', // (R)\n  'RECURSIVE', // (R)\n  'REFERENCES', // (R)\n  'REGEXP', // (R)\n  'RELEASE', // (R)\n  'RENAME', // (R)\n  'REPEAT', // (R)\n  'REPLACE', // (R)\n  'REQUIRE', // (R)\n  'RESTRICT', // (R)\n  'REVOKE', // (R)\n  'RIGHT', // (R)\n  'RLIKE', // (R)\n  'ROW', // (R)\n  'ROWS', // (R)\n  'SECOND_MICROSECOND', // (R)\n  'SELECT', // (R)\n  'SET', // (R)\n  'SHOW', // (R)\n  'SPATIAL', // (R)\n  'SQL', // (R)\n  'SQLEXCEPTION', // (R)\n  'SQLSTATE', // (R)\n  'SQLWARNING', // (R)\n  'SQL_BIG_RESULT', // (R)\n  'SQL_CALC_FOUND_ROWS', // (R)\n  'SQL_SMALL_RESULT', // (R)\n  'SSL', // (R)\n  'STARTING', // (R)\n  'STATS_EXTENDED', // (R)\n  'STORED', // (R)\n  'STRAIGHT_JOIN', // (R)\n  'TABLE', // (R)\n  'TABLESAMPLE', // (R)\n  'TERMINATED', // (R)\n  'THEN', // (R)\n  'TO', // (R)\n  'TRAILING', // (R)\n  'TRIGGER', // (R)\n  'TRUE', // (R)\n  'TiDB_CURRENT_TSO', // (R)\n  'UNION', // (R)\n  'UNIQUE', // (R)\n  'UNLOCK', // (R)\n  'UNSIGNED', // (R)\n  'UNTIL', // (R)\n  'UPDATE', // (R)\n  'USAGE', // (R)\n  'USE', // (R)\n  'USING', // (R)\n  'UTC_DATE', // (R)\n  'UTC_TIME', // (R)\n  'UTC_TIMESTAMP', // (R)\n  'VALUES', // (R)\n  'VIRTUAL', // (R)\n  'WHEN', // (R)\n  'WHERE', // (R)\n  'WHILE', // (R)\n  'WINDOW', // (R)\n  'WITH', // (R)\n  'WRITE', // (R)\n  'XOR', // (R)\n  'YEAR_MONTH', // (R)\n  'ZEROFILL', // (R)\n];\n\nexport const dataTypes: string[] = [\n  // https://docs.pingcap.com/tidb/stable/data-type-overview\n  'BIGINT', // (R)\n  'BINARY', // (R)\n  'BIT',\n  'BLOB', // (R)\n  'BOOL', // (R)\n  'BOOLEAN', // (R)\n  'CHAR', // (R)\n  'CHARACTER', // (R)\n  'DATE', // (R)\n  'DATETIME', // (R)\n  'DEC', // (R)\n  'DECIMAL', // (R)\n  'DOUBLE PRECISION',\n  'DOUBLE', // (R)\n  'ENUM',\n  'FIXED',\n  'INT', // (R)\n  'INT1', // (R)\n  'INT2', // (R)\n  'INT3', // (R)\n  'INT4', // (R)\n  'INT8', // (R)\n  'INTEGER', // (R)\n  'LONGBLOB', // (R)\n  'LONGTEXT', // (R)\n  'MEDIUMBLOB', // (R)\n  'MEDIUMINT', // (R)\n  'MIDDLEINT', // (R)\n  'NATIONAL CHAR', // (R)\n  'NATIONAL VARCHAR', // (R)\n  'NUMERIC', // (R)\n  'PRECISION', // (R)\n  'SMALLINT', // (R)\n  'TEXT',\n  'TIME',\n  'TIMESTAMP', // (R)\n  'TINYBLOB', // (R)\n  'TINYINT', // (R)\n  'TINYTEXT', // (R)\n  'VARBINARY', // (R)\n  'VARCHAR', // (R)\n  'VARCHARACTER', // (R)\n  'VARYING', // (R)\n  'YEAR',\n  // 'SET' // handled as special-case in postProcess\n];\n","export const functions: string[] = [\n  // https://docs.pingcap.com/tidb/stable/sql-statement-show-builtins\n  // https://docs.pingcap.com/tidb/stable/functions-and-operators-overview\n  // + MySQL aggregate functions: https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html\n  // + MySQL window functions: https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html\n  'ABS',\n  'ACOS',\n  'ADDDATE',\n  'ADDTIME',\n  'AES_DECRYPT',\n  'AES_ENCRYPT',\n  // 'AND',\n  'ANY_VALUE',\n  'ASCII',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'AVG',\n  'BENCHMARK',\n  'BIN',\n  'BIN_TO_UUID',\n  'BIT_AND',\n  'BIT_COUNT',\n  'BIT_LENGTH',\n  'BIT_OR',\n  'BIT_XOR',\n  'BITAND',\n  'BITNEG',\n  'BITOR',\n  'BITXOR',\n  'CASE',\n  'CAST',\n  'CEIL',\n  'CEILING',\n  'CHAR_FUNC',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHARSET',\n  'COALESCE',\n  'COERCIBILITY',\n  'COLLATION',\n  'COMPRESS',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONNECTION_ID',\n  'CONV',\n  'CONVERT',\n  'CONVERT_TZ',\n  'COS',\n  'COT',\n  'COUNT',\n  'CRC32',\n  'CUME_DIST',\n  'CURDATE',\n  'CURRENT_DATE',\n  'CURRENT_RESOURCE_GROUP',\n  'CURRENT_ROLE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURTIME',\n  'DATABASE',\n  'DATE',\n  'DATE_ADD',\n  'DATE_FORMAT',\n  'DATE_SUB',\n  'DATEDIFF',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'DECODE',\n  'DEFAULT_FUNC',\n  'DEGREES',\n  'DENSE_RANK',\n  'DES_DECRYPT',\n  'DES_ENCRYPT',\n  'DIV',\n  'ELT',\n  'ENCODE',\n  'ENCRYPT',\n  'EQ',\n  'EXP',\n  'EXPORT_SET',\n  'EXTRACT',\n  'FIELD',\n  'FIND_IN_SET',\n  'FIRST_VALUE',\n  'FLOOR',\n  'FORMAT',\n  'FORMAT_BYTES',\n  'FORMAT_NANO_TIME',\n  'FOUND_ROWS',\n  'FROM_BASE64',\n  'FROM_DAYS',\n  'FROM_UNIXTIME',\n  'GE',\n  'GET_FORMAT',\n  'GET_LOCK',\n  'GETPARAM',\n  'GREATEST',\n  'GROUP_CONCAT',\n  'GROUPING',\n  'GT',\n  'HEX',\n  'HOUR',\n  'IF',\n  'IFNULL',\n  'ILIKE',\n  // 'IN',\n  'INET6_ATON',\n  'INET6_NTOA',\n  'INET_ATON',\n  'INET_NTOA',\n  'INSERT_FUNC',\n  'INSTR',\n  'INTDIV',\n  'INTERVAL',\n  'IS_FREE_LOCK',\n  'IS_IPV4',\n  'IS_IPV4_COMPAT',\n  'IS_IPV4_MAPPED',\n  'IS_IPV6',\n  'IS_USED_LOCK',\n  'IS_UUID',\n  'ISFALSE',\n  'ISNULL',\n  'ISTRUE',\n  'JSON_ARRAY',\n  'JSON_ARRAYAGG',\n  'JSON_ARRAY_APPEND',\n  'JSON_ARRAY_INSERT',\n  'JSON_CONTAINS',\n  'JSON_CONTAINS_PATH',\n  'JSON_DEPTH',\n  'JSON_EXTRACT',\n  'JSON_INSERT',\n  'JSON_KEYS',\n  'JSON_LENGTH',\n  'JSON_MEMBEROF',\n  'JSON_MERGE',\n  'JSON_MERGE_PATCH',\n  'JSON_MERGE_PRESERVE',\n  'JSON_OBJECT',\n  'JSON_OBJECTAGG',\n  'JSON_OVERLAPS',\n  'JSON_PRETTY',\n  'JSON_QUOTE',\n  'JSON_REMOVE',\n  'JSON_REPLACE',\n  'JSON_SEARCH',\n  'JSON_SET',\n  'JSON_STORAGE_FREE',\n  'JSON_STORAGE_SIZE',\n  'JSON_TYPE',\n  'JSON_UNQUOTE',\n  'JSON_VALID',\n  'LAG',\n  'LAST_DAY',\n  'LAST_INSERT_ID',\n  'LAST_VALUE',\n  'LASTVAL',\n  'LCASE',\n  'LE',\n  'LEAD',\n  'LEAST',\n  'LEFT',\n  'LEFTSHIFT',\n  'LENGTH',\n  'LIKE',\n  'LN',\n  'LOAD_FILE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATE',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'LOWER',\n  'LPAD',\n  'LT',\n  'LTRIM',\n  'MAKE_SET',\n  'MAKEDATE',\n  'MAKETIME',\n  'MASTER_POS_WAIT',\n  'MAX',\n  'MD5',\n  'MICROSECOND',\n  'MID',\n  'MIN',\n  'MINUS',\n  'MINUTE',\n  'MOD',\n  'MONTH',\n  'MONTHNAME',\n  'MUL',\n  'NAME_CONST',\n  'NE',\n  'NEXTVAL',\n  'NOT',\n  'NOW',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLEQ',\n  'OCT',\n  'OCTET_LENGTH',\n  'OLD_PASSWORD',\n  // 'OR',\n  'ORD',\n  'PASSWORD_FUNC',\n  'PERCENT_RANK',\n  'PERIOD_ADD',\n  'PERIOD_DIFF',\n  'PI',\n  'PLUS',\n  'POSITION',\n  'POW',\n  'POWER',\n  'QUARTER',\n  'QUOTE',\n  'RADIANS',\n  'RAND',\n  'RANDOM_BYTES',\n  'RANK',\n  'REGEXP',\n  'REGEXP_INSTR',\n  'REGEXP_LIKE',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'RELEASE_ALL_LOCKS',\n  'RELEASE_LOCK',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RIGHT',\n  'RIGHTSHIFT',\n  'ROUND',\n  'ROW_COUNT',\n  'ROW_NUMBER',\n  'RPAD',\n  'RTRIM',\n  'SCHEMA',\n  'SEC_TO_TIME',\n  'SECOND',\n  'SESSION_USER',\n  'SETVAL',\n  'SETVAR',\n  'SHA',\n  'SHA1',\n  'SHA2',\n  'SIGN',\n  'SIN',\n  'SLEEP',\n  'SM3',\n  'SPACE',\n  'SQRT',\n  'STD',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STR_TO_DATE',\n  'STRCMP',\n  'SUBDATE',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUBSTRING_INDEX',\n  'SUBTIME',\n  'SUM',\n  'SYSDATE',\n  'SYSTEM_USER',\n  'TAN',\n  'TIDB_BOUNDED_STALENESS',\n  'TIDB_CURRENT_TSO',\n  'TIDB_DECODE_BINARY_PLAN',\n  'TIDB_DECODE_KEY',\n  'TIDB_DECODE_PLAN',\n  'TIDB_DECODE_SQL_DIGESTS',\n  'TIDB_ENCODE_SQL_DIGEST',\n  'TIDB_IS_DDL_OWNER',\n  'TIDB_PARSE_TSO',\n  'TIDB_PARSE_TSO_LOGICAL',\n  'TIDB_ROW_CHECKSUM',\n  'TIDB_SHARD',\n  'TIDB_VERSION',\n  'TIME',\n  'TIME_FORMAT',\n  'TIME_TO_SEC',\n  'TIMEDIFF',\n  'TIMESTAMP',\n  'TIMESTAMPADD',\n  'TIMESTAMPDIFF',\n  'TO_BASE64',\n  'TO_DAYS',\n  'TO_SECONDS',\n  'TRANSLATE',\n  'TRIM',\n  'TRUNCATE',\n  'UCASE',\n  'UNARYMINUS',\n  'UNCOMPRESS',\n  'UNCOMPRESSED_LENGTH',\n  'UNHEX',\n  'UNIX_TIMESTAMP',\n  'UPPER',\n  // 'USER',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'UUID',\n  'UUID_SHORT',\n  'UUID_TO_BIN',\n  'VALIDATE_PASSWORD_STRENGTH',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n  'VERSION',\n  'VITESS_HASH',\n  'WEEK',\n  'WEEKDAY',\n  'WEEKOFYEAR',\n  'WEIGHT_STRING',\n  // 'XOR',\n  'YEAR',\n  'YEARWEEK',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { postProcess } from '../mariadb/likeMariaDb.js';\nimport { dataTypes, keywords } from './tidb.keywords.js';\nimport { functions } from './tidb.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | DISTINCTROW]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]',\n  'REPLACE [LOW_PRIORITY | DELAYED] [INTO]',\n  'VALUES',\n  'ON DUPLICATE KEY UPDATE',\n  // - update:\n  'SET',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [TEMPORARY] TABLE [IF NOT EXISTS]']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // https://docs.pingcap.com/tidb/stable/sql-statement-create-view\n  'CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-update\n  'UPDATE [LOW_PRIORITY] [IGNORE]',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-delete\n  'DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-drop-table\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-alter-table\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  '{CHANGE | MODIFY} [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [TO | AS]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  // https://docs.pingcap.com/tidb/stable/sql-statement-truncate\n  'TRUNCATE [TABLE]',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-alter-database\n  'ALTER DATABASE',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-alter-instance\n  'ALTER INSTANCE',\n  'ALTER RESOURCE GROUP',\n  'ALTER SEQUENCE',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-alter-user\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE TABLE',\n  'CHECK TABLE',\n  'CHECKSUM TABLE',\n  'COMMIT',\n  'CREATE DATABASE',\n  'CREATE INDEX',\n  'CREATE RESOURCE GROUP',\n  'CREATE ROLE',\n  'CREATE SEQUENCE',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DROP DATABASE',\n  'DROP INDEX',\n  'DROP RESOURCE GROUP',\n  'DROP ROLE',\n  'DROP TABLESPACE',\n  'DROP USER',\n  'DROP VIEW',\n  'EXPLAIN',\n  'FLUSH',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-grant-privileges\n  'GRANT',\n  'IMPORT TABLE',\n  'INSTALL COMPONENT',\n  'INSTALL PLUGIN',\n  'KILL',\n  'LOAD DATA',\n  'LOCK INSTANCE FOR BACKUP',\n  'LOCK TABLES',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'RELEASE SAVEPOINT',\n  'RENAME TABLE',\n  'RENAME USER',\n  'REPAIR TABLE',\n  'RESET',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET RESOURCE GROUP',\n  'SET ROLE',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW BINARY LOGS',\n  'SHOW BINLOG EVENTS',\n  'SHOW CHARACTER SET',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW EVENTS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PLUGINS',\n  'SHOW PRIVILEGES',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW STATUS',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW TRIGGERS',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-table\n  'TABLE',\n  'UNINSTALL COMPONENT',\n  'UNINSTALL PLUGIN',\n  'UNLOCK INSTANCE',\n  'UNLOCK TABLES',\n  // https://docs.pingcap.com/tidb/stable/sql-statement-use\n  'USE',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL | DISTINCT]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL]',\n  'CHARACTER SET',\n  '{ROWS | RANGE} BETWEEN',\n  'IDENTIFIED BY',\n]);\n\n// https://docs.pingcap.com/tidb/stable/basic-features\nexport const tidb: DialectOptions = {\n  name: 'tidb',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n    stringTypes: [\n      '\"\"-qq-bs',\n      { quote: \"''-qq-bs\", prefixes: ['N'] },\n      { quote: \"''-raw\", prefixes: ['B', 'X'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n    variableTypes: [\n      { regex: '@@?[A-Za-z0-9_.$]+' },\n      { quote: '\"\"-qq-bs', prefixes: ['@'], requirePrefix: true },\n      { quote: \"''-qq-bs\", prefixes: ['@'], requirePrefix: true },\n      { quote: '``', prefixes: ['@'], requirePrefix: true },\n    ],\n    paramTypes: { positional: true },\n    lineCommentTypes: ['--', '#'],\n    operators: [\n      '%',\n      ':=',\n      '&',\n      '|',\n      '^',\n      '~',\n      '<<',\n      '>>',\n      '<=>',\n      '->',\n      '->>',\n      '&&',\n      '||',\n      '!',\n      '*.*', // Not actually an operator\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/functions.html\n  'ABORT',\n  'ABS',\n  'ACOS',\n  'ADVISOR',\n  'ARRAY_AGG',\n  'ARRAY_AGG',\n  'ARRAY_APPEND',\n  'ARRAY_AVG',\n  'ARRAY_BINARY_SEARCH',\n  'ARRAY_CONCAT',\n  'ARRAY_CONTAINS',\n  'ARRAY_COUNT',\n  'ARRAY_DISTINCT',\n  'ARRAY_EXCEPT',\n  'ARRAY_FLATTEN',\n  'ARRAY_IFNULL',\n  'ARRAY_INSERT',\n  'ARRAY_INTERSECT',\n  'ARRAY_LENGTH',\n  'ARRAY_MAX',\n  'ARRAY_MIN',\n  'ARRAY_MOVE',\n  'ARRAY_POSITION',\n  'ARRAY_PREPEND',\n  'ARRAY_PUT',\n  'ARRAY_RANGE',\n  'ARRAY_REMOVE',\n  'ARRAY_REPEAT',\n  'ARRAY_REPLACE',\n  'ARRAY_REVERSE',\n  'ARRAY_SORT',\n  'ARRAY_STAR',\n  'ARRAY_SUM',\n  'ARRAY_SYMDIFF',\n  'ARRAY_SYMDIFF1',\n  'ARRAY_SYMDIFFN',\n  'ARRAY_UNION',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'AVG',\n  'BASE64',\n  'BASE64_DECODE',\n  'BASE64_ENCODE',\n  'BITAND ',\n  'BITCLEAR ',\n  'BITNOT ',\n  'BITOR ',\n  'BITSET ',\n  'BITSHIFT ',\n  'BITTEST ',\n  'BITXOR ',\n  'CEIL',\n  'CLOCK_LOCAL',\n  'CLOCK_MILLIS',\n  'CLOCK_STR',\n  'CLOCK_TZ',\n  'CLOCK_UTC',\n  'COALESCE',\n  'CONCAT',\n  'CONCAT2',\n  'CONTAINS',\n  'CONTAINS_TOKEN',\n  'CONTAINS_TOKEN_LIKE',\n  'CONTAINS_TOKEN_REGEXP',\n  'COS',\n  'COUNT',\n  'COUNT',\n  'COUNTN',\n  'CUME_DIST',\n  'CURL',\n  'DATE_ADD_MILLIS',\n  'DATE_ADD_STR',\n  'DATE_DIFF_MILLIS',\n  'DATE_DIFF_STR',\n  'DATE_FORMAT_STR',\n  'DATE_PART_MILLIS',\n  'DATE_PART_STR',\n  'DATE_RANGE_MILLIS',\n  'DATE_RANGE_STR',\n  'DATE_TRUNC_MILLIS',\n  'DATE_TRUNC_STR',\n  'DECODE',\n  'DECODE_JSON',\n  'DEGREES',\n  'DENSE_RANK',\n  'DURATION_TO_STR',\n  // 'E',\n  'ENCODED_SIZE',\n  'ENCODE_JSON',\n  'EXP',\n  'FIRST_VALUE',\n  'FLOOR',\n  'GREATEST',\n  'HAS_TOKEN',\n  'IFINF',\n  'IFMISSING',\n  'IFMISSINGORNULL',\n  'IFNAN',\n  'IFNANORINF',\n  'IFNULL',\n  'INITCAP',\n  'ISARRAY',\n  'ISATOM',\n  'ISBITSET',\n  'ISBOOLEAN',\n  'ISNUMBER',\n  'ISOBJECT',\n  'ISSTRING',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'LEAST',\n  'LENGTH',\n  'LN',\n  'LOG',\n  'LOWER',\n  'LTRIM',\n  'MAX',\n  'MEAN',\n  'MEDIAN',\n  'META',\n  'MILLIS',\n  'MILLIS_TO_LOCAL',\n  'MILLIS_TO_STR',\n  'MILLIS_TO_TZ',\n  'MILLIS_TO_UTC',\n  'MILLIS_TO_ZONE_NAME',\n  'MIN',\n  'MISSINGIF',\n  'NANIF',\n  'NEGINFIF',\n  'NOW_LOCAL',\n  'NOW_MILLIS',\n  'NOW_STR',\n  'NOW_TZ',\n  'NOW_UTC',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLIF',\n  'NVL',\n  'NVL2',\n  'OBJECT_ADD',\n  'OBJECT_CONCAT',\n  'OBJECT_INNER_PAIRS',\n  'OBJECT_INNER_VALUES',\n  'OBJECT_LENGTH',\n  'OBJECT_NAMES',\n  'OBJECT_PAIRS',\n  'OBJECT_PUT',\n  'OBJECT_REMOVE',\n  'OBJECT_RENAME',\n  'OBJECT_REPLACE',\n  'OBJECT_UNWRAP',\n  'OBJECT_VALUES',\n  'PAIRS',\n  'PERCENT_RANK',\n  'PI',\n  'POLY_LENGTH',\n  'POSINFIF',\n  'POSITION',\n  'POWER',\n  'RADIANS',\n  'RANDOM',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'REGEXP_CONTAINS',\n  'REGEXP_LIKE',\n  'REGEXP_MATCHES',\n  'REGEXP_POSITION',\n  'REGEXP_REPLACE',\n  'REGEXP_SPLIT',\n  'REGEX_CONTAINS',\n  'REGEX_LIKE',\n  'REGEX_MATCHES',\n  'REGEX_POSITION',\n  'REGEX_REPLACE',\n  'REGEX_SPLIT',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'ROUND',\n  'ROW_NUMBER',\n  'RTRIM',\n  'SEARCH',\n  'SEARCH_META',\n  'SEARCH_SCORE',\n  'SIGN',\n  'SIN',\n  'SPLIT',\n  'SQRT',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STR_TO_DURATION',\n  'STR_TO_MILLIS',\n  'STR_TO_TZ',\n  'STR_TO_UTC',\n  'STR_TO_ZONE_NAME',\n  'SUBSTR',\n  'SUFFIXES',\n  'SUM',\n  'TAN',\n  'TITLE',\n  'TOARRAY',\n  'TOATOM',\n  'TOBOOLEAN',\n  'TOKENS',\n  'TOKENS',\n  'TONUMBER',\n  'TOOBJECT',\n  'TOSTRING',\n  'TRIM',\n  'TRUNC',\n  // 'TYPE', // disabled\n  'UPPER',\n  'UUID',\n  'VARIANCE',\n  'VARIANCE_POP',\n  'VARIANCE_SAMP',\n  'VAR_POP',\n  'VAR_SAMP',\n  'WEEKDAY_MILLIS',\n  'WEEKDAY_STR',\n  // type casting\n  // not implemented in N1QL, but added here now for the sake of tests\n  // https://docs.couchbase.com/server/current/analytics/3_query.html#Vs_SQL-92\n  'CAST',\n];\n","export const keywords: string[] = [\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n  'ADVISE',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'ANY',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'AT',\n  'BEGIN',\n  'BETWEEN',\n  'BINARY',\n  'BOOLEAN',\n  'BREAK',\n  'BUCKET',\n  'BUILD',\n  'BY',\n  'CALL',\n  'CASE',\n  'CAST',\n  'CLUSTER',\n  'COLLATE',\n  'COLLECTION',\n  'COMMIT',\n  'COMMITTED',\n  'CONNECT',\n  'CONTINUE',\n  'CORRELATED',\n  'COVER',\n  'CREATE',\n  'CURRENT',\n  'DATABASE',\n  'DATASET',\n  'DATASTORE',\n  'DECLARE',\n  'DECREMENT',\n  'DELETE',\n  'DERIVED',\n  'DESC',\n  'DESCRIBE',\n  'DISTINCT',\n  'DO',\n  'DROP',\n  'EACH',\n  'ELEMENT',\n  'ELSE',\n  'END',\n  'EVERY',\n  'EXCEPT',\n  'EXCLUDE',\n  'EXECUTE',\n  'EXISTS',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FILTER',\n  'FIRST',\n  'FLATTEN',\n  'FLUSH',\n  'FOLLOWING',\n  'FOR',\n  'FORCE',\n  'FROM',\n  'FTS',\n  'FUNCTION',\n  'GOLANG',\n  'GRANT',\n  'GROUP',\n  'GROUPS',\n  'GSI',\n  'HASH',\n  'HAVING',\n  'IF',\n  'IGNORE',\n  'ILIKE',\n  'IN',\n  'INCLUDE',\n  'INCREMENT',\n  'INDEX',\n  'INFER',\n  'INLINE',\n  'INNER',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ISOLATION',\n  'JAVASCRIPT',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'KEYSPACE',\n  'KNOWN',\n  'LANGUAGE',\n  'LAST',\n  'LEFT',\n  'LET',\n  'LETTING',\n  'LEVEL',\n  'LIKE',\n  'LIMIT',\n  'LSM',\n  'MAP',\n  'MAPPING',\n  'MATCHED',\n  'MATERIALIZED',\n  'MERGE',\n  'MINUS',\n  'MISSING',\n  'NAMESPACE',\n  'NEST',\n  'NL',\n  'NO',\n  'NOT',\n  'NTH_VALUE',\n  'NULL',\n  'NULLS',\n  'NUMBER',\n  'OBJECT',\n  'OFFSET',\n  'ON',\n  'OPTION',\n  'OPTIONS',\n  'OR',\n  'ORDER',\n  'OTHERS',\n  'OUTER',\n  'OVER',\n  'PARSE',\n  'PARTITION',\n  'PASSWORD',\n  'PATH',\n  'POOL',\n  'PRECEDING',\n  'PREPARE',\n  'PRIMARY',\n  'PRIVATE',\n  'PRIVILEGE',\n  'PROBE',\n  'PROCEDURE',\n  'PUBLIC',\n  'RANGE',\n  'RAW',\n  'REALM',\n  'REDUCE',\n  'RENAME',\n  'RESPECT',\n  'RETURN',\n  'RETURNING',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLLBACK',\n  'ROW',\n  'ROWS',\n  'SATISFIES',\n  'SAVEPOINT',\n  'SCHEMA',\n  'SCOPE',\n  'SELECT',\n  'SELF',\n  'SEMI',\n  'SET',\n  'SHOW',\n  'SOME',\n  'START',\n  'STATISTICS',\n  'STRING',\n  'SYSTEM',\n  'THEN',\n  'TIES',\n  'TO',\n  'TRAN',\n  'TRANSACTION',\n  'TRIGGER',\n  'TRUE',\n  'TRUNCATE',\n  'UNBOUNDED',\n  'UNDER',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNNEST',\n  'UNSET',\n  'UPDATE',\n  'UPSERT',\n  'USE',\n  'USER',\n  'USING',\n  'VALIDATE',\n  'VALUE',\n  'VALUED',\n  'VALUES',\n  'VIA',\n  'VIEW',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WORK',\n  'XOR',\n];\n\nexport const dataTypes: string[] = [\n  // N1QL does not support any way of declaring types for columns.\n  // It does not support the CREATE TABLE statement nor the CAST() expression.\n  //\n  // It does have several keywords like ARRAY and OBJECT, which seem to refer to types,\n  // but they are used as operators. It also reserves several words like STRING and NUMBER,\n  // which it actually doesn't use.\n  //\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/datatypes.html\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './n1ql.functions.js';\nimport { dataTypes, keywords } from './n1ql.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED THEN',\n  'UPDATE SET',\n  'INSERT',\n  // other\n  'NEST',\n  'UNNEST',\n  'RETURNING',\n]);\n\nconst onelineClauses = expandPhrases([\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE FROM',\n  // - set schema:\n  'SET SCHEMA',\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n  'ADVISE',\n  'ALTER INDEX',\n  'BEGIN TRANSACTION',\n  'BUILD INDEX',\n  'COMMIT TRANSACTION',\n  'CREATE COLLECTION',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE PRIMARY INDEX',\n  'CREATE SCOPE',\n  'DROP COLLECTION',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP PRIMARY INDEX',\n  'DROP SCOPE',\n  'EXECUTE',\n  'EXECUTE FUNCTION',\n  'EXPLAIN',\n  'GRANT',\n  'INFER',\n  'PREPARE',\n  'REVOKE',\n  'ROLLBACK TRANSACTION',\n  'SAVEPOINT',\n  'SET TRANSACTION',\n  'UPDATE STATISTICS',\n  'UPSERT',\n  // other\n  'LET',\n  'SET CURRENT SCHEMA',\n  'SHOW',\n  'USE [PRIMARY] KEYS',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT [ALL]', 'INTERSECT [ALL]']);\n\nconst reservedJoins = expandPhrases(['JOIN', '{LEFT | RIGHT} [OUTER] JOIN', 'INNER JOIN']);\n\nconst reservedPhrases = expandPhrases(['{ROWS | RANGE | GROUPS} BETWEEN']);\n\n// For reference: http://docs.couchbase.com.s3-website-us-west-1.amazonaws.com/server/6.0/n1ql/n1ql-language-reference/index.html\nexport const n1ql: DialectOptions = {\n  name: 'n1ql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...onelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // NOTE: single quotes are actually not supported in N1QL,\n    // but we support them anyway as all other SQL dialects do,\n    // which simplifies writing tests that are shared between all dialects.\n    stringTypes: ['\"\"-bs', \"''-bs\"],\n    identTypes: ['``'],\n    extraParens: ['[]', '{}'],\n    paramTypes: { positional: true, numbered: ['$'], named: ['$'] },\n    lineCommentTypes: ['#', '--'],\n    operators: ['%', '==', ':', '||'],\n  },\n  formatOptions: {\n    onelineClauses,\n  },\n};\n","export const keywords: string[] = [\n  // https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/reservewords.htm\n  // 'A',\n  'ADD',\n  'AGENT',\n  'AGGREGATE',\n  'ALL',\n  'ALTER',\n  'AND',\n  'ANY',\n  'ARROW',\n  'AS',\n  'ASC',\n  'AT',\n  'ATTRIBUTE',\n  'AUTHID',\n  'AVG',\n  'BEGIN',\n  'BETWEEN',\n  'BLOCK',\n  'BODY',\n  'BOTH',\n  'BOUND',\n  'BULK',\n  'BY',\n  'BYTE',\n  // 'C',\n  'CALL',\n  'CALLING',\n  'CASCADE',\n  'CASE',\n  'CHARSET',\n  'CHARSETFORM',\n  'CHARSETID',\n  'CHECK',\n  'CLOSE',\n  'CLUSTER',\n  'CLUSTERS',\n  'COLAUTH',\n  'COLLECT',\n  'COLUMNS',\n  'COMMENT',\n  'COMMIT',\n  'COMMITTED',\n  'COMPILED',\n  'COMPRESS',\n  'CONNECT',\n  'CONSTANT',\n  'CONSTRUCTOR',\n  'CONTEXT',\n  'CONVERT',\n  'COUNT',\n  'CRASH',\n  'CREATE',\n  'CURRENT',\n  'CURSOR',\n  'CUSTOMDATUM',\n  'DANGLING',\n  'DATA',\n  'DAY',\n  'DECLARE',\n  'DEFAULT',\n  'DEFINE',\n  'DELETE',\n  'DESC',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DROP',\n  'DURATION',\n  'ELEMENT',\n  'ELSE',\n  'ELSIF',\n  'EMPTY',\n  'END',\n  'ESCAPE',\n  'EXCEPT',\n  'EXCEPTION',\n  'EXCEPTIONS',\n  'EXCLUSIVE',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXTERNAL',\n  'FETCH',\n  'FINAL',\n  'FIXED',\n  'FOR',\n  'FORALL',\n  'FORCE',\n  'FORM',\n  'FROM',\n  'FUNCTION',\n  'GENERAL',\n  'GOTO',\n  'GRANT',\n  'GROUP',\n  'HASH',\n  'HAVING',\n  'HEAP',\n  'HIDDEN',\n  'HOUR',\n  'IDENTIFIED',\n  'IF',\n  'IMMEDIATE',\n  'IN',\n  'INCLUDING',\n  'INDEX',\n  'INDEXES',\n  'INDICATOR',\n  'INDICES',\n  'INFINITE',\n  'INSERT',\n  'INSTANTIABLE',\n  'INTERFACE',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'INVALIDATE',\n  'IS',\n  'ISOLATION',\n  'JAVA',\n  'LANGUAGE',\n  'LARGE',\n  'LEADING',\n  'LENGTH',\n  'LEVEL',\n  'LIBRARY',\n  'LIKE',\n  'LIKE2',\n  'LIKE4',\n  'LIKEC',\n  'LIMIT',\n  'LIMITED',\n  'LOCAL',\n  'LOCK',\n  'LOOP',\n  'MAP',\n  'MAX',\n  'MAXLEN',\n  'MEMBER',\n  'MERGE',\n  'MIN',\n  'MINUS',\n  'MINUTE',\n  'MOD',\n  'MODE',\n  'MODIFY',\n  'MONTH',\n  'MULTISET',\n  'NAME',\n  'NAN',\n  'NATIONAL',\n  'NATIVE',\n  'NEW',\n  'NOCOMPRESS',\n  'NOCOPY',\n  'NOT',\n  'NOWAIT',\n  'NULL',\n  'OBJECT',\n  'OCICOLL',\n  'OCIDATE',\n  'OCIDATETIME',\n  'OCIDURATION',\n  'OCIINTERVAL',\n  'OCILOBLOCATOR',\n  'OCINUMBER',\n  'OCIRAW',\n  'OCIREF',\n  'OCIREFCURSOR',\n  'OCIROWID',\n  'OCISTRING',\n  'OCITYPE',\n  'OF',\n  'ON',\n  'ONLY',\n  'OPAQUE',\n  'OPEN',\n  'OPERATOR',\n  'OPTION',\n  'OR',\n  'ORACLE',\n  'ORADATA',\n  'ORDER',\n  'OVERLAPS',\n  'ORGANIZATION',\n  'ORLANY',\n  'ORLVARY',\n  'OTHERS',\n  'OUT',\n  'OVERRIDING',\n  'PACKAGE',\n  'PARALLEL_ENABLE',\n  'PARAMETER',\n  'PARAMETERS',\n  'PARTITION',\n  'PASCAL',\n  'PIPE',\n  'PIPELINED',\n  'PRAGMA',\n  'PRIOR',\n  'PRIVATE',\n  'PROCEDURE',\n  'PUBLIC',\n  'RAISE',\n  'RANGE',\n  'READ',\n  'RECORD',\n  'REF',\n  'REFERENCE',\n  'REM',\n  'REMAINDER',\n  'RENAME',\n  'RESOURCE',\n  'RESULT',\n  'RETURN',\n  'RETURNING',\n  'REVERSE',\n  'REVOKE',\n  'ROLLBACK',\n  'ROW',\n  'SAMPLE',\n  'SAVE',\n  'SAVEPOINT',\n  'SB1',\n  'SB2',\n  'SB4',\n  'SECOND',\n  'SEGMENT',\n  'SELECT',\n  'SELF',\n  'SEPARATE',\n  'SEQUENCE',\n  'SERIALIZABLE',\n  'SET',\n  'SHARE',\n  'SHORT',\n  'SIZE',\n  'SIZE_T',\n  'SOME',\n  'SPARSE',\n  'SQL',\n  'SQLCODE',\n  'SQLDATA',\n  'SQLNAME',\n  'SQLSTATE',\n  'STANDARD',\n  'START',\n  'STATIC',\n  'STDDEV',\n  'STORED',\n  'STRING',\n  'STRUCT',\n  'STYLE',\n  'SUBMULTISET',\n  'SUBPARTITION',\n  'SUBSTITUTABLE',\n  'SUBTYPE',\n  'SUM',\n  'SYNONYM',\n  'TABAUTH',\n  'TABLE',\n  'TDO',\n  'THE',\n  'THEN',\n  'TIME',\n  'TIMEZONE_ABBR',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TIMEZONE_REGION',\n  'TO',\n  'TRAILING',\n  'TRANSAC',\n  'TRANSACTIONAL',\n  'TRUSTED',\n  'TYPE',\n  'UB1',\n  'UB2',\n  'UB4',\n  'UNDER',\n  'UNION',\n  'UNIQUE',\n  'UNSIGNED',\n  'UNTRUSTED',\n  'UPDATE',\n  'USE',\n  'USING',\n  'VALIST',\n  'VALUE',\n  'VALUES',\n  'VARIABLE',\n  'VARIANCE',\n  'VARRAY',\n  'VIEW',\n  'VIEWS',\n  'VOID',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WITH',\n  'WORK',\n  'WRAPPED',\n  'WRITE',\n  'YEAR',\n  'ZONE',\n];\n\nexport const dataTypes: string[] = [\n  // https://www.ibm.com/docs/en/db2/10.5?topic=plsql-data-types\n  'ARRAY',\n  'BFILE_BASE',\n  'BINARY',\n  'BLOB_BASE',\n  'CHAR VARYING',\n  'CHAR_BASE',\n  'CHAR',\n  'CHARACTER VARYING',\n  'CHARACTER',\n  'CLOB_BASE',\n  'DATE_BASE',\n  'DATE',\n  'DECIMAL',\n  'DOUBLE',\n  'FLOAT',\n  'INT',\n  'INTERVAL DAY',\n  'INTERVAL YEAR',\n  'LONG',\n  'NATIONAL CHAR VARYING',\n  'NATIONAL CHAR',\n  'NATIONAL CHARACTER VARYING',\n  'NATIONAL CHARACTER',\n  'NCHAR VARYING',\n  'NCHAR',\n  'NCHAR',\n  'NUMBER_BASE',\n  'NUMBER',\n  'NUMBERIC',\n  'NVARCHAR',\n  'PRECISION',\n  'RAW',\n  'TIMESTAMP',\n  'UROWID',\n  'VARCHAR',\n  'VARCHAR2',\n];\n","export const functions: string[] = [\n  // https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions001.htm\n  // numeric\n  'ABS',\n  'ACOS',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'BITAND',\n  'CEIL',\n  'COS',\n  'COSH',\n  'EXP',\n  'FLOOR',\n  'LN',\n  'LOG',\n  'MOD',\n  'NANVL',\n  'POWER',\n  'REMAINDER',\n  'ROUND',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SQRT',\n  'TAN',\n  'TANH',\n  'TRUNC',\n  'WIDTH_BUCKET',\n\n  // character\n  'CHR',\n  'CONCAT',\n  'INITCAP',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'NLS_INITCAP',\n  'NLS_LOWER',\n  'NLSSORT',\n  'NLS_UPPER',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REPLACE',\n  'RPAD',\n  'RTRIM',\n  'SOUNDEX',\n  'SUBSTR',\n  'TRANSLATE',\n  'TREAT',\n  'TRIM',\n  'UPPER',\n\n  'NLS_CHARSET_DECL_LEN',\n  'NLS_CHARSET_ID',\n  'NLS_CHARSET_NAME',\n\n  'ASCII',\n  'INSTR',\n  'LENGTH',\n  'REGEXP_INSTR',\n\n  // datetime\n  'ADD_MONTHS',\n  'CURRENT_DATE',\n  'CURRENT_TIMESTAMP',\n  'DBTIMEZONE',\n  'EXTRACT',\n  'FROM_TZ',\n  'LAST_DAY',\n  'LOCALTIMESTAMP',\n  'MONTHS_BETWEEN',\n  'NEW_TIME',\n  'NEXT_DAY',\n  'NUMTODSINTERVAL',\n  'NUMTOYMINTERVAL',\n  'ROUND',\n  'SESSIONTIMEZONE',\n  'SYS_EXTRACT_UTC',\n  'SYSDATE',\n  'SYSTIMESTAMP',\n  'TO_CHAR',\n  'TO_TIMESTAMP',\n  'TO_TIMESTAMP_TZ',\n  'TO_DSINTERVAL',\n  'TO_YMINTERVAL',\n  'TRUNC',\n  'TZ_OFFSET',\n\n  // comparison\n  'GREATEST',\n  'LEAST',\n\n  // conversion\n  'ASCIISTR',\n  'BIN_TO_NUM',\n  'CAST',\n  'CHARTOROWID',\n  'COMPOSE',\n  'CONVERT',\n  'DECOMPOSE',\n  'HEXTORAW',\n  'NUMTODSINTERVAL',\n  'NUMTOYMINTERVAL',\n  'RAWTOHEX',\n  'RAWTONHEX',\n  'ROWIDTOCHAR',\n  'ROWIDTONCHAR',\n  'SCN_TO_TIMESTAMP',\n  'TIMESTAMP_TO_SCN',\n  'TO_BINARY_DOUBLE',\n  'TO_BINARY_FLOAT',\n  'TO_CHAR',\n  'TO_CLOB',\n  'TO_DATE',\n  'TO_DSINTERVAL',\n  'TO_LOB',\n  'TO_MULTI_BYTE',\n  'TO_NCHAR',\n  'TO_NCLOB',\n  'TO_NUMBER',\n  'TO_DSINTERVAL',\n  'TO_SINGLE_BYTE',\n  'TO_TIMESTAMP',\n  'TO_TIMESTAMP_TZ',\n  'TO_YMINTERVAL',\n  'TO_YMINTERVAL',\n  'TRANSLATE',\n  'UNISTR',\n\n  // largeObject\n  'BFILENAME',\n  'EMPTY_BLOB,',\n  'EMPTY_CLOB',\n\n  // collection\n  'CARDINALITY',\n  'COLLECT',\n  'POWERMULTISET',\n  'POWERMULTISET_BY_CARDINALITY',\n  'SET',\n\n  // hierarchical\n  'SYS_CONNECT_BY_PATH',\n\n  // dataMining\n  'CLUSTER_ID',\n  'CLUSTER_PROBABILITY',\n  'CLUSTER_SET',\n  'FEATURE_ID',\n  'FEATURE_SET',\n  'FEATURE_VALUE',\n  'PREDICTION',\n  'PREDICTION_COST',\n  'PREDICTION_DETAILS',\n  'PREDICTION_PROBABILITY',\n  'PREDICTION_SET',\n\n  // xml\n  'APPENDCHILDXML',\n  'DELETEXML',\n  'DEPTH',\n  'EXTRACT',\n  'EXISTSNODE',\n  'EXTRACTVALUE',\n  'INSERTCHILDXML',\n  'INSERTXMLBEFORE',\n  'PATH',\n  'SYS_DBURIGEN',\n  'SYS_XMLAGG',\n  'SYS_XMLGEN',\n  'UPDATEXML',\n  'XMLAGG',\n  'XMLCDATA',\n  'XMLCOLATTVAL',\n  'XMLCOMMENT',\n  'XMLCONCAT',\n  'XMLFOREST',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLQUERY',\n  'XMLROOT',\n  'XMLSEQUENCE',\n  'XMLSERIALIZE',\n  'XMLTABLE',\n  'XMLTRANSFORM',\n\n  // encoding\n  'DECODE',\n  'DUMP',\n  'ORA_HASH',\n  'VSIZE',\n\n  // nullRelated\n  'COALESCE',\n  'LNNVL',\n  'NULLIF',\n  'NVL',\n  'NVL2',\n\n  // env\n  'SYS_CONTEXT',\n  'SYS_GUID',\n  'SYS_TYPEID',\n  'UID',\n  'USER',\n  'USERENV',\n\n  // aggregate\n  'AVG',\n  'COLLECT',\n  'CORR',\n  'CORR_S',\n  'CORR_K',\n  'COUNT',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CUME_DIST',\n  'DENSE_RANK',\n  'FIRST',\n  'GROUP_ID',\n  'GROUPING',\n  'GROUPING_ID',\n  'LAST',\n  'MAX',\n  'MEDIAN',\n  'MIN',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERCENT_RANK',\n  'RANK',\n  'REGR_SLOPE',\n  'REGR_INTERCEPT',\n  'REGR_COUNT',\n  'REGR_R2',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_SXX',\n  'REGR_SYY',\n  'REGR_SXY',\n  'STATS_BINOMIAL_TEST',\n  'STATS_CROSSTAB',\n  'STATS_F_TEST',\n  'STATS_KS_TEST',\n  'STATS_MODE',\n  'STATS_MW_TEST',\n  'STATS_ONE_WAY_ANOVA',\n  'STATS_T_TEST_ONE',\n  'STATS_T_TEST_PAIRED',\n  'STATS_T_TEST_INDEP',\n  'STATS_T_TEST_INDEPU',\n  'STATS_WSR_TEST',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUM',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n\n  // Windowing functions (minus the ones already listed in aggregates)\n  // window\n  'FIRST_VALUE',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'NTILE',\n  'RATIO_TO_REPORT',\n  'ROW_NUMBER',\n\n  // objectReference\n  'DEREF',\n  'MAKE_REF',\n  'REF',\n  'REFTOHEX',\n  'VALUE',\n\n  // model\n  'CV',\n  'ITERATION_NUMBER',\n  'PRESENTNNV',\n  'PRESENTV',\n  'PREVIOUS',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { EOF_TOKEN, isReserved, isToken, Token, TokenType } from '../../lexer/token.js';\nimport { dataTypes, keywords } from './plsql.keywords.js';\nimport { functions } from './plsql.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | UNIQUE]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER [SIBLINGS] BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR UPDATE [OF]',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | ALL INTO]',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  // other\n  'RETURNING',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW',\n  'CREATE MATERIALIZED VIEW',\n  // - update:\n  'UPDATE [ONLY]',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - drop table:\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}',\n  'MODIFY',\n  'RENAME TO',\n  'RENAME COLUMN',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // other\n  'SET SCHEMA',\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'EXCEPT',\n  'EXCEPTION',\n  'LOOP',\n  'START WITH',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'MINUS', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL]',\n  'ON COMMIT',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\nexport const plsql: DialectOptions = {\n  name: 'plsql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    stringTypes: [\n      { quote: \"''-qq\", prefixes: ['N'] },\n      { quote: \"q''\", prefixes: ['N'] },\n    ],\n    // PL/SQL doesn't actually support escaping of quotes in identifiers,\n    // but for the sake of simpler testing we'll support this anyway\n    // as all other SQL dialects with \"identifiers\" do.\n    identTypes: [`\"\"-qq`],\n    identChars: { rest: '$#' },\n    variableTypes: [{ regex: '&{1,2}[A-Za-z][A-Za-z0-9_$#]*' }],\n    paramTypes: { numbered: [':'], named: [':'] },\n    operators: [\n      '**',\n      ':=',\n      '%',\n      '~=',\n      '^=',\n      // '..', // Conflicts with float followed by dot (so \"2..3\" gets parsed as [\"2.\", \".\", \"3\"])\n      '>>',\n      '<<',\n      '=>',\n      '@',\n      '||',\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['@'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n\nfunction postProcess(tokens: Token[]) {\n  let previousReservedToken: Token = EOF_TOKEN;\n\n  return tokens.map(token => {\n    // BY [SET]\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n\n    if (isReserved(token.type)) {\n      previousReservedToken = token;\n    }\n\n    return token;\n  });\n}\n","export const functions: string[] = [\n  // https://www.postgresql.org/docs/14/functions.html\n  //\n  // https://www.postgresql.org/docs/14/functions-math.html\n  'ABS',\n  'ACOS',\n  'ACOSD',\n  'ACOSH',\n  'ASIN',\n  'ASIND',\n  'ASINH',\n  'ATAN',\n  'ATAN2',\n  'ATAN2D',\n  'ATAND',\n  'ATANH',\n  'CBRT',\n  'CEIL',\n  'CEILING',\n  'COS',\n  'COSD',\n  'COSH',\n  'COT',\n  'COTD',\n  'DEGREES',\n  'DIV',\n  'EXP',\n  'FACTORIAL',\n  'FLOOR',\n  'GCD',\n  'LCM',\n  'LN',\n  'LOG',\n  'LOG10',\n  'MIN_SCALE',\n  'MOD',\n  'PI',\n  'POWER',\n  'RADIANS',\n  'RANDOM',\n  'ROUND',\n  'SCALE',\n  'SETSEED',\n  'SIGN',\n  'SIN',\n  'SIND',\n  'SINH',\n  'SQRT',\n  'TAN',\n  'TAND',\n  'TANH',\n  'TRIM_SCALE',\n  'TRUNC',\n  'WIDTH_BUCKET',\n\n  // https://www.postgresql.org/docs/14/functions-string.html\n  'ABS',\n  'ASCII',\n  'BIT_LENGTH',\n  'BTRIM',\n  'CHARACTER_LENGTH',\n  'CHAR_LENGTH',\n  'CHR',\n  'CONCAT',\n  'CONCAT_WS',\n  'FORMAT',\n  'INITCAP',\n  'LEFT',\n  'LENGTH',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MD5',\n  'NORMALIZE',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'PARSE_IDENT',\n  'PG_CLIENT_ENCODING',\n  'POSITION',\n  'QUOTE_IDENT',\n  'QUOTE_LITERAL',\n  'QUOTE_NULLABLE',\n  'REGEXP_MATCH',\n  'REGEXP_MATCHES',\n  'REGEXP_REPLACE',\n  'REGEXP_SPLIT_TO_ARRAY',\n  'REGEXP_SPLIT_TO_TABLE',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RIGHT',\n  'RPAD',\n  'RTRIM',\n  'SPLIT_PART',\n  'SPRINTF',\n  'STARTS_WITH',\n  'STRING_AGG',\n  'STRING_TO_ARRAY',\n  'STRING_TO_TABLE',\n  'STRPOS',\n  'SUBSTR',\n  'SUBSTRING',\n  'TO_ASCII',\n  'TO_HEX',\n  'TRANSLATE',\n  'TRIM',\n  'UNISTR',\n  'UPPER',\n\n  // https://www.postgresql.org/docs/14/functions-binarystring.html\n  'BIT_COUNT',\n  'BIT_LENGTH',\n  'BTRIM',\n  'CONVERT',\n  'CONVERT_FROM',\n  'CONVERT_TO',\n  'DECODE',\n  'ENCODE',\n  'GET_BIT',\n  'GET_BYTE',\n  'LENGTH',\n  'LTRIM',\n  'MD5',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'POSITION',\n  'RTRIM',\n  'SET_BIT',\n  'SET_BYTE',\n  'SHA224',\n  'SHA256',\n  'SHA384',\n  'SHA512',\n  'STRING_AGG',\n  'SUBSTR',\n  'SUBSTRING',\n  'TRIM',\n\n  // https://www.postgresql.org/docs/14/functions-bitstring.html\n  'BIT_COUNT',\n  'BIT_LENGTH',\n  'GET_BIT',\n  'LENGTH',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'POSITION',\n  'SET_BIT',\n  'SUBSTRING',\n\n  // https://www.postgresql.org/docs/14/functions-matching.html\n  'REGEXP_MATCH',\n  'REGEXP_MATCHES',\n  'REGEXP_REPLACE',\n  'REGEXP_SPLIT_TO_ARRAY',\n  'REGEXP_SPLIT_TO_TABLE',\n\n  // https://www.postgresql.org/docs/14/functions-formatting.html\n  'TO_CHAR',\n  'TO_DATE',\n  'TO_NUMBER',\n  'TO_TIMESTAMP',\n\n  // https://www.postgresql.org/docs/14/functions-datetime.html\n  // 'AGE',\n  'CLOCK_TIMESTAMP',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'DATE_BIN',\n  'DATE_PART',\n  'DATE_TRUNC',\n  'EXTRACT',\n  'ISFINITE',\n  'JUSTIFY_DAYS',\n  'JUSTIFY_HOURS',\n  'JUSTIFY_INTERVAL',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'MAKE_DATE',\n  'MAKE_INTERVAL',\n  'MAKE_TIME',\n  'MAKE_TIMESTAMP',\n  'MAKE_TIMESTAMPTZ',\n  'NOW',\n  'PG_SLEEP',\n  'PG_SLEEP_FOR',\n  'PG_SLEEP_UNTIL',\n  'STATEMENT_TIMESTAMP',\n  'TIMEOFDAY',\n  'TO_TIMESTAMP',\n  'TRANSACTION_TIMESTAMP',\n\n  // https://www.postgresql.org/docs/14/functions-enum.html\n  'ENUM_FIRST',\n  'ENUM_LAST',\n  'ENUM_RANGE',\n\n  // https://www.postgresql.org/docs/14/functions-geometry.html\n  'AREA',\n  'BOUND_BOX',\n  'BOX',\n  'CENTER',\n  'CIRCLE',\n  'DIAGONAL',\n  'DIAMETER',\n  'HEIGHT',\n  'ISCLOSED',\n  'ISOPEN',\n  'LENGTH',\n  'LINE',\n  'LSEG',\n  'NPOINTS',\n  'PATH',\n  'PCLOSE',\n  'POINT',\n  'POLYGON',\n  'POPEN',\n  'RADIUS',\n  'SLOPE',\n  'WIDTH',\n\n  // https://www.postgresql.org/docs/14/functions-net.html\n  'ABBREV',\n  'BROADCAST',\n  'FAMILY',\n  'HOST',\n  'HOSTMASK',\n  'INET_MERGE',\n  'INET_SAME_FAMILY',\n  'MACADDR8_SET7BIT',\n  'MASKLEN',\n  'NETMASK',\n  'NETWORK',\n  'SET_MASKLEN',\n  // 'TEXT', // excluded because it's also a data type name\n  'TRUNC',\n\n  // https://www.postgresql.org/docs/14/functions-textsearch.html\n  'ARRAY_TO_TSVECTOR',\n  'GET_CURRENT_TS_CONFIG',\n  'JSONB_TO_TSVECTOR',\n  'JSON_TO_TSVECTOR',\n  'LENGTH',\n  'NUMNODE',\n  'PHRASETO_TSQUERY',\n  'PLAINTO_TSQUERY',\n  'QUERYTREE',\n  'SETWEIGHT',\n  'STRIP',\n  'TO_TSQUERY',\n  'TO_TSVECTOR',\n  'TSQUERY_PHRASE',\n  'TSVECTOR_TO_ARRAY',\n  'TS_DEBUG',\n  'TS_DELETE',\n  'TS_FILTER',\n  'TS_HEADLINE',\n  'TS_LEXIZE',\n  'TS_PARSE',\n  'TS_RANK',\n  'TS_RANK_CD',\n  'TS_REWRITE',\n  'TS_STAT',\n  'TS_TOKEN_TYPE',\n  'WEBSEARCH_TO_TSQUERY',\n\n  // https://www.postgresql.org/docs/14/functions-uuid.html\n  'UUID',\n\n  // https://www.postgresql.org/docs/14/functions-xml.html\n  'CURSOR_TO_XML',\n  'CURSOR_TO_XMLSCHEMA',\n  'DATABASE_TO_XML',\n  'DATABASE_TO_XMLSCHEMA',\n  'DATABASE_TO_XML_AND_XMLSCHEMA',\n  'NEXTVAL',\n  'QUERY_TO_XML',\n  'QUERY_TO_XMLSCHEMA',\n  'QUERY_TO_XML_AND_XMLSCHEMA',\n  'SCHEMA_TO_XML',\n  'SCHEMA_TO_XMLSCHEMA',\n  'SCHEMA_TO_XML_AND_XMLSCHEMA',\n  'STRING',\n  'TABLE_TO_XML',\n  'TABLE_TO_XMLSCHEMA',\n  'TABLE_TO_XML_AND_XMLSCHEMA',\n  'XMLAGG',\n  'XMLCOMMENT',\n  'XMLCONCAT',\n  'XMLELEMENT',\n  'XMLEXISTS',\n  'XMLFOREST',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLROOT',\n  'XMLSERIALIZE',\n  'XMLTABLE',\n  'XML_IS_WELL_FORMED',\n  'XML_IS_WELL_FORMED_CONTENT',\n  'XML_IS_WELL_FORMED_DOCUMENT',\n  'XPATH',\n  'XPATH_EXISTS',\n\n  // https://www.postgresql.org/docs/14/functions-json.html\n  'ARRAY_TO_JSON',\n  'JSONB_AGG',\n  'JSONB_ARRAY_ELEMENTS',\n  'JSONB_ARRAY_ELEMENTS_TEXT',\n  'JSONB_ARRAY_LENGTH',\n  'JSONB_BUILD_ARRAY',\n  'JSONB_BUILD_OBJECT',\n  'JSONB_EACH',\n  'JSONB_EACH_TEXT',\n  'JSONB_EXTRACT_PATH',\n  'JSONB_EXTRACT_PATH_TEXT',\n  'JSONB_INSERT',\n  'JSONB_OBJECT',\n  'JSONB_OBJECT_AGG',\n  'JSONB_OBJECT_KEYS',\n  'JSONB_PATH_EXISTS',\n  'JSONB_PATH_EXISTS_TZ',\n  'JSONB_PATH_MATCH',\n  'JSONB_PATH_MATCH_TZ',\n  'JSONB_PATH_QUERY',\n  'JSONB_PATH_QUERY_ARRAY',\n  'JSONB_PATH_QUERY_ARRAY_TZ',\n  'JSONB_PATH_QUERY_FIRST',\n  'JSONB_PATH_QUERY_FIRST_TZ',\n  'JSONB_PATH_QUERY_TZ',\n  'JSONB_POPULATE_RECORD',\n  'JSONB_POPULATE_RECORDSET',\n  'JSONB_PRETTY',\n  'JSONB_SET',\n  'JSONB_SET_LAX',\n  'JSONB_STRIP_NULLS',\n  'JSONB_TO_RECORD',\n  'JSONB_TO_RECORDSET',\n  'JSONB_TYPEOF',\n  'JSON_AGG',\n  'JSON_ARRAY_ELEMENTS',\n  'JSON_ARRAY_ELEMENTS_TEXT',\n  'JSON_ARRAY_LENGTH',\n  'JSON_BUILD_ARRAY',\n  'JSON_BUILD_OBJECT',\n  'JSON_EACH',\n  'JSON_EACH_TEXT',\n  'JSON_EXTRACT_PATH',\n  'JSON_EXTRACT_PATH_TEXT',\n  'JSON_OBJECT',\n  'JSON_OBJECT_AGG',\n  'JSON_OBJECT_KEYS',\n  'JSON_POPULATE_RECORD',\n  'JSON_POPULATE_RECORDSET',\n  'JSON_STRIP_NULLS',\n  'JSON_TO_RECORD',\n  'JSON_TO_RECORDSET',\n  'JSON_TYPEOF',\n  'ROW_TO_JSON',\n  'TO_JSON',\n  'TO_JSONB',\n  'TO_TIMESTAMP',\n\n  // https://www.postgresql.org/docs/14/functions-sequence.html\n  'CURRVAL',\n  'LASTVAL',\n  'NEXTVAL',\n  'SETVAL',\n\n  // https://www.postgresql.org/docs/14/functions-conditional.html\n  // 'CASE',\n  'COALESCE',\n  'GREATEST',\n  'LEAST',\n  'NULLIF',\n\n  // https://www.postgresql.org/docs/14/functions-array.html\n  'ARRAY_AGG',\n  'ARRAY_APPEND',\n  'ARRAY_CAT',\n  'ARRAY_DIMS',\n  'ARRAY_FILL',\n  'ARRAY_LENGTH',\n  'ARRAY_LOWER',\n  'ARRAY_NDIMS',\n  'ARRAY_POSITION',\n  'ARRAY_POSITIONS',\n  'ARRAY_PREPEND',\n  'ARRAY_REMOVE',\n  'ARRAY_REPLACE',\n  'ARRAY_TO_STRING',\n  'ARRAY_UPPER',\n  'CARDINALITY',\n  'STRING_TO_ARRAY',\n  'TRIM_ARRAY',\n  'UNNEST',\n\n  // https://www.postgresql.org/docs/14/functions-range.html\n  'ISEMPTY',\n  'LOWER',\n  'LOWER_INC',\n  'LOWER_INF',\n  'MULTIRANGE',\n  'RANGE_MERGE',\n  'UPPER',\n  'UPPER_INC',\n  'UPPER_INF',\n\n  // https://www.postgresql.org/docs/14/functions-aggregate.html\n  // 'ANY',\n  'ARRAY_AGG',\n  'AVG',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'BOOL_AND',\n  'BOOL_OR',\n  'COALESCE',\n  'CORR',\n  'COUNT',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CUME_DIST',\n  'DENSE_RANK',\n  'EVERY',\n  'GROUPING',\n  'JSONB_AGG',\n  'JSONB_OBJECT_AGG',\n  'JSON_AGG',\n  'JSON_OBJECT_AGG',\n  'MAX',\n  'MIN',\n  'MODE',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERCENT_RANK',\n  'RANGE_AGG',\n  'RANGE_INTERSECT_AGG',\n  'RANK',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  // 'SOME',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STRING_AGG',\n  'SUM',\n  'TO_JSON',\n  'TO_JSONB',\n  'VARIANCE',\n  'VAR_POP',\n  'VAR_SAMP',\n  'XMLAGG',\n\n  // https://www.postgresql.org/docs/14/functions-window.html\n  'CUME_DIST',\n  'DENSE_RANK',\n  'FIRST_VALUE',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'NTH_VALUE',\n  'NTILE',\n  'PERCENT_RANK',\n  'RANK',\n  'ROW_NUMBER',\n\n  // https://www.postgresql.org/docs/14/functions-srf.html\n  'GENERATE_SERIES',\n  'GENERATE_SUBSCRIPTS',\n\n  // https://www.postgresql.org/docs/14/functions-info.html\n  'ACLDEFAULT',\n  'ACLEXPLODE',\n  'COL_DESCRIPTION',\n  'CURRENT_CATALOG',\n  'CURRENT_DATABASE',\n  'CURRENT_QUERY',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_SCHEMAS',\n  'CURRENT_USER',\n  'FORMAT_TYPE',\n  'HAS_ANY_COLUMN_PRIVILEGE',\n  'HAS_COLUMN_PRIVILEGE',\n  'HAS_DATABASE_PRIVILEGE',\n  'HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE',\n  'HAS_FUNCTION_PRIVILEGE',\n  'HAS_LANGUAGE_PRIVILEGE',\n  'HAS_SCHEMA_PRIVILEGE',\n  'HAS_SEQUENCE_PRIVILEGE',\n  'HAS_SERVER_PRIVILEGE',\n  'HAS_TABLESPACE_PRIVILEGE',\n  'HAS_TABLE_PRIVILEGE',\n  'HAS_TYPE_PRIVILEGE',\n  'INET_CLIENT_ADDR',\n  'INET_CLIENT_PORT',\n  'INET_SERVER_ADDR',\n  'INET_SERVER_PORT',\n  'MAKEACLITEM',\n  'OBJ_DESCRIPTION',\n  'PG_BACKEND_PID',\n  'PG_BLOCKING_PIDS',\n  'PG_COLLATION_IS_VISIBLE',\n  'PG_CONF_LOAD_TIME',\n  'PG_CONTROL_CHECKPOINT',\n  'PG_CONTROL_INIT',\n  'PG_CONTROL_SYSTEM',\n  'PG_CONVERSION_IS_VISIBLE',\n  'PG_CURRENT_LOGFILE',\n  'PG_CURRENT_SNAPSHOT',\n  'PG_CURRENT_XACT_ID',\n  'PG_CURRENT_XACT_ID_IF_ASSIGNED',\n  'PG_DESCRIBE_OBJECT',\n  'PG_FUNCTION_IS_VISIBLE',\n  'PG_GET_CATALOG_FOREIGN_KEYS',\n  'PG_GET_CONSTRAINTDEF',\n  'PG_GET_EXPR',\n  'PG_GET_FUNCTIONDEF',\n  'PG_GET_FUNCTION_ARGUMENTS',\n  'PG_GET_FUNCTION_IDENTITY_ARGUMENTS',\n  'PG_GET_FUNCTION_RESULT',\n  'PG_GET_INDEXDEF',\n  'PG_GET_KEYWORDS',\n  'PG_GET_OBJECT_ADDRESS',\n  'PG_GET_OWNED_SEQUENCE',\n  'PG_GET_RULEDEF',\n  'PG_GET_SERIAL_SEQUENCE',\n  'PG_GET_STATISTICSOBJDEF',\n  'PG_GET_TRIGGERDEF',\n  'PG_GET_USERBYID',\n  'PG_GET_VIEWDEF',\n  'PG_HAS_ROLE',\n  'PG_IDENTIFY_OBJECT',\n  'PG_IDENTIFY_OBJECT_AS_ADDRESS',\n  'PG_INDEXAM_HAS_PROPERTY',\n  'PG_INDEX_COLUMN_HAS_PROPERTY',\n  'PG_INDEX_HAS_PROPERTY',\n  'PG_IS_OTHER_TEMP_SCHEMA',\n  'PG_JIT_AVAILABLE',\n  'PG_LAST_COMMITTED_XACT',\n  'PG_LISTENING_CHANNELS',\n  'PG_MY_TEMP_SCHEMA',\n  'PG_NOTIFICATION_QUEUE_USAGE',\n  'PG_OPCLASS_IS_VISIBLE',\n  'PG_OPERATOR_IS_VISIBLE',\n  'PG_OPFAMILY_IS_VISIBLE',\n  'PG_OPTIONS_TO_TABLE',\n  'PG_POSTMASTER_START_TIME',\n  'PG_SAFE_SNAPSHOT_BLOCKING_PIDS',\n  'PG_SNAPSHOT_XIP',\n  'PG_SNAPSHOT_XMAX',\n  'PG_SNAPSHOT_XMIN',\n  'PG_STATISTICS_OBJ_IS_VISIBLE',\n  'PG_TABLESPACE_DATABASES',\n  'PG_TABLESPACE_LOCATION',\n  'PG_TABLE_IS_VISIBLE',\n  'PG_TRIGGER_DEPTH',\n  'PG_TS_CONFIG_IS_VISIBLE',\n  'PG_TS_DICT_IS_VISIBLE',\n  'PG_TS_PARSER_IS_VISIBLE',\n  'PG_TS_TEMPLATE_IS_VISIBLE',\n  'PG_TYPEOF',\n  'PG_TYPE_IS_VISIBLE',\n  'PG_VISIBLE_IN_SNAPSHOT',\n  'PG_XACT_COMMIT_TIMESTAMP',\n  'PG_XACT_COMMIT_TIMESTAMP_ORIGIN',\n  'PG_XACT_STATUS',\n  'PQSERVERVERSION',\n  'ROW_SECURITY_ACTIVE',\n  'SESSION_USER',\n  'SHOBJ_DESCRIPTION',\n  'TO_REGCLASS',\n  'TO_REGCOLLATION',\n  'TO_REGNAMESPACE',\n  'TO_REGOPER',\n  'TO_REGOPERATOR',\n  'TO_REGPROC',\n  'TO_REGPROCEDURE',\n  'TO_REGROLE',\n  'TO_REGTYPE',\n  'TXID_CURRENT',\n  'TXID_CURRENT_IF_ASSIGNED',\n  'TXID_CURRENT_SNAPSHOT',\n  'TXID_SNAPSHOT_XIP',\n  'TXID_SNAPSHOT_XMAX',\n  'TXID_SNAPSHOT_XMIN',\n  'TXID_STATUS',\n  'TXID_VISIBLE_IN_SNAPSHOT',\n  'USER',\n  'VERSION',\n\n  // https://www.postgresql.org/docs/14/functions-admin.html\n  'BRIN_DESUMMARIZE_RANGE',\n  'BRIN_SUMMARIZE_NEW_VALUES',\n  'BRIN_SUMMARIZE_RANGE',\n  'CONVERT_FROM',\n  'CURRENT_SETTING',\n  'GIN_CLEAN_PENDING_LIST',\n  'PG_ADVISORY_LOCK',\n  'PG_ADVISORY_LOCK_SHARED',\n  'PG_ADVISORY_UNLOCK',\n  'PG_ADVISORY_UNLOCK_ALL',\n  'PG_ADVISORY_UNLOCK_SHARED',\n  'PG_ADVISORY_XACT_LOCK',\n  'PG_ADVISORY_XACT_LOCK_SHARED',\n  'PG_BACKUP_START_TIME',\n  'PG_CANCEL_BACKEND',\n  'PG_COLLATION_ACTUAL_VERSION',\n  'PG_COLUMN_COMPRESSION',\n  'PG_COLUMN_SIZE',\n  'PG_COPY_LOGICAL_REPLICATION_SLOT',\n  'PG_COPY_PHYSICAL_REPLICATION_SLOT',\n  'PG_CREATE_LOGICAL_REPLICATION_SLOT',\n  'PG_CREATE_PHYSICAL_REPLICATION_SLOT',\n  'PG_CREATE_RESTORE_POINT',\n  'PG_CURRENT_WAL_FLUSH_LSN',\n  'PG_CURRENT_WAL_INSERT_LSN',\n  'PG_CURRENT_WAL_LSN',\n  'PG_DATABASE_SIZE',\n  'PG_DROP_REPLICATION_SLOT',\n  'PG_EXPORT_SNAPSHOT',\n  'PG_FILENODE_RELATION',\n  'PG_GET_WAL_REPLAY_PAUSE_STATE',\n  'PG_IMPORT_SYSTEM_COLLATIONS',\n  'PG_INDEXES_SIZE',\n  'PG_IS_IN_BACKUP',\n  'PG_IS_IN_RECOVERY',\n  'PG_IS_WAL_REPLAY_PAUSED',\n  'PG_LAST_WAL_RECEIVE_LSN',\n  'PG_LAST_WAL_REPLAY_LSN',\n  'PG_LAST_XACT_REPLAY_TIMESTAMP',\n  'PG_LOGICAL_EMIT_MESSAGE',\n  'PG_LOGICAL_SLOT_GET_BINARY_CHANGES',\n  'PG_LOGICAL_SLOT_GET_CHANGES',\n  'PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES',\n  'PG_LOGICAL_SLOT_PEEK_CHANGES',\n  'PG_LOG_BACKEND_MEMORY_CONTEXTS',\n  'PG_LS_ARCHIVE_STATUSDIR',\n  'PG_LS_DIR',\n  'PG_LS_LOGDIR',\n  'PG_LS_TMPDIR',\n  'PG_LS_WALDIR',\n  'PG_PARTITION_ANCESTORS',\n  'PG_PARTITION_ROOT',\n  'PG_PARTITION_TREE',\n  'PG_PROMOTE',\n  'PG_READ_BINARY_FILE',\n  'PG_READ_FILE',\n  'PG_RELATION_FILENODE',\n  'PG_RELATION_FILEPATH',\n  'PG_RELATION_SIZE',\n  'PG_RELOAD_CONF',\n  'PG_REPLICATION_ORIGIN_ADVANCE',\n  'PG_REPLICATION_ORIGIN_CREATE',\n  'PG_REPLICATION_ORIGIN_DROP',\n  'PG_REPLICATION_ORIGIN_OID',\n  'PG_REPLICATION_ORIGIN_PROGRESS',\n  'PG_REPLICATION_ORIGIN_SESSION_IS_SETUP',\n  'PG_REPLICATION_ORIGIN_SESSION_PROGRESS',\n  'PG_REPLICATION_ORIGIN_SESSION_RESET',\n  'PG_REPLICATION_ORIGIN_SESSION_SETUP',\n  'PG_REPLICATION_ORIGIN_XACT_RESET',\n  'PG_REPLICATION_ORIGIN_XACT_SETUP',\n  'PG_REPLICATION_SLOT_ADVANCE',\n  'PG_ROTATE_LOGFILE',\n  'PG_SIZE_BYTES',\n  'PG_SIZE_PRETTY',\n  'PG_START_BACKUP',\n  'PG_STAT_FILE',\n  'PG_STOP_BACKUP',\n  'PG_SWITCH_WAL',\n  'PG_TABLESPACE_SIZE',\n  'PG_TABLE_SIZE',\n  'PG_TERMINATE_BACKEND',\n  'PG_TOTAL_RELATION_SIZE',\n  'PG_TRY_ADVISORY_LOCK',\n  'PG_TRY_ADVISORY_LOCK_SHARED',\n  'PG_TRY_ADVISORY_XACT_LOCK',\n  'PG_TRY_ADVISORY_XACT_LOCK_SHARED',\n  'PG_WALFILE_NAME',\n  'PG_WALFILE_NAME_OFFSET',\n  'PG_WAL_LSN_DIFF',\n  'PG_WAL_REPLAY_PAUSE',\n  'PG_WAL_REPLAY_RESUME',\n  'SET_CONFIG',\n\n  // https://www.postgresql.org/docs/14/functions-trigger.html\n  'SUPPRESS_REDUNDANT_UPDATES_TRIGGER',\n  'TSVECTOR_UPDATE_TRIGGER',\n  'TSVECTOR_UPDATE_TRIGGER_COLUMN',\n\n  // https://www.postgresql.org/docs/14/functions-event-triggers.html\n  'PG_EVENT_TRIGGER_DDL_COMMANDS',\n  'PG_EVENT_TRIGGER_DROPPED_OBJECTS',\n  'PG_EVENT_TRIGGER_TABLE_REWRITE_OID',\n  'PG_EVENT_TRIGGER_TABLE_REWRITE_REASON',\n  'PG_GET_OBJECT_ADDRESS',\n\n  // https://www.postgresql.org/docs/14/functions-statistics.html\n  'PG_MCV_LIST_ITEMS',\n\n  // cast\n  'CAST',\n];\n","export const keywords: string[] = [\n  // https://www.postgresql.org/docs/14/sql-keywords-appendix.html\n  'ALL', // reserved\n  'ANALYSE', // reserved\n  'ANALYZE', // reserved\n  'AND', // reserved\n  'ANY', // reserved\n  'AS', // reserved, requires AS\n  'ASC', // reserved\n  'ASYMMETRIC', // reserved\n  'AUTHORIZATION', // reserved (can be function or type)\n  'BETWEEN', // (cannot be function or type)\n  'BINARY', // reserved (can be function or type)\n  'BOTH', // reserved\n  'CASE', // reserved\n  'CAST', // reserved\n  'CHECK', // reserved\n  'COLLATE', // reserved\n  'COLLATION', // reserved (can be function or type)\n  'COLUMN', // reserved\n  'CONCURRENTLY', // reserved (can be function or type)\n  'CONSTRAINT', // reserved\n  'CREATE', // reserved, requires AS\n  'CROSS', // reserved (can be function or type)\n  'CURRENT_CATALOG', // reserved\n  'CURRENT_DATE', // reserved\n  'CURRENT_ROLE', // reserved\n  'CURRENT_SCHEMA', // reserved (can be function or type)\n  'CURRENT_TIME', // reserved\n  'CURRENT_TIMESTAMP', // reserved\n  'CURRENT_USER', // reserved\n  'DAY', // requires AS\n  'DEFAULT', // reserved\n  'DEFERRABLE', // reserved\n  'DESC', // reserved\n  'DISTINCT', // reserved\n  'DO', // reserved\n  'ELSE', // reserved\n  'END', // reserved\n  'EXCEPT', // reserved, requires AS\n  'EXISTS', // (cannot be function or type)\n  'FALSE', // reserved\n  'FETCH', // reserved, requires AS\n  'FILTER', // requires AS\n  'FOR', // reserved, requires AS\n  'FOREIGN', // reserved\n  'FREEZE', // reserved (can be function or type)\n  'FROM', // reserved, requires AS\n  'FULL', // reserved (can be function or type)\n  'GRANT', // reserved, requires AS\n  'GROUP', // reserved, requires AS\n  'HAVING', // reserved, requires AS\n  'HOUR', // requires AS\n  'ILIKE', // reserved (can be function or type)\n  'IN', // reserved\n  'INITIALLY', // reserved\n  'INNER', // reserved (can be function or type)\n  'INOUT', // (cannot be function or type)\n  'INTERSECT', // reserved, requires AS\n  'INTO', // reserved, requires AS\n  'IS', // reserved (can be function or type)\n  'ISNULL', // reserved (can be function or type), requires AS\n  'JOIN', // reserved (can be function or type)\n  'LATERAL', // reserved\n  'LEADING', // reserved\n  'LEFT', // reserved (can be function or type)\n  'LIKE', // reserved (can be function or type)\n  'LIMIT', // reserved, requires AS\n  'LOCALTIME', // reserved\n  'LOCALTIMESTAMP', // reserved\n  'MINUTE', // requires AS\n  'MONTH', // requires AS\n  'NATURAL', // reserved (can be function or type)\n  'NOT', // reserved\n  'NOTNULL', // reserved (can be function or type), requires AS\n  'NULL', // reserved\n  'NULLIF', // (cannot be function or type)\n  'OFFSET', // reserved, requires AS\n  'ON', // reserved, requires AS\n  'ONLY', // reserved\n  'OR', // reserved\n  'ORDER', // reserved, requires AS\n  'OUT', // (cannot be function or type)\n  'OUTER', // reserved (can be function or type)\n  'OVER', // requires AS\n  'OVERLAPS', // reserved (can be function or type), requires AS\n  'PLACING', // reserved\n  'PRIMARY', // reserved\n  'REFERENCES', // reserved\n  'RETURNING', // reserved, requires AS\n  'RIGHT', // reserved (can be function or type)\n  'ROW', // (cannot be function or type)\n  'SECOND', // requires AS\n  'SELECT', // reserved\n  'SESSION_USER', // reserved\n  'SIMILAR', // reserved (can be function or type)\n  'SOME', // reserved\n  'SYMMETRIC', // reserved\n  'TABLE', // reserved\n  'TABLESAMPLE', // reserved (can be function or type)\n  'THEN', // reserved\n  'TO', // reserved, requires AS\n  'TRAILING', // reserved\n  'TRUE', // reserved\n  'UNION', // reserved, requires AS\n  'UNIQUE', // reserved\n  'USER', // reserved\n  'USING', // reserved\n  'VALUES', // (cannot be function or type)\n  'VARIADIC', // reserved\n  'VERBOSE', // reserved (can be function or type)\n  'WHEN', // reserved\n  'WHERE', // reserved, requires AS\n  'WINDOW', // reserved, requires AS\n  'WITH', // reserved, requires AS\n  'WITHIN', // requires AS\n  'WITHOUT', // requires AS\n  'YEAR', // requires AS\n];\n\nexport const dataTypes: string[] = [\n  // https://www.postgresql.org/docs/current/datatype.html\n  'ARRAY', // reserved, requires AS\n  'BIGINT', // (cannot be function or type)\n  'BIT', // (cannot be function or type)\n  'BIT VARYING',\n  'BOOL', // (cannot be function or type)\n  'BOOLEAN', // (cannot be function or type)\n  'CHAR', // (cannot be function or type), requires AS\n  'CHARACTER', // (cannot be function or type), requires AS\n  'CHARACTER VARYING',\n  'DECIMAL', // (cannot be function or type)\n  'DEC', // (cannot be function or type)\n  'DOUBLE',\n  'ENUM',\n  'FLOAT', // (cannot be function or type)\n  'INT', // (cannot be function or type)\n  'INTEGER', // (cannot be function or type)\n  'INTERVAL', // (cannot be function or type)\n  'NCHAR', // (cannot be function or type)\n  'NUMERIC', // (cannot be function or type)\n  'PRECISION', // (cannot be function or type), requires AS\n  'REAL', // (cannot be function or type)\n  'SMALLINT', // (cannot be function or type)\n  'TEXT',\n  'TIME', // (cannot be function or type)\n  'TIMESTAMP', // (cannot be function or type)\n  'TIMESTAMPTZ', // (cannot be function or type)\n  'VARCHAR', // (cannot be function or type)\n  'XML',\n  'ZONE',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './postgresql.functions.js';\nimport { dataTypes, keywords } from './postgresql.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  'DEFAULT VALUES',\n  // - update:\n  'SET',\n  // other\n  'RETURNING',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create\n  'CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW',\n  'CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE [ONLY]',\n  'WHERE CURRENT OF',\n  // - insert:\n  'ON CONFLICT',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS] [ONLY]',\n  'ALTER TABLE ALL IN TABLESPACE',\n  'RENAME [COLUMN]',\n  'RENAME TO',\n  'ADD [COLUMN] [IF NOT EXISTS]',\n  'DROP [COLUMN] [IF EXISTS]',\n  'ALTER [COLUMN]',\n  'SET DATA TYPE', // for alter column\n  '{SET | DROP} DEFAULT', // for alter column\n  '{SET | DROP} NOT NULL', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE] [ONLY]',\n  // other\n  'SET SCHEMA',\n  'AFTER',\n  // https://www.postgresql.org/docs/14/sql-commands.html\n  'ABORT',\n  'ALTER AGGREGATE',\n  'ALTER COLLATION',\n  'ALTER CONVERSION',\n  'ALTER DATABASE',\n  'ALTER DEFAULT PRIVILEGES',\n  'ALTER DOMAIN',\n  'ALTER EVENT TRIGGER',\n  'ALTER EXTENSION',\n  'ALTER FOREIGN DATA WRAPPER',\n  'ALTER FOREIGN TABLE',\n  'ALTER FUNCTION',\n  'ALTER GROUP',\n  'ALTER INDEX',\n  'ALTER LANGUAGE',\n  'ALTER LARGE OBJECT',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER OPERATOR',\n  'ALTER OPERATOR CLASS',\n  'ALTER OPERATOR FAMILY',\n  'ALTER POLICY',\n  'ALTER PROCEDURE',\n  'ALTER PUBLICATION',\n  'ALTER ROLE',\n  'ALTER ROUTINE',\n  'ALTER RULE',\n  'ALTER SCHEMA',\n  'ALTER SEQUENCE',\n  'ALTER SERVER',\n  'ALTER STATISTICS',\n  'ALTER SUBSCRIPTION',\n  'ALTER SYSTEM',\n  'ALTER TABLESPACE',\n  'ALTER TEXT SEARCH CONFIGURATION',\n  'ALTER TEXT SEARCH DICTIONARY',\n  'ALTER TEXT SEARCH PARSER',\n  'ALTER TEXT SEARCH TEMPLATE',\n  'ALTER TRIGGER',\n  'ALTER TYPE',\n  'ALTER USER',\n  'ALTER USER MAPPING',\n  'ALTER VIEW',\n  'ANALYZE',\n  'BEGIN',\n  'CALL',\n  'CHECKPOINT',\n  'CLOSE',\n  'CLUSTER',\n  'COMMIT',\n  'COMMIT PREPARED',\n  'COPY',\n  'CREATE ACCESS METHOD',\n  'CREATE AGGREGATE',\n  'CREATE CAST',\n  'CREATE COLLATION',\n  'CREATE CONVERSION',\n  'CREATE DATABASE',\n  'CREATE DOMAIN',\n  'CREATE EVENT TRIGGER',\n  'CREATE EXTENSION',\n  'CREATE FOREIGN DATA WRAPPER',\n  'CREATE FOREIGN TABLE',\n  'CREATE [OR REPLACE] FUNCTION',\n  'CREATE GROUP',\n  'CREATE INDEX',\n  'CREATE LANGUAGE',\n  'CREATE OPERATOR',\n  'CREATE OPERATOR CLASS',\n  'CREATE OPERATOR FAMILY',\n  'CREATE POLICY',\n  'CREATE PROCEDURE',\n  'CREATE PUBLICATION',\n  'CREATE ROLE',\n  'CREATE RULE',\n  'CREATE SCHEMA',\n  'CREATE SEQUENCE',\n  'CREATE SERVER',\n  'CREATE STATISTICS',\n  'CREATE SUBSCRIPTION',\n  'CREATE TABLESPACE',\n  'CREATE TEXT SEARCH CONFIGURATION',\n  'CREATE TEXT SEARCH DICTIONARY',\n  'CREATE TEXT SEARCH PARSER',\n  'CREATE TEXT SEARCH TEMPLATE',\n  'CREATE TRANSFORM',\n  'CREATE TRIGGER',\n  'CREATE TYPE',\n  'CREATE USER',\n  'CREATE USER MAPPING',\n  'DEALLOCATE',\n  'DECLARE',\n  'DISCARD',\n  'DROP ACCESS METHOD',\n  'DROP AGGREGATE',\n  'DROP CAST',\n  'DROP COLLATION',\n  'DROP CONVERSION',\n  'DROP DATABASE',\n  'DROP DOMAIN',\n  'DROP EVENT TRIGGER',\n  'DROP EXTENSION',\n  'DROP FOREIGN DATA WRAPPER',\n  'DROP FOREIGN TABLE',\n  'DROP FUNCTION',\n  'DROP GROUP',\n  'DROP IDENTITY',\n  'DROP INDEX',\n  'DROP LANGUAGE',\n  'DROP MATERIALIZED VIEW [IF EXISTS]',\n  'DROP OPERATOR',\n  'DROP OPERATOR CLASS',\n  'DROP OPERATOR FAMILY',\n  'DROP OWNED',\n  'DROP POLICY',\n  'DROP PROCEDURE',\n  'DROP PUBLICATION',\n  'DROP ROLE',\n  'DROP ROUTINE',\n  'DROP RULE',\n  'DROP SCHEMA',\n  'DROP SEQUENCE',\n  'DROP SERVER',\n  'DROP STATISTICS',\n  'DROP SUBSCRIPTION',\n  'DROP TABLESPACE',\n  'DROP TEXT SEARCH CONFIGURATION',\n  'DROP TEXT SEARCH DICTIONARY',\n  'DROP TEXT SEARCH PARSER',\n  'DROP TEXT SEARCH TEMPLATE',\n  'DROP TRANSFORM',\n  'DROP TRIGGER',\n  'DROP TYPE',\n  'DROP USER',\n  'DROP USER MAPPING',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FETCH',\n  'GRANT',\n  'IMPORT FOREIGN SCHEMA',\n  'LISTEN',\n  'LOAD',\n  'LOCK',\n  'MOVE',\n  'NOTIFY',\n  'OVERRIDING SYSTEM VALUE',\n  'PREPARE',\n  'PREPARE TRANSACTION',\n  'REASSIGN OWNED',\n  'REFRESH MATERIALIZED VIEW',\n  'REINDEX',\n  'RELEASE SAVEPOINT',\n  'RESET [ALL|ROLE|SESSION AUTHORIZATION]',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK PREPARED',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SECURITY LABEL',\n  'SELECT INTO',\n  'SET CONSTRAINTS',\n  'SET ROLE',\n  'SET SESSION AUTHORIZATION',\n  'SET TRANSACTION',\n  'SHOW',\n  'START TRANSACTION',\n  'UNLISTEN',\n  'VACUUM',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'PRIMARY KEY',\n  'GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY',\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n  'DO {NOTHING | UPDATE}',\n  'AS MATERIALIZED',\n  '{ROWS | RANGE | GROUPS} BETWEEN',\n  // https://www.postgresql.org/docs/current/datatype-datetime.html\n  '[TIMESTAMP | TIME] {WITH | WITHOUT} TIME ZONE',\n  // comparison operator\n  'IS [NOT] DISTINCT FROM',\n  'NULLS {FIRST | LAST}',\n  'WITH ORDINALITY',\n]);\n\n// https://www.postgresql.org/docs/14/index.html\nexport const postgresql: DialectOptions = {\n  name: 'postgresql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    nestedBlockComments: true,\n    extraParens: ['[]'],\n    stringTypes: [\n      '$$',\n      { quote: \"''-qq\", prefixes: ['U&'] },\n      { quote: \"''-qq-bs\", prefixes: ['E'], requirePrefix: true },\n      { quote: \"''-raw\", prefixes: ['B', 'X'], requirePrefix: true },\n    ],\n    identTypes: [{ quote: '\"\"-qq', prefixes: ['U&'] }],\n    identChars: { rest: '$' },\n    paramTypes: { numbered: ['$'] },\n    operators: [\n      // Arithmetic\n      '%',\n      '^',\n      '|/',\n      '||/',\n      '@',\n      // Assignment\n      ':=',\n      // Bitwise\n      '&',\n      '|',\n      '#',\n      '~',\n      '<<',\n      '>>',\n      // Byte comparison\n      '~>~',\n      '~<~',\n      '~>=~',\n      '~<=~',\n      // Geometric\n      '@-@',\n      '@@',\n      '##',\n      '<->',\n      '&&',\n      '&<',\n      '&>',\n      '<<|',\n      '&<|',\n      '|>>',\n      '|&>',\n      '<^',\n      '^>',\n      '?#',\n      '?-',\n      '?|',\n      '?-|',\n      '?||',\n      '@>',\n      '<@',\n      '~=',\n      // JSON\n      '?',\n      '@?',\n      '?&',\n      '->',\n      '->>',\n      '#>',\n      '#>>',\n      '#-',\n      // Named function params\n      '=>',\n      // Network address\n      '>>=',\n      '<<=',\n      // Pattern matching\n      '~~',\n      '~~*',\n      '!~~',\n      '!~~*',\n      // POSIX RegExp\n      '~',\n      '~*',\n      '!~',\n      '!~*',\n      // Range/multirange\n      '-|-',\n      // String concatenation\n      '||',\n      // Text search\n      '@@@',\n      '!!',\n      '^@',\n      // Trigram/trigraph\n      '<%',\n      '%>',\n      '<<%',\n      '%>>',\n      '<<->',\n      '<->>',\n      '<<<->',\n      '<->>>',\n      // Type cast\n      '::',\n      ':',\n      // Custom operators defined by pgvector extension\n      // https://github.com/pgvector/pgvector#querying\n      '<#>',\n      '<=>',\n      '<+>',\n      '<~>',\n      '<%>',\n    ],\n    operatorKeyword: true,\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['::', ':'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Aggregate_Functions.html\n  'ANY_VALUE',\n  'APPROXIMATE PERCENTILE_DISC',\n  'AVG',\n  'COUNT',\n  'LISTAGG',\n  'MAX',\n  'MEDIAN',\n  'MIN',\n  'PERCENTILE_CONT',\n  'STDDEV_SAMP',\n  'STDDEV_POP',\n  'SUM',\n  'VAR_SAMP',\n  'VAR_POP',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Array_Functions.html\n  'array',\n  'array_concat',\n  'array_flatten',\n  'get_array_length',\n  'split_to_array',\n  'subarray',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_bitwise_aggregate_functions.html\n  'BIT_AND',\n  'BIT_OR',\n  'BOOL_AND',\n  'BOOL_OR',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_conditional_expressions.html\n  'COALESCE',\n  'DECODE',\n  'GREATEST',\n  'LEAST',\n  'NVL',\n  'NVL2',\n  'NULLIF',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/Date_functions_header.html\n  'ADD_MONTHS',\n  'AT TIME ZONE',\n  'CONVERT_TIMEZONE',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'DATE_CMP',\n  'DATE_CMP_TIMESTAMP',\n  'DATE_CMP_TIMESTAMPTZ',\n  'DATE_PART_YEAR',\n  'DATEADD',\n  'DATEDIFF',\n  'DATE_PART',\n  'DATE_TRUNC',\n  'EXTRACT',\n  'GETDATE',\n  'INTERVAL_CMP',\n  'LAST_DAY',\n  'MONTHS_BETWEEN',\n  'NEXT_DAY',\n  'SYSDATE',\n  'TIMEOFDAY',\n  'TIMESTAMP_CMP',\n  'TIMESTAMP_CMP_DATE',\n  'TIMESTAMP_CMP_TIMESTAMPTZ',\n  'TIMESTAMPTZ_CMP',\n  'TIMESTAMPTZ_CMP_DATE',\n  'TIMESTAMPTZ_CMP_TIMESTAMP',\n  'TIMEZONE',\n  'TO_TIMESTAMP',\n  'TRUNC',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/geospatial-functions.html\n  'AddBBox',\n  'DropBBox',\n  'GeometryType',\n  'ST_AddPoint',\n  'ST_Angle',\n  'ST_Area',\n  'ST_AsBinary',\n  'ST_AsEWKB',\n  'ST_AsEWKT',\n  'ST_AsGeoJSON',\n  'ST_AsText',\n  'ST_Azimuth',\n  'ST_Boundary',\n  'ST_Collect',\n  'ST_Contains',\n  'ST_ContainsProperly',\n  'ST_ConvexHull',\n  'ST_CoveredBy',\n  'ST_Covers',\n  'ST_Crosses',\n  'ST_Dimension',\n  'ST_Disjoint',\n  'ST_Distance',\n  'ST_DistanceSphere',\n  'ST_DWithin',\n  'ST_EndPoint',\n  'ST_Envelope',\n  'ST_Equals',\n  'ST_ExteriorRing',\n  'ST_Force2D',\n  'ST_Force3D',\n  'ST_Force3DM',\n  'ST_Force3DZ',\n  'ST_Force4D',\n  'ST_GeometryN',\n  'ST_GeometryType',\n  'ST_GeomFromEWKB',\n  'ST_GeomFromEWKT',\n  'ST_GeomFromText',\n  'ST_GeomFromWKB',\n  'ST_InteriorRingN',\n  'ST_Intersects',\n  'ST_IsPolygonCCW',\n  'ST_IsPolygonCW',\n  'ST_IsClosed',\n  'ST_IsCollection',\n  'ST_IsEmpty',\n  'ST_IsSimple',\n  'ST_IsValid',\n  'ST_Length',\n  'ST_LengthSphere',\n  'ST_Length2D',\n  'ST_LineFromMultiPoint',\n  'ST_LineInterpolatePoint',\n  'ST_M',\n  'ST_MakeEnvelope',\n  'ST_MakeLine',\n  'ST_MakePoint',\n  'ST_MakePolygon',\n  'ST_MemSize',\n  'ST_MMax',\n  'ST_MMin',\n  'ST_Multi',\n  'ST_NDims',\n  'ST_NPoints',\n  'ST_NRings',\n  'ST_NumGeometries',\n  'ST_NumInteriorRings',\n  'ST_NumPoints',\n  'ST_Perimeter',\n  'ST_Perimeter2D',\n  'ST_Point',\n  'ST_PointN',\n  'ST_Points',\n  'ST_Polygon',\n  'ST_RemovePoint',\n  'ST_Reverse',\n  'ST_SetPoint',\n  'ST_SetSRID',\n  'ST_Simplify',\n  'ST_SRID',\n  'ST_StartPoint',\n  'ST_Touches',\n  'ST_Within',\n  'ST_X',\n  'ST_XMax',\n  'ST_XMin',\n  'ST_Y',\n  'ST_YMax',\n  'ST_YMin',\n  'ST_Z',\n  'ST_ZMax',\n  'ST_ZMin',\n  'SupportsBBox',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/hash-functions.html\n  'CHECKSUM',\n  'FUNC_SHA1',\n  'FNV_HASH',\n  'MD5',\n  'SHA',\n  'SHA1',\n  'SHA2',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/hyperloglog-functions.html\n  'HLL',\n  'HLL_CREATE_SKETCH',\n  'HLL_CARDINALITY',\n  'HLL_COMBINE',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/json-functions.html\n  'IS_VALID_JSON',\n  'IS_VALID_JSON_ARRAY',\n  'JSON_ARRAY_LENGTH',\n  'JSON_EXTRACT_ARRAY_ELEMENT_TEXT',\n  'JSON_EXTRACT_PATH_TEXT',\n  'JSON_PARSE',\n  'JSON_SERIALIZE',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/Math_functions.html\n  'ABS',\n  'ACOS',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'CBRT',\n  'CEILING',\n  'CEIL',\n  'COS',\n  'COT',\n  'DEGREES',\n  'DEXP',\n  'DLOG1',\n  'DLOG10',\n  'EXP',\n  'FLOOR',\n  'LN',\n  'LOG',\n  'MOD',\n  'PI',\n  'POWER',\n  'RADIANS',\n  'RANDOM',\n  'ROUND',\n  'SIN',\n  'SIGN',\n  'SQRT',\n  'TAN',\n  'TO_HEX',\n  'TRUNC',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/ml-function.html\n  'EXPLAIN_MODEL',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/String_functions_header.html\n  'ASCII',\n  'BPCHARCMP',\n  'BTRIM',\n  'BTTEXT_PATTERN_CMP',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHARINDEX',\n  'CHR',\n  'COLLATE',\n  'CONCAT',\n  'CRC32',\n  'DIFFERENCE',\n  'INITCAP',\n  'LEFT',\n  'RIGHT',\n  'LEN',\n  'LENGTH',\n  'LOWER',\n  'LPAD',\n  'RPAD',\n  'LTRIM',\n  'OCTETINDEX',\n  'OCTET_LENGTH',\n  'POSITION',\n  'QUOTE_IDENT',\n  'QUOTE_LITERAL',\n  'REGEXP_COUNT',\n  'REGEXP_INSTR',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REPEAT',\n  'REPLACE',\n  'REPLICATE',\n  'REVERSE',\n  'RTRIM',\n  'SOUNDEX',\n  'SPLIT_PART',\n  'STRPOS',\n  'STRTOL',\n  'SUBSTRING',\n  'TEXTLEN',\n  'TRANSLATE',\n  'TRIM',\n  'UPPER',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Type_Info_Functions.html\n  'decimal_precision',\n  'decimal_scale',\n  'is_array',\n  'is_bigint',\n  'is_boolean',\n  'is_char',\n  'is_decimal',\n  'is_float',\n  'is_integer',\n  'is_object',\n  'is_scalar',\n  'is_smallint',\n  'is_varchar',\n  'json_typeof',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html\n  'AVG',\n  'COUNT',\n  'CUME_DIST',\n  'DENSE_RANK',\n  'FIRST_VALUE',\n  'LAST_VALUE',\n  'LAG',\n  'LEAD',\n  'LISTAGG',\n  'MAX',\n  'MEDIAN',\n  'MIN',\n  'NTH_VALUE',\n  'NTILE',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'ROW_NUMBER',\n  'STDDEV_SAMP',\n  'STDDEV_POP',\n  'SUM',\n  'VAR_SAMP',\n  'VAR_POP',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_Data_type_formatting.html\n  'CAST',\n  'CONVERT',\n  'TO_CHAR',\n  'TO_DATE',\n  'TO_NUMBER',\n  'TEXT_TO_INT_ALT',\n  'TEXT_TO_NUMERIC_ALT',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_System_administration_functions.html\n  'CHANGE_QUERY_PRIORITY',\n  'CHANGE_SESSION_PRIORITY',\n  'CHANGE_USER_PRIORITY',\n  'CURRENT_SETTING',\n  'PG_CANCEL_BACKEND',\n  'PG_TERMINATE_BACKEND',\n  'REBOOT_CLUSTER',\n  'SET_CONFIG',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_System_information_functions.html\n  'CURRENT_AWS_ACCOUNT',\n  'CURRENT_DATABASE',\n  'CURRENT_NAMESPACE',\n  'CURRENT_SCHEMA',\n  'CURRENT_SCHEMAS',\n  'CURRENT_USER',\n  'CURRENT_USER_ID',\n  'HAS_ASSUMEROLE_PRIVILEGE',\n  'HAS_DATABASE_PRIVILEGE',\n  'HAS_SCHEMA_PRIVILEGE',\n  'HAS_TABLE_PRIVILEGE',\n  'PG_BACKEND_PID',\n  'PG_GET_COLS',\n  'PG_GET_GRANTEE_BY_IAM_ROLE',\n  'PG_GET_IAM_ROLE_BY_USER',\n  'PG_GET_LATE_BINDING_VIEW_COLS',\n  'PG_LAST_COPY_COUNT',\n  'PG_LAST_COPY_ID',\n  'PG_LAST_UNLOAD_ID',\n  'PG_LAST_QUERY_ID',\n  'PG_LAST_UNLOAD_COUNT',\n  'SESSION_USER',\n  'SLICE_NUM',\n  'USER',\n  'VERSION',\n];\n","export const keywords: string[] = [\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\n  'AES128',\n  'AES256',\n  'ALL',\n  'ALLOWOVERWRITE',\n  'ANY',\n  'AS',\n  'ASC',\n  'AUTHORIZATION',\n  'BACKUP',\n  'BETWEEN',\n  'BINARY',\n  'BOTH',\n  'CHECK',\n  'COLUMN',\n  'CONSTRAINT',\n  'CREATE',\n  'CROSS',\n  'DEFAULT',\n  'DEFERRABLE',\n  'DEFLATE',\n  'DEFRAG',\n  'DESC',\n  'DISABLE',\n  'DISTINCT',\n  'DO',\n  'ENABLE',\n  'ENCODE',\n  'ENCRYPT',\n  'ENCRYPTION',\n  'EXPLICIT',\n  'FALSE',\n  'FOR',\n  'FOREIGN',\n  'FREEZE',\n  'FROM',\n  'FULL',\n  'GLOBALDICT256',\n  'GLOBALDICT64K',\n  'GROUP',\n  'IDENTITY',\n  'IGNORE',\n  'ILIKE',\n  'IN',\n  'INITIALLY',\n  'INNER',\n  'INTO',\n  'IS',\n  'ISNULL',\n  'LANGUAGE',\n  'LEADING',\n  'LIKE',\n  'LIMIT',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LUN',\n  'LUNS',\n  'MINUS',\n  'NATURAL',\n  'NEW',\n  'NOT',\n  'NOTNULL',\n  'NULL',\n  'NULLS',\n  'OFF',\n  'OFFLINE',\n  'OFFSET',\n  'OID',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'ORDER',\n  'OUTER',\n  'OVERLAPS',\n  'PARALLEL',\n  'PARTITION',\n  'PERCENT',\n  'PERMISSIONS',\n  'PLACING',\n  'PRIMARY',\n  'RECOVER',\n  'REFERENCES',\n  'REJECTLOG',\n  'RESORT',\n  'RESPECT',\n  'RESTORE',\n  'SIMILAR',\n  'SNAPSHOT',\n  'SOME',\n  'SYSTEM',\n  'TABLE',\n  'TAG',\n  'TDES',\n  'THEN',\n  'TIMESTAMP',\n  'TO',\n  'TOP',\n  'TRAILING',\n  'TRUE',\n  'UNIQUE',\n  'USING',\n  'VERBOSE',\n  'WALLET',\n  'WITHOUT',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n  'ACCEPTANYDATE',\n  'ACCEPTINVCHARS',\n  'BLANKSASNULL',\n  'DATEFORMAT',\n  'EMPTYASNULL',\n  'ENCODING',\n  'ESCAPE',\n  'EXPLICIT_IDS',\n  'FILLRECORD',\n  'IGNOREBLANKLINES',\n  'IGNOREHEADER',\n  'REMOVEQUOTES',\n  'ROUNDEC',\n  'TIMEFORMAT',\n  'TRIMBLANKS',\n  'TRUNCATECOLUMNS',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-load.html\n  'COMPROWS',\n  'COMPUPDATE',\n  'MAXERROR',\n  'NOLOAD',\n  'STATUPDATE',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html\n  'FORMAT',\n  'CSV',\n  'DELIMITER',\n  'FIXEDWIDTH',\n  'SHAPEFILE',\n  'AVRO',\n  'JSON',\n  'PARQUET',\n  'ORC',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-authorization.html\n  'ACCESS_KEY_ID',\n  'CREDENTIALS',\n  'ENCRYPTED',\n  'IAM_ROLE',\n  'MASTER_SYMMETRIC_KEY',\n  'SECRET_ACCESS_KEY',\n  'SESSION_TOKEN',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-file-compression.html\n  'BZIP2',\n  'GZIP',\n  'LZOP',\n  'ZSTD',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_COPY-alphabetical-parm-list.html\n  'MANIFEST',\n  'READRATIO',\n  'REGION',\n  'SSH',\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html\n  'RAW',\n  'AZ64',\n  'BYTEDICT',\n  'DELTA',\n  'DELTA32K',\n  'LZO',\n  'MOSTLY8',\n  'MOSTLY16',\n  'MOSTLY32',\n  'RUNLENGTH',\n  'TEXT255',\n  'TEXT32K',\n\n  // misc\n  // CREATE EXTERNAL SCHEMA (https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html)\n  'CATALOG_ROLE',\n  'SECRET_ARN',\n  'EXTERNAL',\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_choosing_dist_sort.html\n  'AUTO',\n  'EVEN',\n  'KEY',\n  'PREDICATE', // ANALYZE | ANALYSE (https://docs.aws.amazon.com/redshift/latest/dg/r_ANALYZE.html)\n  // unknown\n  'COMPRESSION',\n\n  /**\n   * Other keywords not included:\n   * STL: https://docs.aws.amazon.com/redshift/latest/dg/c_intro_STL_tables.html\n   * SVCS: https://docs.aws.amazon.com/redshift/latest/dg/svcs_views.html\n   * SVL: https://docs.aws.amazon.com/redshift/latest/dg/svl_views.html\n   * SVV: https://docs.aws.amazon.com/redshift/latest/dg/svv_views.html\n   */\n];\n\nexport const dataTypes: string[] = [\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-text-and-bpchar-types\n  'ARRAY',\n  'BIGINT',\n  'BPCHAR',\n  'CHAR',\n  'CHARACTER VARYING',\n  'CHARACTER',\n  'DECIMAL',\n  'INT',\n  'INT2',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'NCHAR',\n  'NUMERIC',\n  'NVARCHAR',\n  'SMALLINT',\n  'TEXT',\n  'VARBYTE',\n  'VARCHAR',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './redshift.functions.js';\nimport { dataTypes, keywords } from './redshift.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE | MATERIALIZED] VIEW',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE [FROM]',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ALTER TABLE APPEND',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME TO',\n  'RENAME COLUMN',\n  'ALTER COLUMN',\n  'TYPE', // for alter column\n  'ENCODE', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_SQL_commands.html\n  'ABORT',\n  'ALTER DATABASE',\n  'ALTER DATASHARE',\n  'ALTER DEFAULT PRIVILEGES',\n  'ALTER GROUP',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER PROCEDURE',\n  'ALTER SCHEMA',\n  'ALTER USER',\n  'ANALYSE',\n  'ANALYZE',\n  'ANALYSE COMPRESSION',\n  'ANALYZE COMPRESSION',\n  'BEGIN',\n  'CALL',\n  'CANCEL',\n  'CLOSE',\n  'COMMIT',\n  'COPY',\n  'CREATE DATABASE',\n  'CREATE DATASHARE',\n  'CREATE EXTERNAL FUNCTION',\n  'CREATE EXTERNAL SCHEMA',\n  'CREATE EXTERNAL TABLE',\n  'CREATE FUNCTION',\n  'CREATE GROUP',\n  'CREATE LIBRARY',\n  'CREATE MODEL',\n  'CREATE PROCEDURE',\n  'CREATE SCHEMA',\n  'CREATE USER',\n  'DEALLOCATE',\n  'DECLARE',\n  'DESC DATASHARE',\n  'DROP DATABASE',\n  'DROP DATASHARE',\n  'DROP FUNCTION',\n  'DROP GROUP',\n  'DROP LIBRARY',\n  'DROP MODEL',\n  'DROP MATERIALIZED VIEW',\n  'DROP PROCEDURE',\n  'DROP SCHEMA',\n  'DROP USER',\n  'DROP VIEW',\n  'DROP',\n  'EXECUTE',\n  'EXPLAIN',\n  'FETCH',\n  'GRANT',\n  'LOCK',\n  'PREPARE',\n  'REFRESH MATERIALIZED VIEW',\n  'RESET',\n  'REVOKE',\n  'ROLLBACK',\n  'SELECT INTO',\n  'SET SESSION AUTHORIZATION',\n  'SET SESSION CHARACTERISTICS',\n  'SHOW',\n  'SHOW EXTERNAL TABLE',\n  'SHOW MODEL',\n  'SHOW DATASHARES',\n  'SHOW PROCEDURE',\n  'SHOW TABLE',\n  'SHOW VIEW',\n  'START TRANSACTION',\n  'UNLOAD',\n  'VACUUM',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT', 'MINUS']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n  'NULL AS',\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html\n  'DATA CATALOG',\n  'HIVE METASTORE',\n  // in window specifications\n  '{ROWS | RANGE} BETWEEN',\n]);\n\n// https://docs.aws.amazon.com/redshift/latest/dg/cm_chap_SQLCommandRef.html\nexport const redshift: DialectOptions = {\n  name: 'redshift',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    stringTypes: [\"''-qq\"],\n    identTypes: [`\"\"-qq`],\n    identChars: { first: '#' },\n    paramTypes: { numbered: ['$'] },\n    operators: [\n      '^',\n      '%',\n      '@',\n      '|/',\n      '||/',\n      '&',\n      '|',\n      // '#', conflicts with first char of identifier\n      '~',\n      '<<',\n      '>>',\n      '||',\n      '::',\n    ],\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['::'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const keywords: string[] = [\n  // https://deepkb.com/CO_000013/en/kb/IMPORT-fbfa59f0-2bf1-31fe-bb7b-0f9efe9932c6/spark-sql-keywords\n  'ADD',\n  'AFTER',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'ANTI',\n  'ANY',\n  'ARCHIVE',\n  'AS',\n  'ASC',\n  'AT',\n  'AUTHORIZATION',\n  'BETWEEN',\n  'BOTH',\n  'BUCKET',\n  'BUCKETS',\n  'BY',\n  'CACHE',\n  'CASCADE',\n  'CAST',\n  'CHANGE',\n  'CHECK',\n  'CLEAR',\n  'CLUSTER',\n  'CLUSTERED',\n  'CODEGEN',\n  'COLLATE',\n  'COLLECTION',\n  'COLUMN',\n  'COLUMNS',\n  'COMMENT',\n  'COMMIT',\n  'COMPACT',\n  'COMPACTIONS',\n  'COMPUTE',\n  'CONCATENATE',\n  'CONSTRAINT',\n  'COST',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'DATA',\n  'DATABASE',\n  'DATABASES',\n  'DAY',\n  'DBPROPERTIES',\n  'DEFINED',\n  'DELETE',\n  'DELIMITED',\n  'DESC',\n  'DESCRIBE',\n  'DFS',\n  'DIRECTORIES',\n  'DIRECTORY',\n  'DISTINCT',\n  'DISTRIBUTE',\n  'DIV',\n  'DROP',\n  'ESCAPE',\n  'ESCAPED',\n  'EXCEPT',\n  'EXCHANGE',\n  'EXISTS',\n  'EXPORT',\n  'EXTENDED',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FETCH',\n  'FIELDS',\n  'FILTER',\n  'FILEFORMAT',\n  'FIRST',\n  'FIRST_VALUE',\n  'FOLLOWING',\n  'FOR',\n  'FOREIGN',\n  'FORMAT',\n  'FORMATTED',\n  'FULL',\n  'FUNCTION',\n  'FUNCTIONS',\n  'GLOBAL',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'HOUR',\n  'IF',\n  'IGNORE',\n  'IMPORT',\n  'IN',\n  'INDEX',\n  'INDEXES',\n  'INNER',\n  'INPATH',\n  'INPUTFORMAT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ITEMS',\n  'KEYS',\n  'LAST',\n  'LAST_VALUE',\n  'LATERAL',\n  'LAZY',\n  'LEADING',\n  'LEFT',\n  'LIKE',\n  'LINES',\n  'LIST',\n  'LOCAL',\n  'LOCATION',\n  'LOCK',\n  'LOCKS',\n  'LOGICAL',\n  'MACRO',\n  'MATCHED',\n  'MERGE',\n  'MINUTE',\n  'MONTH',\n  'MSCK',\n  'NAMESPACE',\n  'NAMESPACES',\n  'NATURAL',\n  'NO',\n  'NOT',\n  'NULL',\n  'NULLS',\n  'OF',\n  'ONLY',\n  'OPTION',\n  'OPTIONS',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTPUTFORMAT',\n  'OVER',\n  'OVERLAPS',\n  'OVERLAY',\n  'OVERWRITE',\n  'OWNER',\n  'PARTITION',\n  'PARTITIONED',\n  'PARTITIONS',\n  'PERCENT',\n  'PLACING',\n  'POSITION',\n  'PRECEDING',\n  'PRIMARY',\n  'PRINCIPALS',\n  'PROPERTIES',\n  'PURGE',\n  'QUERY',\n  'RANGE',\n  'RECORDREADER',\n  'RECORDWRITER',\n  'RECOVER',\n  'REDUCE',\n  'REFERENCES',\n  'RENAME',\n  'REPAIR',\n  'REPLACE',\n  'RESPECT',\n  'RESTRICT',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROLE',\n  'ROLES',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROW',\n  'ROWS',\n  'SCHEMA',\n  'SECOND',\n  'SELECT',\n  'SEMI',\n  'SEPARATED',\n  'SERDE',\n  'SERDEPROPERTIES',\n  'SESSION_USER',\n  'SETS',\n  'SHOW',\n  'SKEWED',\n  'SOME',\n  'SORT',\n  'SORTED',\n  'START',\n  'STATISTICS',\n  'STORED',\n  'STRATIFY',\n  'SUBSTR',\n  'SUBSTRING',\n  'TABLE',\n  'TABLES',\n  'TBLPROPERTIES',\n  'TEMPORARY',\n  'TERMINATED',\n  'THEN',\n  'TO',\n  'TOUCH',\n  'TRAILING',\n  'TRANSACTION',\n  'TRANSACTIONS',\n  'TRIM',\n  'TRUE',\n  'TRUNCATE',\n  'UNARCHIVE',\n  'UNBOUNDED',\n  'UNCACHE',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNLOCK',\n  'UNSET',\n  'USE',\n  'USER',\n  'USING',\n  'VIEW',\n  'WINDOW',\n  'YEAR',\n  // other\n  'ANALYSE',\n  'ARRAY_ZIP',\n  'COALESCE',\n  'CONTAINS',\n  'CONVERT',\n  'DAYS',\n  'DAY_HOUR',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DECODE',\n  'DEFAULT',\n  'DISTINCTROW',\n  'ENCODE',\n  'EXPLODE',\n  'EXPLODE_OUTER',\n  'FIXED',\n  'GREATEST',\n  'GROUP_CONCAT',\n  'HOURS',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IFNULL',\n  'LEAST',\n  'LEVEL',\n  'MINUTE_SECOND',\n  'NULLIF',\n  'OFFSET',\n  'ON',\n  'OPTIMIZE',\n  'REGEXP',\n  'SEPARATOR',\n  'SIZE',\n  'TYPE',\n  'TYPES',\n  'UNSIGNED',\n  'VARIABLES',\n  'YEAR_MONTH',\n];\n\nexport const dataTypes: string[] = [\n  // https://spark.apache.org/docs/latest/sql-ref-datatypes.html\n  'ARRAY',\n  'BIGINT',\n  'BINARY',\n  'BOOLEAN',\n  'BYTE',\n  'CHAR',\n  'DATE',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE',\n  'FLOAT',\n  'INT',\n  'INTEGER',\n  'INTERVAL',\n  'LONG',\n  'MAP',\n  'NUMERIC',\n  'REAL',\n  'SHORT',\n  'SMALLINT',\n  'STRING',\n  'STRUCT',\n  'TIMESTAMP_LTZ',\n  'TIMESTAMP_NTZ',\n  'TIMESTAMP',\n  'TINYINT',\n  'VARCHAR', // No varchar type in Spark, only STRING. Added for the sake of tests\n];\n","export const functions: string[] = [\n  // http://spark.apache.org/docs/latest/sql-ref-functions.html\n  //\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#aggregate-functions\n  // 'ANY',\n  'APPROX_COUNT_DISTINCT',\n  'APPROX_PERCENTILE',\n  'AVG',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'BOOL_AND',\n  'BOOL_OR',\n  'COLLECT_LIST',\n  'COLLECT_SET',\n  'CORR',\n  'COUNT',\n  'COUNT',\n  'COUNT',\n  'COUNT_IF',\n  'COUNT_MIN_SKETCH',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'EVERY',\n  'FIRST',\n  'FIRST_VALUE',\n  'GROUPING',\n  'GROUPING_ID',\n  'KURTOSIS',\n  'LAST',\n  'LAST_VALUE',\n  'MAX',\n  'MAX_BY',\n  'MEAN',\n  'MIN',\n  'MIN_BY',\n  'PERCENTILE',\n  'PERCENTILE',\n  'PERCENTILE_APPROX',\n  'SKEWNESS',\n  // 'SOME',\n  'STD',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUM',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#window-functions\n  'CUME_DIST',\n  'DENSE_RANK',\n  'LAG',\n  'LEAD',\n  'NTH_VALUE',\n  'NTILE',\n  'PERCENT_RANK',\n  'RANK',\n  'ROW_NUMBER',\n\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#array-functions\n  'ARRAY',\n  'ARRAY_CONTAINS',\n  'ARRAY_DISTINCT',\n  'ARRAY_EXCEPT',\n  'ARRAY_INTERSECT',\n  'ARRAY_JOIN',\n  'ARRAY_MAX',\n  'ARRAY_MIN',\n  'ARRAY_POSITION',\n  'ARRAY_REMOVE',\n  'ARRAY_REPEAT',\n  'ARRAY_UNION',\n  'ARRAYS_OVERLAP',\n  'ARRAYS_ZIP',\n  'FLATTEN',\n  'SEQUENCE',\n  'SHUFFLE',\n  'SLICE',\n  'SORT_ARRAY',\n\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#map-functions\n  'ELEMENT_AT',\n  'ELEMENT_AT',\n  'MAP_CONCAT',\n  'MAP_ENTRIES',\n  'MAP_FROM_ARRAYS',\n  'MAP_FROM_ENTRIES',\n  'MAP_KEYS',\n  'MAP_VALUES',\n  'STR_TO_MAP',\n\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#date-and-timestamp-functions\n  'ADD_MONTHS',\n  'CURRENT_DATE',\n  'CURRENT_DATE',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'DATE_ADD',\n  'DATE_FORMAT',\n  'DATE_FROM_UNIX_DATE',\n  'DATE_PART',\n  'DATE_SUB',\n  'DATE_TRUNC',\n  'DATEDIFF',\n  'DAY',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'EXTRACT',\n  'FROM_UNIXTIME',\n  'FROM_UTC_TIMESTAMP',\n  'HOUR',\n  'LAST_DAY',\n  'MAKE_DATE',\n  'MAKE_DT_INTERVAL',\n  'MAKE_INTERVAL',\n  'MAKE_TIMESTAMP',\n  'MAKE_YM_INTERVAL',\n  'MINUTE',\n  'MONTH',\n  'MONTHS_BETWEEN',\n  'NEXT_DAY',\n  'NOW',\n  'QUARTER',\n  'SECOND',\n  'SESSION_WINDOW',\n  'TIMESTAMP_MICROS',\n  'TIMESTAMP_MILLIS',\n  'TIMESTAMP_SECONDS',\n  'TO_DATE',\n  'TO_TIMESTAMP',\n  'TO_UNIX_TIMESTAMP',\n  'TO_UTC_TIMESTAMP',\n  'TRUNC',\n  'UNIX_DATE',\n  'UNIX_MICROS',\n  'UNIX_MILLIS',\n  'UNIX_SECONDS',\n  'UNIX_TIMESTAMP',\n  'WEEKDAY',\n  'WEEKOFYEAR',\n  'WINDOW',\n  'YEAR',\n\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#json-functions\n  'FROM_JSON',\n  'GET_JSON_OBJECT',\n  'JSON_ARRAY_LENGTH',\n  'JSON_OBJECT_KEYS',\n  'JSON_TUPLE',\n  'SCHEMA_OF_JSON',\n  'TO_JSON',\n\n  // http://spark.apache.org/docs/latest/api/sql/index.html\n  'ABS',\n  'ACOS',\n  'ACOSH',\n  'AGGREGATE',\n  'ARRAY_SORT',\n  'ASCII',\n  'ASIN',\n  'ASINH',\n  'ASSERT_TRUE',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'BASE64',\n  'BIN',\n  'BIT_COUNT',\n  'BIT_GET',\n  'BIT_LENGTH',\n  'BROUND',\n  'BTRIM',\n  'CARDINALITY',\n  'CBRT',\n  'CEIL',\n  'CEILING',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'CHR',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONV',\n  'COS',\n  'COSH',\n  'COT',\n  'CRC32',\n  'CURRENT_CATALOG',\n  'CURRENT_DATABASE',\n  'CURRENT_USER',\n  'DEGREES',\n  // 'E',\n  'ELT',\n  'EXP',\n  'EXPM1',\n  'FACTORIAL',\n  'FIND_IN_SET',\n  'FLOOR',\n  'FORALL',\n  'FORMAT_NUMBER',\n  'FORMAT_STRING',\n  'FROM_CSV',\n  'GETBIT',\n  'HASH',\n  'HEX',\n  'HYPOT',\n  'INITCAP',\n  'INLINE',\n  'INLINE_OUTER',\n  'INPUT_FILE_BLOCK_LENGTH',\n  'INPUT_FILE_BLOCK_START',\n  'INPUT_FILE_NAME',\n  'INSTR',\n  'ISNAN',\n  'ISNOTNULL',\n  'ISNULL',\n  'JAVA_METHOD',\n  'LCASE',\n  'LEFT',\n  'LENGTH',\n  'LEVENSHTEIN',\n  'LN',\n  'LOCATE',\n  'LOG',\n  'LOG10',\n  'LOG1P',\n  'LOG2',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MAP_FILTER',\n  'MAP_ZIP_WITH',\n  'MD5',\n  'MOD',\n  'MONOTONICALLY_INCREASING_ID',\n  'NAMED_STRUCT',\n  'NANVL',\n  'NEGATIVE',\n  'NVL',\n  'NVL2',\n  'OCTET_LENGTH',\n  'OVERLAY',\n  'PARSE_URL',\n  'PI',\n  'PMOD',\n  'POSEXPLODE',\n  'POSEXPLODE_OUTER',\n  'POSITION',\n  'POSITIVE',\n  'POW',\n  'POWER',\n  'PRINTF',\n  'RADIANS',\n  'RAISE_ERROR',\n  'RAND',\n  'RANDN',\n  'RANDOM',\n  'REFLECT',\n  'REGEXP_EXTRACT',\n  'REGEXP_EXTRACT_ALL',\n  'REGEXP_LIKE',\n  'REGEXP_REPLACE',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RIGHT',\n  'RINT',\n  'ROUND',\n  'RPAD',\n  'RTRIM',\n  'SCHEMA_OF_CSV',\n  'SENTENCES',\n  'SHA',\n  'SHA1',\n  'SHA2',\n  'SHIFTLEFT',\n  'SHIFTRIGHT',\n  'SHIFTRIGHTUNSIGNED',\n  'SIGN',\n  'SIGNUM',\n  'SIN',\n  'SINH',\n  'SOUNDEX',\n  'SPACE',\n  'SPARK_PARTITION_ID',\n  'SPLIT',\n  'SQRT',\n  'STACK',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUBSTRING_INDEX',\n  'TAN',\n  'TANH',\n  'TO_CSV',\n  'TRANSFORM_KEYS',\n  'TRANSFORM_VALUES',\n  'TRANSLATE',\n  'TRIM',\n  'TRY_ADD',\n  'TRY_DIVIDE',\n  'TYPEOF',\n  'UCASE',\n  'UNBASE64',\n  'UNHEX',\n  'UPPER',\n  'UUID',\n  'VERSION',\n  'WIDTH_BUCKET',\n  'XPATH',\n  'XPATH_BOOLEAN',\n  'XPATH_DOUBLE',\n  'XPATH_FLOAT',\n  'XPATH_INT',\n  'XPATH_LONG',\n  'XPATH_NUMBER',\n  'XPATH_SHORT',\n  'XPATH_STRING',\n  'XXHASH64',\n  'ZIP_WITH',\n\n  // cast\n  'CAST',\n\n  // Shorthand functions to use in place of CASE expression\n  'COALESCE',\n  'NULLIF',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { EOF_TOKEN, isToken, Token, TokenType } from '../../lexer/token.js';\nimport { dataTypes, keywords } from './spark.keywords.js';\nimport { functions } from './spark.functions.js';\n\n// http://spark.apache.org/docs/latest/sql-ref-syntax.html\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'SORT BY',\n  'CLUSTER BY',\n  'DISTRIBUTE BY',\n  'LIMIT',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | OVERWRITE] [TABLE]',\n  'VALUES',\n  // - insert overwrite directory:\n  //   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-insert-overwrite-directory.html\n  'INSERT OVERWRITE [LOCAL] DIRECTORY',\n  // - load:\n  //   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-load.html\n  'LOAD DATA [LOCAL] INPATH',\n  '[OVERWRITE] INTO TABLE',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [EXTERNAL] TABLE [IF NOT EXISTS]']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD COLUMNS',\n  'DROP {COLUMN | COLUMNS}',\n  'RENAME TO',\n  'RENAME COLUMN',\n  'ALTER COLUMN',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // other\n  'LATERAL VIEW',\n  'ALTER DATABASE',\n  'ALTER VIEW',\n  'CREATE DATABASE',\n  'CREATE FUNCTION',\n  'DROP DATABASE',\n  'DROP FUNCTION',\n  'DROP VIEW',\n  'REPAIR TABLE',\n  'USE DATABASE',\n  // Data Retrieval\n  'TABLESAMPLE',\n  'PIVOT',\n  'TRANSFORM',\n  'EXPLAIN',\n  // Auxiliary\n  'ADD FILE',\n  'ADD JAR',\n  'ANALYZE TABLE',\n  'CACHE TABLE',\n  'CLEAR CACHE',\n  'DESCRIBE DATABASE',\n  'DESCRIBE FUNCTION',\n  'DESCRIBE QUERY',\n  'DESCRIBE TABLE',\n  'LIST FILE',\n  'LIST JAR',\n  'REFRESH',\n  'REFRESH TABLE',\n  'REFRESH FUNCTION',\n  'RESET',\n  'SHOW COLUMNS',\n  'SHOW CREATE TABLE',\n  'SHOW DATABASES',\n  'SHOW FUNCTIONS',\n  'SHOW PARTITIONS',\n  'SHOW TABLE EXTENDED',\n  'SHOW TABLES',\n  'SHOW TBLPROPERTIES',\n  'SHOW VIEWS',\n  'UNCACHE TABLE',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard-joins\n  '[LEFT] {ANTI | SEMI} JOIN',\n  'NATURAL [LEFT] {ANTI | SEMI} JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON DELETE',\n  'ON UPDATE',\n  'CURRENT ROW',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\n// http://spark.apache.org/docs/latest/sql-programming-guide.html\nexport const spark: DialectOptions = {\n  name: 'spark',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    extraParens: ['[]'],\n    stringTypes: [\n      \"''-bs\",\n      '\"\"-bs',\n      { quote: \"''-raw\", prefixes: ['R', 'X'], requirePrefix: true },\n      { quote: '\"\"-raw', prefixes: ['R', 'X'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    variableTypes: [{ quote: '{}', prefixes: ['$'], requirePrefix: true }],\n    operators: ['%', '~', '^', '|', '&', '<=>', '==', '!', '||', '->'],\n    postProcess,\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n\nfunction postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const prevToken = tokens[i - 1] || EOF_TOKEN;\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n\n    // [WINDOW](...)\n    if (isToken.WINDOW(token) && nextToken.type === TokenType.OPEN_PAREN) {\n      // This is a function call, treat it as a reserved function name\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n\n    // TODO: deprecate this once ITEMS is merged with COLLECTION\n    if (token.text === 'ITEMS' && token.type === TokenType.RESERVED_KEYWORD) {\n      if (!(prevToken.text === 'COLLECTION' && nextToken.text === 'TERMINATED')) {\n        // this is a word and not COLLECTION ITEMS\n        return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n      }\n    }\n\n    return token;\n  });\n}\n","export const functions: string[] = [\n  // https://www.sqlite.org/lang_corefunc.html\n  'ABS',\n  'CHANGES',\n  'CHAR',\n  'COALESCE',\n  'FORMAT',\n  'GLOB',\n  'HEX',\n  'IFNULL',\n  'IIF',\n  'INSTR',\n  'LAST_INSERT_ROWID',\n  'LENGTH',\n  'LIKE',\n  'LIKELIHOOD',\n  'LIKELY',\n  'LOAD_EXTENSION',\n  'LOWER',\n  'LTRIM',\n  'NULLIF',\n  'PRINTF',\n  'QUOTE',\n  'RANDOM',\n  'RANDOMBLOB',\n  'REPLACE',\n  'ROUND',\n  'RTRIM',\n  'SIGN',\n  'SOUNDEX',\n  'SQLITE_COMPILEOPTION_GET',\n  'SQLITE_COMPILEOPTION_USED',\n  'SQLITE_OFFSET',\n  'SQLITE_SOURCE_ID',\n  'SQLITE_VERSION',\n  'SUBSTR',\n  'SUBSTRING',\n  'TOTAL_CHANGES',\n  'TRIM',\n  'TYPEOF',\n  'UNICODE',\n  'UNLIKELY',\n  'UPPER',\n  'ZEROBLOB',\n\n  // https://www.sqlite.org/lang_aggfunc.html\n  'AVG',\n  'COUNT',\n  'GROUP_CONCAT',\n  'MAX',\n  'MIN',\n  'SUM',\n  'TOTAL',\n\n  // https://www.sqlite.org/lang_datefunc.html\n  'DATE',\n  'TIME',\n  'DATETIME',\n  'JULIANDAY',\n  'UNIXEPOCH',\n  'STRFTIME',\n\n  // https://www.sqlite.org/windowfunctions.html#biwinfunc\n  'row_number',\n  'rank',\n  'dense_rank',\n  'percent_rank',\n  'cume_dist',\n  'ntile',\n  'lag',\n  'lead',\n  'first_value',\n  'last_value',\n  'nth_value',\n\n  // https://www.sqlite.org/lang_mathfunc.html\n  'ACOS',\n  'ACOSH',\n  'ASIN',\n  'ASINH',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'CEIL',\n  'CEILING',\n  'COS',\n  'COSH',\n  'DEGREES',\n  'EXP',\n  'FLOOR',\n  'LN',\n  'LOG',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'MOD',\n  'PI',\n  'POW',\n  'POWER',\n  'RADIANS',\n  'SIN',\n  'SINH',\n  'SQRT',\n  'TAN',\n  'TANH',\n  'TRUNC',\n\n  // https://www.sqlite.org/json1.html\n  'JSON',\n  'JSON_ARRAY',\n  'JSON_ARRAY_LENGTH',\n  'JSON_ARRAY_LENGTH',\n  'JSON_EXTRACT',\n  'JSON_INSERT',\n  'JSON_OBJECT',\n  'JSON_PATCH',\n  'JSON_REMOVE',\n  'JSON_REPLACE',\n  'JSON_SET',\n  'JSON_TYPE',\n  'JSON_TYPE',\n  'JSON_VALID',\n  'JSON_QUOTE',\n  'JSON_GROUP_ARRAY',\n  'JSON_GROUP_OBJECT',\n  'JSON_EACH',\n  'JSON_TREE',\n\n  // cast\n  'CAST',\n];\n","export const keywords: string[] = [\n  // https://www.sqlite.org/lang_keywords.html\n  // Note: The keywords listed on that URL are not all reserved keywords.\n  // We'll need to clean up this list to only include reserved keywords.\n  'ABORT',\n  'ACTION',\n  'ADD',\n  'AFTER',\n  'ALL',\n  'ALTER',\n  'AND',\n  'ARE',\n  'ALWAYS',\n  'ANALYZE',\n  'AS',\n  'ASC',\n  'ATTACH',\n  'AUTOINCREMENT',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BY',\n  'CASCADE',\n  'CASE',\n  'CAST',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'COMMIT',\n  'CONFLICT',\n  'CONSTRAINT',\n  'CREATE',\n  'CROSS',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'DATABASE',\n  'DEFAULT',\n  'DEFERRABLE',\n  'DEFERRED',\n  'DELETE',\n  'DESC',\n  'DETACH',\n  'DISTINCT',\n  'DO',\n  'DROP',\n  'EACH',\n  'ELSE',\n  'END',\n  'ESCAPE',\n  'EXCEPT',\n  'EXCLUDE',\n  'EXCLUSIVE',\n  'EXISTS',\n  'EXPLAIN',\n  'FAIL',\n  'FILTER',\n  'FIRST',\n  'FOLLOWING',\n  'FOR',\n  'FOREIGN',\n  'FROM',\n  'FULL',\n  'GENERATED',\n  'GLOB',\n  'GROUP',\n  'HAVING',\n  'IF',\n  'IGNORE',\n  'IMMEDIATE',\n  'IN',\n  'INDEX',\n  'INDEXED',\n  'INITIALLY',\n  'INNER',\n  'INSERT',\n  'INSTEAD',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ISNULL',\n  'JOIN',\n  'KEY',\n  'LAST',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'MATCH',\n  'MATERIALIZED',\n  'NATURAL',\n  'NO',\n  'NOT',\n  'NOTHING',\n  'NOTNULL',\n  'NULL',\n  'NULLS',\n  'OF',\n  'OFFSET',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'OR',\n  'ORDER',\n  'OTHERS',\n  'OUTER',\n  'OVER',\n  'PARTITION',\n  'PLAN',\n  'PRAGMA',\n  'PRECEDING',\n  'PRIMARY',\n  'QUERY',\n  'RAISE',\n  'RANGE',\n  'RECURSIVE',\n  'REFERENCES',\n  'REGEXP',\n  'REINDEX',\n  'RELEASE',\n  'RENAME',\n  'REPLACE',\n  'RESTRICT',\n  'RETURNING',\n  'RIGHT',\n  'ROLLBACK',\n  'ROW',\n  'ROWS',\n  'SAVEPOINT',\n  'SELECT',\n  'SET',\n  'TABLE',\n  'TEMP',\n  'TEMPORARY',\n  'THEN',\n  'TIES',\n  'TO',\n  'TRANSACTION',\n  'TRIGGER',\n  'UNBOUNDED',\n  'UNION',\n  'UNIQUE',\n  'UPDATE',\n  'USING',\n  'VACUUM',\n  'VALUES',\n  'VIEW',\n  'VIRTUAL',\n  'WHEN',\n  'WHERE',\n  'WINDOW',\n  'WITH',\n  'WITHOUT',\n];\n\nexport const dataTypes: string[] = [\n  // SQLite allows any word as a data type, e.g. CREATE TABLE foo (col1 madeupname(123));\n  // Here we just list some common ones as SQL Formatter\n  // is only able to detect a predefined list of data types.\n  // https://www.sqlite.org/stricttables.html\n  // https://www.sqlite.org/datatype3.html\n  'ANY',\n  'ARRAY',\n  'BLOB',\n  'CHARACTER',\n  'DECIMAL',\n  'INT',\n  'INTEGER',\n  'NATIVE CHARACTER',\n  'NCHAR',\n  'NUMERIC',\n  'NVARCHAR',\n  'REAL',\n  'TEXT',\n  'VARCHAR',\n  'VARYING CHARACTER',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './sqlite.functions.js';\nimport { dataTypes, keywords } from './sqlite.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO',\n  'REPLACE INTO',\n  'VALUES',\n  // - update:\n  'SET',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]',\n  // - insert:\n  'ON CONFLICT',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [COLUMN]',\n  'RENAME TO',\n  // - set schema\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\n// joins - https://www.sqlite.org/syntax/join-operator.html\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n  '{ROWS | RANGE | GROUPS} BETWEEN',\n  'DO UPDATE',\n]);\n\nexport const sqlite: DialectOptions = {\n  name: 'sqlite',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    stringTypes: [\n      \"''-qq\",\n      { quote: \"''-raw\", prefixes: ['X'], requirePrefix: true },\n      // Depending on context SQLite also supports double-quotes for strings,\n      // and single-quotes for identifiers.\n    ],\n    identTypes: [`\"\"-qq`, '``', '[]'],\n    // https://www.sqlite.org/lang_expr.html#parameters\n    paramTypes: { positional: true, numbered: ['?'], named: [':', '@', '$'] },\n    operators: ['%', '~', '&', '|', '<<', '>>', '==', '->', '->>', '||'],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_9_set_function_specification\n  'GROUPING',\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_10_window_function\n  'RANK',\n  'DENSE_RANK',\n  'PERCENT_RANK',\n  'CUME_DIST',\n  'ROW_NUMBER',\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_27_numeric_value_function\n  'POSITION',\n  'OCCURRENCES_REGEX',\n  'POSITION_REGEX',\n  'EXTRACT',\n  'CHAR_LENGTH',\n  'CHARACTER_LENGTH',\n  'OCTET_LENGTH',\n  'CARDINALITY',\n  'ABS',\n  'MOD',\n  'LN',\n  'EXP',\n  'POWER',\n  'SQRT',\n  'FLOOR',\n  'CEIL',\n  'CEILING',\n  'WIDTH_BUCKET',\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_29_string_value_function\n  'SUBSTRING',\n  'SUBSTRING_REGEX',\n  'UPPER',\n  'LOWER',\n  'CONVERT',\n  'TRANSLATE',\n  'TRANSLATE_REGEX',\n  'TRIM',\n  'OVERLAY',\n  'NORMALIZE',\n  'SPECIFICTYPE',\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_31_datetime_value_function\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'LOCALTIME',\n  'CURRENT_TIMESTAMP',\n  'LOCALTIMESTAMP',\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_38_multiset_value_function\n  // SET serves multiple roles: a SET() function and a SET keyword e.g. in UPDATE table SET ...\n  // multiset\n  // 'SET', (disabled for now)\n\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_10_9_aggregate_function\n  'COUNT',\n  'AVG',\n  'MAX',\n  'MIN',\n  'SUM',\n  // 'EVERY',\n  // 'ANY',\n  // 'SOME',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'VAR_SAMP',\n  'VAR_POP',\n  'COLLECT',\n  'FUSION',\n  'INTERSECTION',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CORR',\n  'REGR_SLOPE',\n  'REGR_INTERCEPT',\n  'REGR_COUNT',\n  'REGR_R2',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_SXX',\n  'REGR_SYY',\n  'REGR_SXY',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n\n  // CAST is a pretty complex case, involving multiple forms:\n  // - CAST(col AS int)\n  // - CAST(...) WITH ...\n  // - CAST FROM int\n  // - CREATE CAST(mycol AS int) WITH ...\n  'CAST',\n\n  // Shorthand functions to use in place of CASE expression\n  'COALESCE',\n  'NULLIF',\n\n  // Non-standard functions that have widespread support\n  'ROUND',\n  'SIN',\n  'COS',\n  'TAN',\n  'ASIN',\n  'ACOS',\n  'ATAN',\n];\n","export const keywords: string[] = [\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#reserved-word\n  'ALL',\n  'ALLOCATE',\n  'ALTER',\n  'ANY', // <- moved over from functions\n  'ARE',\n  'AS',\n  'ASC', // Not reserved in SQL-2008, but commonly reserved in most dialects\n  'ASENSITIVE',\n  'ASYMMETRIC',\n  'AT',\n  'ATOMIC',\n  'AUTHORIZATION',\n  'BEGIN',\n  'BETWEEN',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CALLED',\n  'CASCADED',\n  'CAST',\n  'CHECK',\n  'CLOSE',\n  'COALESCE',\n  'COLLATE',\n  'COLUMN',\n  'COMMIT',\n  'CONDITION',\n  'CONNECT',\n  'CONSTRAINT',\n  'CORRESPONDING',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'CURRENT_CATALOG',\n  'CURRENT_DEFAULT_TRANSFORM_GROUP',\n  'CURRENT_PATH',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_TRANSFORM_GROUP_FOR_TYPE',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DEALLOCATE',\n  'DAY',\n  'DECLARE',\n  'DEFAULT',\n  'DELETE',\n  'DEREF',\n  'DESC', // Not reserved in SQL-2008, but commonly reserved in most dialects\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISCONNECT',\n  'DISTINCT',\n  'DROP',\n  'DYNAMIC',\n  'EACH',\n  'ELEMENT',\n  'END-EXEC',\n  'ESCAPE',\n  'EVERY', // <- moved over from functions\n  'EXCEPT',\n  'EXEC',\n  'EXECUTE',\n  'EXISTS',\n  'EXTERNAL',\n  'FALSE',\n  'FETCH',\n  'FILTER',\n  'FOR',\n  'FOREIGN',\n  'FREE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'GET',\n  'GLOBAL',\n  'GRANT',\n  'GROUP',\n  'HAVING',\n  'HOLD',\n  'HOUR',\n  'IDENTITY',\n  'IN',\n  'INDICATOR',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'LANGUAGE',\n  'LARGE',\n  'LATERAL',\n  'LEADING',\n  'LEFT',\n  'LIKE',\n  'LIKE_REGEX',\n  'LOCAL',\n  'MATCH',\n  'MEMBER',\n  'MERGE',\n  'METHOD',\n  'MINUTE',\n  'MODIFIES',\n  'MODULE',\n  'MONTH',\n  'NATURAL',\n  'NEW',\n  'NO',\n  'NONE',\n  'NOT',\n  'NULL',\n  'NULLIF',\n  'OF',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERLAPS',\n  'PARAMETER',\n  'PARTITION',\n  'PRECISION',\n  'PREPARE',\n  'PRIMARY',\n  'PROCEDURE',\n  'RANGE',\n  'READS',\n  'REAL',\n  'RECURSIVE',\n  'REF',\n  'REFERENCES',\n  'REFERENCING',\n  'RELEASE',\n  'RESULT',\n  'RETURN',\n  'RETURNS',\n  'REVOKE',\n  'RIGHT',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROW',\n  'ROWS',\n  'SAVEPOINT',\n  'SCOPE',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SESSION_USER',\n  'SET',\n  'SIMILAR',\n  'SOME', // <- moved over from functions\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'START',\n  'STATIC',\n  'SUBMULTISET',\n  'SYMMETRIC',\n  'SYSTEM',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESAMPLE',\n  'THEN',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TO',\n  'TRAILING',\n  'TRANSLATION',\n  'TREAT',\n  'TRIGGER',\n  'TRUE',\n  'UESCAPE',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNNEST',\n  'UPDATE',\n  'USER',\n  'USING',\n  'VALUE',\n  'VALUES',\n  'WHENEVER',\n  'WINDOW',\n  'WITHIN',\n  'WITHOUT',\n  'YEAR',\n];\n\nexport const dataTypes: string[] = [\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_1_data_type\n  'ARRAY',\n  'BIGINT',\n  'BINARY LARGE OBJECT',\n  'BINARY VARYING',\n  'BINARY',\n  'BLOB',\n  'BOOLEAN',\n  'CHAR LARGE OBJECT',\n  'CHAR VARYING',\n  'CHAR',\n  'CHARACTER LARGE OBJECT',\n  'CHARACTER VARYING',\n  'CHARACTER',\n  'CLOB',\n  'DATE',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE',\n  'FLOAT',\n  'INT',\n  'INTEGER',\n  'INTERVAL',\n  'MULTISET',\n  'NATIONAL CHAR VARYING',\n  'NATIONAL CHAR',\n  'NATIONAL CHARACTER LARGE OBJECT',\n  'NATIONAL CHARACTER VARYING',\n  'NATIONAL CHARACTER',\n  'NCHAR LARGE OBJECT',\n  'NCHAR VARYING',\n  'NCHAR',\n  'NCLOB',\n  'NUMERIC',\n  'SMALLINT',\n  'TIME',\n  'TIMESTAMP',\n  'VARBINARY',\n  'VARCHAR',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './sql.functions.js';\nimport { dataTypes, keywords } from './sql.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [RECURSIVE] VIEW',\n  // - update:\n  'UPDATE',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD COLUMN',\n  'DROP [COLUMN]',\n  'RENAME COLUMN',\n  'RENAME TO',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  'ADD SCOPE', // for alter column\n  'DROP SCOPE {CASCADE | RESTRICT}', // for alter column\n  'RESTART WITH', // for alter column\n  // - truncate:\n  'TRUNCATE TABLE',\n  // other\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\nexport const sql: DialectOptions = {\n  name: 'sql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    stringTypes: [\n      { quote: \"''-qq-bs\", prefixes: ['N', 'U&'] },\n      { quote: \"''-raw\", prefixes: ['X'], requirePrefix: true },\n    ],\n    identTypes: [`\"\"-qq`, '``'],\n    paramTypes: { positional: true },\n    operators: ['||'],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://github.com/trinodb/trino/tree/432d2897bdef99388c1a47188743a061c4ac1f34/docs/src/main/sphinx/functions\n  // rg '^\\.\\. function::' ./docs/src/main/sphinx/functions | cut -d' ' -f 3 | cut -d '(' -f 1 | sort | uniq\n  // rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep    '\\* :func:' | cut -d'`' -f 2\n  // rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep -v '\\* :func:'\n  // grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep  -e '^- :func:' | cut -d'`' -f2\n  // grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep -ve '^- :func:'\n  'ABS',\n  'ACOS',\n  'ALL_MATCH',\n  'ANY_MATCH',\n  'APPROX_DISTINCT',\n  'APPROX_MOST_FREQUENT',\n  'APPROX_PERCENTILE',\n  'APPROX_SET',\n  'ARBITRARY',\n  'ARRAYS_OVERLAP',\n  'ARRAY_AGG',\n  'ARRAY_DISTINCT',\n  'ARRAY_EXCEPT',\n  'ARRAY_INTERSECT',\n  'ARRAY_JOIN',\n  'ARRAY_MAX',\n  'ARRAY_MIN',\n  'ARRAY_POSITION',\n  'ARRAY_REMOVE',\n  'ARRAY_SORT',\n  'ARRAY_UNION',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'AT_TIMEZONE',\n  'AVG',\n  'BAR',\n  'BETA_CDF',\n  'BING_TILE',\n  'BING_TILES_AROUND',\n  'BING_TILE_AT',\n  'BING_TILE_COORDINATES',\n  'BING_TILE_POLYGON',\n  'BING_TILE_QUADKEY',\n  'BING_TILE_ZOOM_LEVEL',\n  'BITWISE_AND',\n  'BITWISE_AND_AGG',\n  'BITWISE_LEFT_SHIFT',\n  'BITWISE_NOT',\n  'BITWISE_OR',\n  'BITWISE_OR_AGG',\n  'BITWISE_RIGHT_SHIFT',\n  'BITWISE_RIGHT_SHIFT_ARITHMETIC',\n  'BITWISE_XOR',\n  'BIT_COUNT',\n  'BOOL_AND',\n  'BOOL_OR',\n  'CARDINALITY',\n  'CAST',\n  'CBRT',\n  'CEIL',\n  'CEILING',\n  'CHAR2HEXINT',\n  'CHECKSUM',\n  'CHR',\n  'CLASSIFY',\n  'COALESCE',\n  'CODEPOINT',\n  'COLOR',\n  'COMBINATIONS',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONTAINS',\n  'CONTAINS_SEQUENCE',\n  'CONVEX_HULL_AGG',\n  'CORR',\n  'COS',\n  'COSH',\n  'COSINE_SIMILARITY',\n  'COUNT',\n  'COUNT_IF',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CRC32',\n  'CUME_DIST',\n  'CURRENT_CATALOG',\n  'CURRENT_DATE',\n  'CURRENT_GROUPS',\n  'CURRENT_SCHEMA',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'CURRENT_USER',\n  'DATE',\n  'DATE_ADD',\n  'DATE_DIFF',\n  'DATE_FORMAT',\n  'DATE_PARSE',\n  'DATE_TRUNC',\n  'DAY',\n  'DAY_OF_MONTH',\n  'DAY_OF_WEEK',\n  'DAY_OF_YEAR',\n  'DEGREES',\n  'DENSE_RANK',\n  'DOW',\n  'DOY',\n  'E',\n  'ELEMENT_AT',\n  'EMPTY_APPROX_SET',\n  'EVALUATE_CLASSIFIER_PREDICTIONS',\n  'EVERY',\n  'EXP',\n  'EXTRACT',\n  'FEATURES',\n  'FILTER',\n  'FIRST_VALUE',\n  'FLATTEN',\n  'FLOOR',\n  'FORMAT',\n  'FORMAT_DATETIME',\n  'FORMAT_NUMBER',\n  'FROM_BASE',\n  'FROM_BASE32',\n  'FROM_BASE64',\n  'FROM_BASE64URL',\n  'FROM_BIG_ENDIAN_32',\n  'FROM_BIG_ENDIAN_64',\n  'FROM_ENCODED_POLYLINE',\n  'FROM_GEOJSON_GEOMETRY',\n  'FROM_HEX',\n  'FROM_IEEE754_32',\n  'FROM_IEEE754_64',\n  'FROM_ISO8601_DATE',\n  'FROM_ISO8601_TIMESTAMP',\n  'FROM_ISO8601_TIMESTAMP_NANOS',\n  'FROM_UNIXTIME',\n  'FROM_UNIXTIME_NANOS',\n  'FROM_UTF8',\n  'GEOMETRIC_MEAN',\n  'GEOMETRY_FROM_HADOOP_SHAPE',\n  'GEOMETRY_INVALID_REASON',\n  'GEOMETRY_NEAREST_POINTS',\n  'GEOMETRY_TO_BING_TILES',\n  'GEOMETRY_UNION',\n  'GEOMETRY_UNION_AGG',\n  'GREATEST',\n  'GREAT_CIRCLE_DISTANCE',\n  'HAMMING_DISTANCE',\n  'HASH_COUNTS',\n  'HISTOGRAM',\n  'HMAC_MD5',\n  'HMAC_SHA1',\n  'HMAC_SHA256',\n  'HMAC_SHA512',\n  'HOUR',\n  'HUMAN_READABLE_SECONDS',\n  'IF',\n  'INDEX',\n  'INFINITY',\n  'INTERSECTION_CARDINALITY',\n  'INVERSE_BETA_CDF',\n  'INVERSE_NORMAL_CDF',\n  'IS_FINITE',\n  'IS_INFINITE',\n  'IS_JSON_SCALAR',\n  'IS_NAN',\n  'JACCARD_INDEX',\n  'JSON_ARRAY_CONTAINS',\n  'JSON_ARRAY_GET',\n  'JSON_ARRAY_LENGTH',\n  'JSON_EXISTS',\n  'JSON_EXTRACT',\n  'JSON_EXTRACT_SCALAR',\n  'JSON_FORMAT',\n  'JSON_PARSE',\n  'JSON_QUERY',\n  'JSON_SIZE',\n  'JSON_VALUE',\n  'KURTOSIS',\n  'LAG',\n  'LAST_DAY_OF_MONTH',\n  'LAST_VALUE',\n  'LEAD',\n  'LEARN_CLASSIFIER',\n  'LEARN_LIBSVM_CLASSIFIER',\n  'LEARN_LIBSVM_REGRESSOR',\n  'LEARN_REGRESSOR',\n  'LEAST',\n  'LENGTH',\n  'LEVENSHTEIN_DISTANCE',\n  'LINE_INTERPOLATE_POINT',\n  'LINE_INTERPOLATE_POINTS',\n  'LINE_LOCATE_POINT',\n  'LISTAGG',\n  'LN',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'LUHN_CHECK',\n  'MAKE_SET_DIGEST',\n  'MAP',\n  'MAP_AGG',\n  'MAP_CONCAT',\n  'MAP_ENTRIES',\n  'MAP_FILTER',\n  'MAP_FROM_ENTRIES',\n  'MAP_KEYS',\n  'MAP_UNION',\n  'MAP_VALUES',\n  'MAP_ZIP_WITH',\n  'MAX',\n  'MAX_BY',\n  'MD5',\n  'MERGE',\n  'MERGE_SET_DIGEST',\n  'MILLISECOND',\n  'MIN',\n  'MINUTE',\n  'MIN_BY',\n  'MOD',\n  'MONTH',\n  'MULTIMAP_AGG',\n  'MULTIMAP_FROM_ENTRIES',\n  'MURMUR3',\n  'NAN',\n  'NGRAMS',\n  'NONE_MATCH',\n  'NORMALIZE',\n  'NORMAL_CDF',\n  'NOW',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLIF',\n  'NUMERIC_HISTOGRAM',\n  'OBJECTID',\n  'OBJECTID_TIMESTAMP',\n  'PARSE_DATA_SIZE',\n  'PARSE_DATETIME',\n  'PARSE_DURATION',\n  'PERCENT_RANK',\n  'PI',\n  'POSITION',\n  'POW',\n  'POWER',\n  'QDIGEST_AGG',\n  'QUARTER',\n  'RADIANS',\n  'RAND',\n  'RANDOM',\n  'RANK',\n  'REDUCE',\n  'REDUCE_AGG',\n  'REGEXP_COUNT',\n  'REGEXP_EXTRACT',\n  'REGEXP_EXTRACT_ALL',\n  'REGEXP_LIKE',\n  'REGEXP_POSITION',\n  'REGEXP_REPLACE',\n  'REGEXP_SPLIT',\n  'REGRESS',\n  'REGR_INTERCEPT',\n  'REGR_SLOPE',\n  'RENDER',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RGB',\n  'ROUND',\n  'ROW_NUMBER',\n  'RPAD',\n  'RTRIM',\n  'SECOND',\n  'SEQUENCE',\n  'SHA1',\n  'SHA256',\n  'SHA512',\n  'SHUFFLE',\n  'SIGN',\n  'SIMPLIFY_GEOMETRY',\n  'SIN',\n  'SKEWNESS',\n  'SLICE',\n  'SOUNDEX',\n  'SPATIAL_PARTITIONING',\n  'SPATIAL_PARTITIONS',\n  'SPLIT',\n  'SPLIT_PART',\n  'SPLIT_TO_MAP',\n  'SPLIT_TO_MULTIMAP',\n  'SPOOKY_HASH_V2_32',\n  'SPOOKY_HASH_V2_64',\n  'SQRT',\n  'STARTS_WITH',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STRPOS',\n  'ST_AREA',\n  'ST_ASBINARY',\n  'ST_ASTEXT',\n  'ST_BOUNDARY',\n  'ST_BUFFER',\n  'ST_CENTROID',\n  'ST_CONTAINS',\n  'ST_CONVEXHULL',\n  'ST_COORDDIM',\n  'ST_CROSSES',\n  'ST_DIFFERENCE',\n  'ST_DIMENSION',\n  'ST_DISJOINT',\n  'ST_DISTANCE',\n  'ST_ENDPOINT',\n  'ST_ENVELOPE',\n  'ST_ENVELOPEASPTS',\n  'ST_EQUALS',\n  'ST_EXTERIORRING',\n  'ST_GEOMETRIES',\n  'ST_GEOMETRYFROMTEXT',\n  'ST_GEOMETRYN',\n  'ST_GEOMETRYTYPE',\n  'ST_GEOMFROMBINARY',\n  'ST_INTERIORRINGN',\n  'ST_INTERIORRINGS',\n  'ST_INTERSECTION',\n  'ST_INTERSECTS',\n  'ST_ISCLOSED',\n  'ST_ISEMPTY',\n  'ST_ISRING',\n  'ST_ISSIMPLE',\n  'ST_ISVALID',\n  'ST_LENGTH',\n  'ST_LINEFROMTEXT',\n  'ST_LINESTRING',\n  'ST_MULTIPOINT',\n  'ST_NUMGEOMETRIES',\n  'ST_NUMINTERIORRING',\n  'ST_NUMPOINTS',\n  'ST_OVERLAPS',\n  'ST_POINT',\n  'ST_POINTN',\n  'ST_POINTS',\n  'ST_POLYGON',\n  'ST_RELATE',\n  'ST_STARTPOINT',\n  'ST_SYMDIFFERENCE',\n  'ST_TOUCHES',\n  'ST_UNION',\n  'ST_WITHIN',\n  'ST_X',\n  'ST_XMAX',\n  'ST_XMIN',\n  'ST_Y',\n  'ST_YMAX',\n  'ST_YMIN',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUM',\n  'TAN',\n  'TANH',\n  'TDIGEST_AGG',\n  'TIMESTAMP_OBJECTID',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TO_BASE',\n  'TO_BASE32',\n  'TO_BASE64',\n  'TO_BASE64URL',\n  'TO_BIG_ENDIAN_32',\n  'TO_BIG_ENDIAN_64',\n  'TO_CHAR',\n  'TO_DATE',\n  'TO_ENCODED_POLYLINE',\n  'TO_GEOJSON_GEOMETRY',\n  'TO_GEOMETRY',\n  'TO_HEX',\n  'TO_IEEE754_32',\n  'TO_IEEE754_64',\n  'TO_ISO8601',\n  'TO_MILLISECONDS',\n  'TO_SPHERICAL_GEOGRAPHY',\n  'TO_TIMESTAMP',\n  'TO_UNIXTIME',\n  'TO_UTF8',\n  'TRANSFORM',\n  'TRANSFORM_KEYS',\n  'TRANSFORM_VALUES',\n  'TRANSLATE',\n  'TRIM',\n  'TRIM_ARRAY',\n  'TRUNCATE',\n  'TRY',\n  'TRY_CAST',\n  'TYPEOF',\n  'UPPER',\n  'URL_DECODE',\n  'URL_ENCODE',\n  'URL_EXTRACT_FRAGMENT',\n  'URL_EXTRACT_HOST',\n  'URL_EXTRACT_PARAMETER',\n  'URL_EXTRACT_PATH',\n  'URL_EXTRACT_PORT',\n  'URL_EXTRACT_PROTOCOL',\n  'URL_EXTRACT_QUERY',\n  'UUID',\n  'VALUES_AT_QUANTILES',\n  'VALUE_AT_QUANTILE',\n  'VARIANCE',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VERSION',\n  'WEEK',\n  'WEEK_OF_YEAR',\n  'WIDTH_BUCKET',\n  'WILSON_INTERVAL_LOWER',\n  'WILSON_INTERVAL_UPPER',\n  'WITH_TIMEZONE',\n  'WORD_STEM',\n  'XXHASH64',\n  'YEAR',\n  'YEAR_OF_WEEK',\n  'YOW',\n  'ZIP',\n  'ZIP_WITH',\n\n  // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-recognition-expressions\n  'CLASSIFIER',\n  'FIRST',\n  'LAST',\n  'MATCH_NUMBER',\n  'NEXT',\n  'PERMUTE',\n  'PREV',\n];\n","export const keywords: string[] = [\n  // https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L858-L1128\n  'ABSENT',\n  'ADD',\n  'ADMIN',\n  'AFTER',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'ANY',\n  'AS',\n  'ASC',\n  'AT',\n  'AUTHORIZATION',\n  'BERNOULLI',\n  'BETWEEN',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CATALOGS',\n  'COLUMN',\n  'COLUMNS',\n  'COMMENT',\n  'COMMIT',\n  'COMMITTED',\n  'CONDITIONAL',\n  'CONSTRAINT',\n  'COPARTITION',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'CURRENT_PATH',\n  'CURRENT_ROLE',\n  'DATA',\n  'DEALLOCATE',\n  'DEFAULT',\n  'DEFINE',\n  'DEFINER',\n  'DELETE',\n  'DENY',\n  'DESC',\n  'DESCRIBE',\n  'DESCRIPTOR',\n  'DISTINCT',\n  'DISTRIBUTED',\n  'DOUBLE',\n  'DROP',\n  'ELSE',\n  'EMPTY',\n  'ENCODING',\n  'END',\n  'ERROR',\n  'ESCAPE',\n  'EXCEPT',\n  'EXCLUDING',\n  'EXECUTE',\n  'EXISTS',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FINAL',\n  'FIRST',\n  'FOLLOWING',\n  'FOR',\n  'FROM',\n  'FULL',\n  'FUNCTIONS',\n  'GRANT',\n  'GRANTED',\n  'GRANTS',\n  'GRAPHVIZ',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HAVING',\n  'IGNORE',\n  'IN',\n  'INCLUDING',\n  'INITIAL',\n  'INNER',\n  'INPUT',\n  'INSERT',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'INVOKER',\n  'IO',\n  'IS',\n  'ISOLATION',\n  'JOIN',\n  'JSON',\n  'JSON_ARRAY',\n  'JSON_OBJECT',\n  'KEEP',\n  'KEY',\n  'KEYS',\n  'LAST',\n  'LATERAL',\n  'LEADING',\n  'LEFT',\n  'LEVEL',\n  'LIKE',\n  'LIMIT',\n  'LOCAL',\n  'LOGICAL',\n  'MATCH',\n  'MATCHED',\n  'MATCHES',\n  'MATCH_RECOGNIZE',\n  'MATERIALIZED',\n  'MEASURES',\n  'NATURAL',\n  'NEXT',\n  'NFC',\n  'NFD',\n  'NFKC',\n  'NFKD',\n  'NO',\n  'NONE',\n  'NOT',\n  'NULL',\n  'NULLS',\n  'OBJECT',\n  'OF',\n  'OFFSET',\n  'OMIT',\n  'ON',\n  'ONE',\n  'ONLY',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'ORDINALITY',\n  'OUTER',\n  'OUTPUT',\n  'OVER',\n  'OVERFLOW',\n  'PARTITION',\n  'PARTITIONS',\n  'PASSING',\n  'PAST',\n  'PATH',\n  'PATTERN',\n  'PER',\n  'PERMUTE',\n  'PRECEDING',\n  'PRECISION',\n  'PREPARE',\n  'PRIVILEGES',\n  'PROPERTIES',\n  'PRUNE',\n  'QUOTES',\n  'RANGE',\n  'READ',\n  'RECURSIVE',\n  'REFRESH',\n  'RENAME',\n  'REPEATABLE',\n  'RESET',\n  'RESPECT',\n  'RESTRICT',\n  'RETURNING',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLES',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROW',\n  'ROWS',\n  'RUNNING',\n  'SCALAR',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECURITY',\n  'SEEK',\n  'SELECT',\n  'SERIALIZABLE',\n  'SESSION',\n  'SET',\n  'SETS',\n  'SHOW',\n  'SKIP',\n  'SOME',\n  'START',\n  'STATS',\n  'STRING',\n  'SUBSET',\n  'SYSTEM',\n  'TABLE',\n  'TABLES',\n  'TABLESAMPLE',\n  'TEXT',\n  'THEN',\n  'TIES',\n  'TIME',\n  'TIMESTAMP',\n  'TO',\n  'TRAILING',\n  'TRANSACTION',\n  'TRUE',\n  'TYPE',\n  'UESCAPE',\n  'UNBOUNDED',\n  'UNCOMMITTED',\n  'UNCONDITIONAL',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNMATCHED',\n  'UNNEST',\n  'UPDATE',\n  'USE',\n  'USER',\n  'USING',\n  'UTF16',\n  'UTF32',\n  'UTF8',\n  'VALIDATE',\n  'VALUE',\n  'VALUES',\n  'VERBOSE',\n  'VIEW',\n  'WHEN',\n  'WHERE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'WORK',\n  'WRAPPER',\n  'WRITE',\n  'ZONE',\n];\n\nexport const dataTypes: string[] = [\n  // https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-main/src/main/java/io/trino/metadata/TypeRegistry.java#L131-L168\n  // or https://trino.io/docs/current/language/types.html\n  'BIGINT',\n  'INT',\n  'INTEGER',\n  'SMALLINT',\n  'TINYINT',\n  'BOOLEAN',\n  'DATE',\n  'DECIMAL',\n  'REAL',\n  'DOUBLE',\n  'HYPERLOGLOG',\n  'QDIGEST',\n  'TDIGEST',\n  'P4HYPERLOGLOG',\n  'INTERVAL',\n  'TIMESTAMP',\n  'TIME',\n  'VARBINARY',\n  'VARCHAR',\n  'CHAR',\n  'ROW',\n  'ARRAY',\n  'MAP',\n  'JSON',\n  'JSON2016',\n  'IPADDRESS',\n  'GEOMETRY',\n  'UUID',\n  'SETDIGEST',\n  'JONIREGEXP',\n  'RE2JREGEXP',\n  'LIKEPATTERN',\n  'COLOR',\n  'CODEPOINTS',\n  'FUNCTION',\n  'JSONPATH',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './trino.functions.js';\nimport { dataTypes, keywords } from './trino.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L41\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'SET',\n  // MATCH_RECOGNIZE\n  'MATCH_RECOGNIZE',\n  'MEASURES',\n  'ONE ROW PER MATCH',\n  'ALL ROWS PER MATCH',\n  'AFTER MATCH',\n  'PATTERN',\n  'SUBSET',\n  'DEFINE',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE TABLE [IF NOT EXISTS]']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [MATERIALIZED] VIEW',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS]',\n  'ADD COLUMN [IF NOT EXISTS]',\n  'DROP COLUMN [IF EXISTS]',\n  'RENAME COLUMN [IF EXISTS]',\n  'RENAME TO',\n  'SET AUTHORIZATION [USER | ROLE]',\n  'SET PROPERTIES',\n  'EXECUTE',\n  // - truncate:\n  'TRUNCATE TABLE',\n\n  // other\n  'ALTER SCHEMA',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER VIEW',\n  'CREATE SCHEMA',\n  'CREATE ROLE',\n  'DROP SCHEMA',\n  'DROP MATERIALIZED VIEW',\n  'DROP VIEW',\n  'DROP ROLE',\n  // Auxiliary\n  'EXPLAIN',\n  'ANALYZE',\n  'EXPLAIN ANALYZE',\n  'EXPLAIN ANALYZE VERBOSE',\n  'USE',\n\n  'DESCRIBE INPUT',\n  'DESCRIBE OUTPUT',\n\n  'REFRESH MATERIALIZED VIEW',\n  'RESET SESSION',\n  'SET SESSION',\n  'SET PATH',\n  'SET TIME ZONE',\n\n  'SHOW GRANTS',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE SCHEMA',\n  'SHOW CREATE VIEW',\n  'SHOW CREATE MATERIALIZED VIEW',\n  'SHOW TABLES',\n  'SHOW SCHEMAS',\n  'SHOW CATALOGS',\n  'SHOW COLUMNS',\n  'SHOW STATS FOR',\n  'SHOW ROLES',\n  'SHOW CURRENT ROLES',\n  'SHOW ROLE GRANTS',\n  'SHOW FUNCTIONS',\n  'SHOW SESSION',\n]);\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L231-L235\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L288-L291\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L299-L313\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  '{ROWS | RANGE | GROUPS} BETWEEN',\n  // comparison operator\n  'IS [NOT] DISTINCT FROM',\n]);\n\nexport const trino: DialectOptions = {\n  name: 'trino',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // Trino also supports {- ... -} parenthesis.\n    // The formatting of these currently works out as a result of { and -\n    // not getting a space added in-between.\n    // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-syntax\n    extraParens: ['[]', '{}'],\n    // https://trino.io/docs/current/language/types.html#string\n    // https://trino.io/docs/current/language/types.html#varbinary\n    stringTypes: [\n      { quote: \"''-qq\", prefixes: ['U&'] },\n      { quote: \"''-raw\", prefixes: ['X'], requirePrefix: true },\n    ],\n    // https://trino.io/docs/current/language/reserved.html\n    identTypes: ['\"\"-qq'],\n    paramTypes: { positional: true },\n    operators: [\n      '%',\n      '->',\n      '=>',\n      ':',\n      '||',\n      // Row pattern syntax\n      '|',\n      '^',\n      '$',\n      // '?', conflicts with positional placeholders\n    ],\n  },\n  formatOptions: {\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://docs.microsoft.com/en-us/sql/t-sql/functions/functions?view=sql-server-ver15\n  // aggregate\n  'APPROX_COUNT_DISTINCT',\n  'AVG',\n  'CHECKSUM_AGG',\n  'COUNT',\n  'COUNT_BIG',\n  'GROUPING',\n  'GROUPING_ID',\n  'MAX',\n  'MIN',\n  'STDEV',\n  'STDEVP',\n  'SUM',\n  'VAR',\n  'VARP',\n\n  // analytic\n  'CUME_DIST',\n  'FIRST_VALUE',\n  'LAG',\n  'LAST_VALUE',\n  'LEAD',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERCENT_RANK',\n  'Collation - COLLATIONPROPERTY',\n  'Collation - TERTIARY_WEIGHTS',\n\n  // configuration\n  '@@DBTS',\n  '@@LANGID',\n  '@@LANGUAGE',\n  '@@LOCK_TIMEOUT',\n  '@@MAX_CONNECTIONS',\n  '@@MAX_PRECISION',\n  '@@NESTLEVEL',\n  '@@OPTIONS',\n  '@@REMSERVER',\n  '@@SERVERNAME',\n  '@@SERVICENAME',\n  '@@SPID',\n  '@@TEXTSIZE',\n  '@@VERSION',\n\n  // conversion\n  'CAST',\n  'CONVERT',\n  'PARSE',\n  'TRY_CAST',\n  'TRY_CONVERT',\n  'TRY_PARSE',\n\n  // cryptographic\n  'ASYMKEY_ID',\n  'ASYMKEYPROPERTY',\n  'CERTPROPERTY',\n  'CERT_ID',\n  'CRYPT_GEN_RANDOM',\n  'DECRYPTBYASYMKEY',\n  'DECRYPTBYCERT',\n  'DECRYPTBYKEY',\n  'DECRYPTBYKEYAUTOASYMKEY',\n  'DECRYPTBYKEYAUTOCERT',\n  'DECRYPTBYPASSPHRASE',\n  'ENCRYPTBYASYMKEY',\n  'ENCRYPTBYCERT',\n  'ENCRYPTBYKEY',\n  'ENCRYPTBYPASSPHRASE',\n  'HASHBYTES',\n  'IS_OBJECTSIGNED',\n  'KEY_GUID',\n  'KEY_ID',\n  'KEY_NAME',\n  'SIGNBYASYMKEY',\n  'SIGNBYCERT',\n  'SYMKEYPROPERTY',\n  'VERIFYSIGNEDBYCERT',\n  'VERIFYSIGNEDBYASYMKEY',\n\n  // cursor\n  '@@CURSOR_ROWS',\n  '@@FETCH_STATUS',\n  'CURSOR_STATUS',\n\n  // dataType\n  'DATALENGTH',\n  'IDENT_CURRENT',\n  'IDENT_INCR',\n  'IDENT_SEED',\n  'IDENTITY',\n  'SQL_VARIANT_PROPERTY',\n\n  // datetime\n  '@@DATEFIRST',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'CURRENT_TIMEZONE_ID',\n  'DATEADD',\n  'DATEDIFF',\n  'DATEDIFF_BIG',\n  'DATEFROMPARTS',\n  'DATENAME',\n  'DATEPART',\n  'DATETIME2FROMPARTS',\n  'DATETIMEFROMPARTS',\n  'DATETIMEOFFSETFROMPARTS',\n  'DAY',\n  'EOMONTH',\n  'GETDATE',\n  'GETUTCDATE',\n  'ISDATE',\n  'MONTH',\n  'SMALLDATETIMEFROMPARTS',\n  'SWITCHOFFSET',\n  'SYSDATETIME',\n  'SYSDATETIMEOFFSET',\n  'SYSUTCDATETIME',\n  'TIMEFROMPARTS',\n  'TODATETIMEOFFSET',\n  'YEAR',\n  'JSON',\n  'ISJSON',\n  'JSON_VALUE',\n  'JSON_QUERY',\n  'JSON_MODIFY',\n\n  // mathematical\n  'ABS',\n  'ACOS',\n  'ASIN',\n  'ATAN',\n  'ATN2',\n  'CEILING',\n  'COS',\n  'COT',\n  'DEGREES',\n  'EXP',\n  'FLOOR',\n  'LOG',\n  'LOG10',\n  'PI',\n  'POWER',\n  'RADIANS',\n  'RAND',\n  'ROUND',\n  'SIGN',\n  'SIN',\n  'SQRT',\n  'SQUARE',\n  'TAN',\n  'CHOOSE',\n  'GREATEST',\n  'IIF',\n  'LEAST',\n\n  // metadata\n  '@@PROCID',\n  'APP_NAME',\n  'APPLOCK_MODE',\n  'APPLOCK_TEST',\n  'ASSEMBLYPROPERTY',\n  'COL_LENGTH',\n  'COL_NAME',\n  'COLUMNPROPERTY',\n  'DATABASEPROPERTYEX',\n  'DB_ID',\n  'DB_NAME',\n  'FILE_ID',\n  'FILE_IDEX',\n  'FILE_NAME',\n  'FILEGROUP_ID',\n  'FILEGROUP_NAME',\n  'FILEGROUPPROPERTY',\n  'FILEPROPERTY',\n  'FILEPROPERTYEX',\n  'FULLTEXTCATALOGPROPERTY',\n  'FULLTEXTSERVICEPROPERTY',\n  'INDEX_COL',\n  'INDEXKEY_PROPERTY',\n  'INDEXPROPERTY',\n  'NEXT VALUE FOR',\n  'OBJECT_DEFINITION',\n  'OBJECT_ID',\n  'OBJECT_NAME',\n  'OBJECT_SCHEMA_NAME',\n  'OBJECTPROPERTY',\n  'OBJECTPROPERTYEX',\n  'ORIGINAL_DB_NAME',\n  'PARSENAME',\n  'SCHEMA_ID',\n  'SCHEMA_NAME',\n  'SCOPE_IDENTITY',\n  'SERVERPROPERTY',\n  'STATS_DATE',\n  'TYPE_ID',\n  'TYPE_NAME',\n  'TYPEPROPERTY',\n\n  // ranking\n  'DENSE_RANK',\n  'NTILE',\n  'RANK',\n  'ROW_NUMBER',\n  'PUBLISHINGSERVERNAME',\n\n  // security\n  'CERTENCODED',\n  'CERTPRIVATEKEY',\n  'CURRENT_USER',\n  'DATABASE_PRINCIPAL_ID',\n  'HAS_DBACCESS',\n  'HAS_PERMS_BY_NAME',\n  'IS_MEMBER',\n  'IS_ROLEMEMBER',\n  'IS_SRVROLEMEMBER',\n  'LOGINPROPERTY',\n  'ORIGINAL_LOGIN',\n  'PERMISSIONS',\n  'PWDENCRYPT',\n  'PWDCOMPARE',\n  'SESSION_USER',\n  'SESSIONPROPERTY',\n  'SUSER_ID',\n  'SUSER_NAME',\n  'SUSER_SID',\n  'SUSER_SNAME',\n  'SYSTEM_USER',\n  'USER',\n  'USER_ID',\n  'USER_NAME',\n\n  // string\n  'ASCII',\n  'CHARINDEX',\n  'CONCAT',\n  'CONCAT_WS',\n  'DIFFERENCE',\n  'FORMAT',\n  'LEFT',\n  'LEN',\n  'LOWER',\n  'LTRIM',\n  'PATINDEX',\n  'QUOTENAME',\n  'REPLACE',\n  'REPLICATE',\n  'REVERSE',\n  'RIGHT',\n  'RTRIM',\n  'SOUNDEX',\n  'SPACE',\n  'STR',\n  'STRING_AGG',\n  'STRING_ESCAPE',\n  'STUFF',\n  'SUBSTRING',\n  'TRANSLATE',\n  'TRIM',\n  'UNICODE',\n  'UPPER',\n\n  // system\n  '$PARTITION',\n  '@@ERROR',\n  '@@IDENTITY',\n  '@@PACK_RECEIVED',\n  '@@ROWCOUNT',\n  '@@TRANCOUNT',\n  'BINARY_CHECKSUM',\n  'CHECKSUM',\n  'COMPRESS',\n  'CONNECTIONPROPERTY',\n  'CONTEXT_INFO',\n  'CURRENT_REQUEST_ID',\n  'CURRENT_TRANSACTION_ID',\n  'DECOMPRESS',\n  'ERROR_LINE',\n  'ERROR_MESSAGE',\n  'ERROR_NUMBER',\n  'ERROR_PROCEDURE',\n  'ERROR_SEVERITY',\n  'ERROR_STATE',\n  'FORMATMESSAGE',\n  'GET_FILESTREAM_TRANSACTION_CONTEXT',\n  'GETANSINULL',\n  'HOST_ID',\n  'HOST_NAME',\n  'ISNULL',\n  'ISNUMERIC',\n  'MIN_ACTIVE_ROWVERSION',\n  'NEWID',\n  'NEWSEQUENTIALID',\n  'ROWCOUNT_BIG',\n  'SESSION_CONTEXT',\n  'XACT_STATE',\n\n  // statistical\n  '@@CONNECTIONS',\n  '@@CPU_BUSY',\n  '@@IDLE',\n  '@@IO_BUSY',\n  '@@PACK_SENT',\n  '@@PACKET_ERRORS',\n  '@@TIMETICKS',\n  '@@TOTAL_ERRORS',\n  '@@TOTAL_READ',\n  '@@TOTAL_WRITE',\n  'TEXTPTR',\n  'TEXTVALID',\n\n  // trigger\n  'COLUMNS_UPDATED',\n  'EVENTDATA',\n  'TRIGGER_NESTLEVEL',\n  'UPDATE',\n\n  // Shorthand functions to use in place of CASE expression\n  'COALESCE',\n  'NULLIF',\n];\n","export const keywords: string[] = [\n  // https://docs.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-ver15\n  // standard\n  'ADD',\n  'ALL',\n  'ALTER',\n  'AND',\n  'ANY',\n  'AS',\n  'ASC',\n  'AUTHORIZATION',\n  'BACKUP',\n  'BEGIN',\n  'BETWEEN',\n  'BREAK',\n  'BROWSE',\n  'BULK',\n  'BY',\n  'CASCADE',\n  'CHECK',\n  'CHECKPOINT',\n  'CLOSE',\n  'CLUSTERED',\n  'COALESCE',\n  'COLLATE',\n  'COLUMN',\n  'COMMIT',\n  'COMPUTE',\n  'CONSTRAINT',\n  'CONTAINS',\n  'CONTAINSTABLE',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DBCC',\n  'DEALLOCATE',\n  'DECLARE',\n  'DEFAULT',\n  'DELETE',\n  'DENY',\n  'DESC',\n  'DISK',\n  'DISTINCT',\n  'DISTRIBUTED',\n  'DROP',\n  'DUMP',\n  'ERRLVL',\n  'ESCAPE',\n  'EXEC',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXTERNAL',\n  'FETCH',\n  'FILE',\n  'FILLFACTOR',\n  'FOR',\n  'FOREIGN',\n  'FREETEXT',\n  'FREETEXTTABLE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'GOTO',\n  'GRANT',\n  'GROUP',\n  'HAVING',\n  'HOLDLOCK',\n  'IDENTITY',\n  'IDENTITYCOL',\n  'IDENTITY_INSERT',\n  'IF',\n  'IN',\n  'INDEX',\n  'INNER',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'JOIN',\n  'KEY',\n  'KILL',\n  'LEFT',\n  'LIKE',\n  'LINENO',\n  'LOAD',\n  'MERGE',\n  'NOCHECK',\n  'NONCLUSTERED',\n  'NOT',\n  'NULL',\n  'NULLIF',\n  'OF',\n  'OFF',\n  'OFFSETS',\n  'ON',\n  'OPEN',\n  'OPENDATASOURCE',\n  'OPENQUERY',\n  'OPENROWSET',\n  'OPENXML',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'OUTER',\n  'OVER',\n  'PERCENT',\n  'PIVOT',\n  'PLAN',\n  'PRIMARY',\n  'PRINT',\n  'PROC',\n  'PROCEDURE',\n  'PUBLIC',\n  'RAISERROR',\n  'READ',\n  'READTEXT',\n  'RECONFIGURE',\n  'REFERENCES',\n  'REPLICATION',\n  'RESTORE',\n  'RESTRICT',\n  'RETURN',\n  'REVERT',\n  'REVOKE',\n  'RIGHT',\n  'ROLLBACK',\n  'ROWCOUNT',\n  'ROWGUIDCOL',\n  'RULE',\n  'SAVE',\n  'SCHEMA',\n  'SECURITYAUDIT',\n  'SELECT',\n  'SEMANTICKEYPHRASETABLE',\n  'SEMANTICSIMILARITYDETAILSTABLE',\n  'SEMANTICSIMILARITYTABLE',\n  'SESSION_USER',\n  'SET',\n  'SETUSER',\n  'SHUTDOWN',\n  'SOME',\n  'STATISTICS',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESAMPLE',\n  'TEXTSIZE',\n  'THEN',\n  'TO',\n  'TOP',\n  'TRAN',\n  'TRANSACTION',\n  'TRIGGER',\n  'TRUNCATE',\n  'TRY_CONVERT',\n  'TSEQUAL',\n  'UNION',\n  'UNIQUE',\n  'UNPIVOT',\n  'UPDATE',\n  'UPDATETEXT',\n  'USE',\n  'USER',\n  'VALUES',\n  'VIEW',\n  'WAITFOR',\n  'WHERE',\n  'WHILE',\n  'WITH',\n  'WITHIN GROUP',\n  'WRITETEXT',\n  // https://learn.microsoft.com/en-us/sql/t-sql/queries/output-clause-transact-sql?view=sql-server-ver16#action\n  '$ACTION',\n];\n\nexport const dataTypes: string[] = [\n  // https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver15\n  'BINARY',\n  'BIT',\n  'CHAR',\n  'CHAR',\n  'CHARACTER',\n  'DATE',\n  'DATETIME2',\n  'DATETIMEOFFSET',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE',\n  'FLOAT',\n  'INT',\n  'INTEGER',\n  'NATIONAL',\n  'NCHAR',\n  'NUMERIC',\n  'NVARCHAR',\n  'PRECISION',\n  'REAL',\n  'SMALLINT',\n  'TIME',\n  'TIMESTAMP',\n  'VARBINARY',\n  'VARCHAR',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './transactsql.functions.js';\nimport { dataTypes, keywords } from './transactsql.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'INTO',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR {BROWSE | XML | JSON}',\n  'OPTION',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO]',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR ALTER] {PROC | PROCEDURE}',\n]);\n\nconst standardOnelineClauses = expandPhrases(['CREATE TABLE']);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR ALTER] [MATERIALIZED] VIEW',\n  // - update:\n  'UPDATE',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE [FROM]',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP COLUMN [IF EXISTS]',\n  'ALTER COLUMN',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // indexes\n  'CREATE [UNIQUE] [CLUSTERED] INDEX',\n  // other statements\n  'GO',\n  // https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15\n  'ADD SENSITIVITY CLASSIFICATION',\n  'ADD SIGNATURE',\n  'AGGREGATE',\n  'ANSI_DEFAULTS',\n  'ANSI_NULLS',\n  'ANSI_NULL_DFLT_OFF',\n  'ANSI_NULL_DFLT_ON',\n  'ANSI_PADDING',\n  'ANSI_WARNINGS',\n  'APPLICATION ROLE',\n  'ARITHABORT',\n  'ARITHIGNORE',\n  'ASSEMBLY',\n  'ASYMMETRIC KEY',\n  'AUTHORIZATION',\n  'AVAILABILITY GROUP',\n  'BACKUP',\n  'BACKUP CERTIFICATE',\n  'BACKUP MASTER KEY',\n  'BACKUP SERVICE MASTER KEY',\n  'BEGIN CONVERSATION TIMER',\n  'BEGIN DIALOG CONVERSATION',\n  'BROKER PRIORITY',\n  'BULK INSERT',\n  'CERTIFICATE',\n  'CLOSE MASTER KEY',\n  'CLOSE SYMMETRIC KEY',\n  'COLLATE',\n  'COLUMN ENCRYPTION KEY',\n  'COLUMN MASTER KEY',\n  'COLUMNSTORE INDEX',\n  'CONCAT_NULL_YIELDS_NULL',\n  'CONTEXT_INFO',\n  'CONTRACT',\n  'CREDENTIAL',\n  'CRYPTOGRAPHIC PROVIDER',\n  'CURSOR_CLOSE_ON_COMMIT',\n  'DATABASE',\n  'DATABASE AUDIT SPECIFICATION',\n  'DATABASE ENCRYPTION KEY',\n  'DATABASE HADR',\n  'DATABASE SCOPED CONFIGURATION',\n  'DATABASE SCOPED CREDENTIAL',\n  'DATABASE SET',\n  'DATEFIRST',\n  'DATEFORMAT',\n  'DEADLOCK_PRIORITY',\n  'DENY',\n  'DENY XML',\n  'DISABLE TRIGGER',\n  'ENABLE TRIGGER',\n  'END CONVERSATION',\n  'ENDPOINT',\n  'EVENT NOTIFICATION',\n  'EVENT SESSION',\n  'EXECUTE AS',\n  'EXTERNAL DATA SOURCE',\n  'EXTERNAL FILE FORMAT',\n  'EXTERNAL LANGUAGE',\n  'EXTERNAL LIBRARY',\n  'EXTERNAL RESOURCE POOL',\n  'EXTERNAL TABLE',\n  'FIPS_FLAGGER',\n  'FMTONLY',\n  'FORCEPLAN',\n  'FULLTEXT CATALOG',\n  'FULLTEXT INDEX',\n  'FULLTEXT STOPLIST',\n  'FUNCTION',\n  'GET CONVERSATION GROUP',\n  'GET_TRANSMISSION_STATUS',\n  'GRANT',\n  'GRANT XML',\n  'IDENTITY_INSERT',\n  'IMPLICIT_TRANSACTIONS',\n  'INDEX',\n  'LANGUAGE',\n  'LOCK_TIMEOUT',\n  'LOGIN',\n  'MASTER KEY',\n  'MESSAGE TYPE',\n  'MOVE CONVERSATION',\n  'NOCOUNT',\n  'NOEXEC',\n  'NUMERIC_ROUNDABORT',\n  'OFFSETS',\n  'OPEN MASTER KEY',\n  'OPEN SYMMETRIC KEY',\n  'PARSEONLY',\n  'PARTITION FUNCTION',\n  'PARTITION SCHEME',\n  'PROCEDURE',\n  'QUERY_GOVERNOR_COST_LIMIT',\n  'QUEUE',\n  'QUOTED_IDENTIFIER',\n  'RECEIVE',\n  'REMOTE SERVICE BINDING',\n  'REMOTE_PROC_TRANSACTIONS',\n  'RESOURCE GOVERNOR',\n  'RESOURCE POOL',\n  'RESTORE',\n  'RESTORE FILELISTONLY',\n  'RESTORE HEADERONLY',\n  'RESTORE LABELONLY',\n  'RESTORE MASTER KEY',\n  'RESTORE REWINDONLY',\n  'RESTORE SERVICE MASTER KEY',\n  'RESTORE VERIFYONLY',\n  'REVERT',\n  'REVOKE',\n  'REVOKE XML',\n  'ROLE',\n  'ROUTE',\n  'ROWCOUNT',\n  'RULE',\n  'SCHEMA',\n  'SEARCH PROPERTY LIST',\n  'SECURITY POLICY',\n  'SELECTIVE XML INDEX',\n  'SEND',\n  'SENSITIVITY CLASSIFICATION',\n  'SEQUENCE',\n  'SERVER AUDIT',\n  'SERVER AUDIT SPECIFICATION',\n  'SERVER CONFIGURATION',\n  'SERVER ROLE',\n  'SERVICE',\n  'SERVICE MASTER KEY',\n  'SETUSER',\n  'SHOWPLAN_ALL',\n  'SHOWPLAN_TEXT',\n  'SHOWPLAN_XML',\n  'SIGNATURE',\n  'SPATIAL INDEX',\n  'STATISTICS',\n  'STATISTICS IO',\n  'STATISTICS PROFILE',\n  'STATISTICS TIME',\n  'STATISTICS XML',\n  'SYMMETRIC KEY',\n  'SYNONYM',\n  'TABLE',\n  'TABLE IDENTITY',\n  'TEXTSIZE',\n  'TRANSACTION ISOLATION LEVEL',\n  'TRIGGER',\n  'TYPE',\n  'UPDATE STATISTICS',\n  'USER',\n  'WORKLOAD GROUP',\n  'XACT_ABORT',\n  'XML INDEX',\n  'XML SCHEMA COLLECTION',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\n// https://docs.microsoft.com/en-us/sql/t-sql/language-reference?view=sql-server-ver15\nexport const transactsql: DialectOptions = {\n  name: 'transactsql',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    nestedBlockComments: true,\n    stringTypes: [{ quote: \"''-qq\", prefixes: ['N'] }],\n    identTypes: [`\"\"-qq`, '[]'],\n    identChars: { first: '#@', rest: '#@$' },\n    paramTypes: { named: ['@'], quoted: ['@'] },\n    operators: [\n      '%',\n      '&',\n      '|',\n      '^',\n      '~',\n      '!<',\n      '!>',\n      '+=',\n      '-=',\n      '*=',\n      '/=',\n      '%=',\n      '|=',\n      '&=',\n      '^=',\n      '::',\n      ':',\n    ],\n    propertyAccessOperators: ['..'],\n    // TODO: Support for money constants\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['::'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const keywords: string[] = [\n  // List of all keywords taken from:\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/restricted-keywords/list-of-restricted-keywords.html\n  // Then filtered down to reserved keywords by running\n  // > SELECT * AS <keyword>;\n  // for each keyword in that list and observing which of these produce an error.\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  '_BINARY',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'EXTRA_JOIN',\n  'FALSE',\n  'FETCH',\n  'FOR',\n  'FORCE',\n  'FORCE_COMPILED_MODE',\n  'FORCE_INTERPRETER_MODE',\n  'FOREIGN',\n  'FROM',\n  'FULL',\n  'FULLTEXT',\n  'GRANT',\n  'GROUP',\n  'HAVING',\n  'HEARTBEAT_NO_LOGGING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'IN',\n  '_INTERNAL_DYNAMIC_TYPECAST',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'ITERATE',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MATCH',\n  'MAXVALUE',\n  'MINUS',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NO_QUERY_REWRITE',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NO_QUERY_REWRITE',\n  'NULL',\n  'ON',\n  'OPTIMIZE',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'READ',\n  'READS',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESTRICT',\n  'RETURN',\n  'REVOKE',\n  'RIGHT',\n  'RIGHT_ANTI_JOIN',\n  'RIGHT_SEMI_JOIN',\n  'RIGHT_STRAIGHT_JOIN',\n  'RLIKE',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SEMI_JOIN',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQL_BIG_RESULT',\n  'SQL_BUFFER_RESULT',\n  'SQL_CACHE',\n  'SQL_CALC_FOUND_ROWS',\n  'SQLEXCEPTION',\n  'SQL_NO_CACHE',\n  'SQL_NO_LOGGING',\n  'SQL_SMALL_RESULT',\n  'SQLSTATE',\n  'SQLWARNING',\n  'STRAIGHT_JOIN',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNBOUNDED',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  '_UTF8',\n  'VALUES',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n\nexport const dataTypes: string[] = [\n  // https://docs.singlestore.com/cloud/reference/sql-reference/data-types/\n  'BIGINT',\n  'BINARY',\n  'BIT',\n  'BLOB',\n  'CHAR',\n  'CHARACTER',\n  'DATETIME',\n  'DEC',\n  'DECIMAL',\n  'DOUBLE PRECISION',\n  'DOUBLE',\n  'ENUM',\n  'FIXED',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'NATIONAL CHAR',\n  'NATIONAL VARCHAR',\n  'NUMERIC',\n  'PRECISION',\n  'REAL',\n  'SMALLINT',\n  'TEXT',\n  'TIME',\n  'TIMESTAMP',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'UNSIGNED',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'YEAR',\n];\n","export const functions: string[] = [\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/vector-functions/vector-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/window-functions/window-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/string-functions/string-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/conditional-functions/conditional-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/numeric-functions/numeric-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/geospatial-functions/geospatial-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/json-functions/json-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/information-functions/information-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/aggregate-functions/aggregate-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/time-series-functions/time-series-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/identifier-generation-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/date-and-time-functions/date-and-time-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/distinct-count-estimation-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/full-text-search-functions/full-text-search-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/regular-expression-functions.html\n  'ABS',\n  'ACOS',\n  'ADDDATE',\n  'ADDTIME',\n  'AES_DECRYPT',\n  'AES_ENCRYPT',\n  'ANY_VALUE',\n  'APPROX_COUNT_DISTINCT',\n  'APPROX_COUNT_DISTINCT_ACCUMULATE',\n  'APPROX_COUNT_DISTINCT_COMBINE',\n  'APPROX_COUNT_DISTINCT_ESTIMATE',\n  'APPROX_GEOGRAPHY_INTERSECTS',\n  'APPROX_PERCENTILE',\n  'ASCII',\n  'ASIN',\n  'ATAN',\n  'ATAN2',\n  'AVG',\n  'BIN',\n  'BINARY',\n  'BIT_AND',\n  'BIT_COUNT',\n  'BIT_OR',\n  'BIT_XOR',\n  'CAST',\n  'CEIL',\n  'CEILING',\n  'CHAR',\n  'CHARACTER_LENGTH',\n  'CHAR_LENGTH',\n  'CHARSET',\n  'COALESCE',\n  'COERCIBILITY',\n  'COLLATION',\n  'COLLECT',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONNECTION_ID',\n  'CONV',\n  'CONVERT',\n  'CONVERT_TZ',\n  'COS',\n  'COT',\n  'COUNT',\n  'CUME_DIST',\n  'CURDATE',\n  'CURRENT_DATE',\n  'CURRENT_ROLE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURTIME',\n  'DATABASE',\n  'DATE',\n  'DATE_ADD',\n  'DATEDIFF',\n  'DATE_FORMAT',\n  'DATE_SUB',\n  'DATE_TRUNC',\n  'DAY',\n  'DAYNAME',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'DECODE',\n  'DEFAULT',\n  'DEGREES',\n  'DENSE_RANK',\n  'DIV',\n  'DOT_PRODUCT',\n  'ELT',\n  'EUCLIDEAN_DISTANCE',\n  'EXP',\n  'EXTRACT',\n  'FIELD',\n  'FIRST',\n  'FIRST_VALUE',\n  'FLOOR',\n  'FORMAT',\n  'FOUND_ROWS',\n  'FROM_BASE64',\n  'FROM_DAYS',\n  'FROM_UNIXTIME',\n  'GEOGRAPHY_AREA',\n  'GEOGRAPHY_CONTAINS',\n  'GEOGRAPHY_DISTANCE',\n  'GEOGRAPHY_INTERSECTS',\n  'GEOGRAPHY_LATITUDE',\n  'GEOGRAPHY_LENGTH',\n  'GEOGRAPHY_LONGITUDE',\n  'GEOGRAPHY_POINT',\n  'GEOGRAPHY_WITHIN_DISTANCE',\n  'GEOMETRY_AREA',\n  'GEOMETRY_CONTAINS',\n  'GEOMETRY_DISTANCE',\n  'GEOMETRY_FILTER',\n  'GEOMETRY_INTERSECTS',\n  'GEOMETRY_LENGTH',\n  'GEOMETRY_POINT',\n  'GEOMETRY_WITHIN_DISTANCE',\n  'GEOMETRY_X',\n  'GEOMETRY_Y',\n  'GREATEST',\n  'GROUPING',\n  'GROUP_CONCAT',\n  'HEX',\n  'HIGHLIGHT',\n  'HOUR',\n  'ICU_VERSION',\n  'IF',\n  'IFNULL',\n  'INET_ATON',\n  'INET_NTOA',\n  'INET6_ATON',\n  'INET6_NTOA',\n  'INITCAP',\n  'INSERT',\n  'INSTR',\n  'INTERVAL',\n  'IS',\n  'IS NULL',\n  'JSON_AGG',\n  'JSON_ARRAY_CONTAINS_DOUBLE',\n  'JSON_ARRAY_CONTAINS_JSON',\n  'JSON_ARRAY_CONTAINS_STRING',\n  'JSON_ARRAY_PUSH_DOUBLE',\n  'JSON_ARRAY_PUSH_JSON',\n  'JSON_ARRAY_PUSH_STRING',\n  'JSON_DELETE_KEY',\n  'JSON_EXTRACT_DOUBLE',\n  'JSON_EXTRACT_JSON',\n  'JSON_EXTRACT_STRING',\n  'JSON_EXTRACT_BIGINT',\n  'JSON_GET_TYPE',\n  'JSON_LENGTH',\n  'JSON_SET_DOUBLE',\n  'JSON_SET_JSON',\n  'JSON_SET_STRING',\n  'JSON_SPLICE_DOUBLE',\n  'JSON_SPLICE_JSON',\n  'JSON_SPLICE_STRING',\n  'LAG',\n  'LAST_DAY',\n  'LAST_VALUE',\n  'LCASE',\n  'LEAD',\n  'LEAST',\n  'LEFT',\n  'LENGTH',\n  'LIKE',\n  'LN',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATE',\n  'LOG',\n  'LOG10',\n  'LOG2',\n  'LPAD',\n  'LTRIM',\n  'MATCH',\n  'MAX',\n  'MD5',\n  'MEDIAN',\n  'MICROSECOND',\n  'MIN',\n  'MINUTE',\n  'MOD',\n  'MONTH',\n  'MONTHNAME',\n  'MONTHS_BETWEEN',\n  'NOT',\n  'NOW',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLIF',\n  'OCTET_LENGTH',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PI',\n  'PIVOT',\n  'POSITION',\n  'POW',\n  'POWER',\n  'QUARTER',\n  'QUOTE',\n  'RADIANS',\n  'RAND',\n  'RANK',\n  'REGEXP',\n  'REPEAT',\n  'REPLACE',\n  'REVERSE',\n  'RIGHT',\n  'RLIKE',\n  'ROUND',\n  'ROW_COUNT',\n  'ROW_NUMBER',\n  'RPAD',\n  'RTRIM',\n  'SCALAR',\n  'SCHEMA',\n  'SEC_TO_TIME',\n  'SHA1',\n  'SHA2',\n  'SIGMOID',\n  'SIGN',\n  'SIN',\n  'SLEEP',\n  'SPLIT',\n  'SOUNDEX',\n  'SOUNDS LIKE',\n  'SOURCE_POS_WAIT',\n  'SPACE',\n  'SQRT',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STR_TO_DATE',\n  'SUBDATE',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUBSTRING_INDEX',\n  'SUM',\n  'SYS_GUID',\n  'TAN',\n  'TIME',\n  'TIMEDIFF',\n  'TIME_BUCKET',\n  'TIME_FORMAT',\n  'TIMESTAMP',\n  'TIMESTAMPADD',\n  'TIMESTAMPDIFF',\n  'TIME_TO_SEC',\n  'TO_BASE64',\n  'TO_CHAR',\n  'TO_DAYS',\n  'TO_JSON',\n  'TO_NUMBER',\n  'TO_SECONDS',\n  'TO_TIMESTAMP',\n  'TRIM',\n  'TRUNC',\n  'TRUNCATE',\n  'UCASE',\n  'UNHEX',\n  'UNIX_TIMESTAMP',\n  'UPDATEXML',\n  'UPPER',\n  // 'USER',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'UUID',\n  'VALUES',\n  'VARIANCE',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VECTOR_SUB',\n  'VERSION',\n  'WEEK',\n  'WEEKDAY',\n  'WEEKOFYEAR',\n  'YEAR',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { postProcess } from '../mariadb/likeMariaDb.js';\nimport { dataTypes, keywords } from './singlestoredb.keywords.js';\nimport { functions } from './singlestoredb.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | DISTINCTROW]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [IGNORE] [INTO]',\n  'VALUES',\n  'REPLACE [INTO]',\n  'ON DUPLICATE KEY UPDATE',\n  // - update:\n  'SET',\n  // Data definition\n  'CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [EXTERNAL] FUNCTION',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE VIEW',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE [FROM]',\n  // - drop table:\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER [ONLINE] TABLE',\n  'ADD [COLUMN]',\n  'ADD [UNIQUE] {INDEX | KEY}',\n  'DROP [COLUMN]',\n  'MODIFY [COLUMN]',\n  'CHANGE',\n  'RENAME [TO | AS]',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference.html\n  'ADD AGGREGATOR',\n  'ADD LEAF',\n  'AGGREGATOR SET AS MASTER',\n  'ALTER DATABASE',\n  'ALTER PIPELINE',\n  'ALTER RESOURCE POOL',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE TABLE',\n  'ATTACH DATABASE',\n  'ATTACH LEAF',\n  'ATTACH LEAF ALL',\n  'BACKUP DATABASE',\n  'BINLOG',\n  'BOOTSTRAP AGGREGATOR',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE',\n  'CHANGE MASTER TO',\n  'CHANGE REPLICATION FILTER',\n  'CHANGE REPLICATION SOURCE TO',\n  'CHECK BLOB CHECKSUM',\n  'CHECK TABLE',\n  'CHECKSUM TABLE',\n  'CLEAR ORPHAN DATABASES',\n  'CLONE',\n  'COMMIT',\n  'CREATE DATABASE',\n  'CREATE GROUP',\n  'CREATE INDEX',\n  'CREATE LINK',\n  'CREATE MILESTONE',\n  'CREATE PIPELINE',\n  'CREATE RESOURCE POOL',\n  'CREATE ROLE',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DETACH DATABASE',\n  'DETACH PIPELINE',\n  'DROP DATABASE',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP LINK',\n  'DROP PIPELINE',\n  'DROP PROCEDURE',\n  'DROP RESOURCE POOL',\n  'DROP ROLE',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'FORCE',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'KILL CONNECTION',\n  'KILLALL QUERIES',\n  'LOAD DATA',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML',\n  'LOCK INSTANCE FOR BACKUP',\n  'LOCK TABLES',\n  'MASTER_POS_WAIT',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'REBALANCE PARTITIONS',\n  'RELEASE SAVEPOINT',\n  'REMOVE AGGREGATOR',\n  'REMOVE LEAF',\n  'REPAIR TABLE',\n  'REPLACE',\n  'REPLICATE DATABASE',\n  'RESET',\n  'RESET MASTER',\n  'RESET PERSIST',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESTART',\n  'RESTORE DATABASE',\n  'RESTORE REDUNDANCY',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET RESOURCE GROUP',\n  'SET ROLE',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW CHARACTER SET',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PIPELINE',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PLUGINS',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA STATUS',\n  'SHOW REPLICAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW STATUS',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHUTDOWN',\n  'SNAPSHOT DATABASE',\n  'SOURCE_POS_WAIT',\n  'START GROUP_REPLICATION',\n  'START PIPELINE',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP GROUP_REPLICATION',\n  'STOP PIPELINE',\n  'STOP REPLICA',\n  'STOP REPLICATING',\n  'STOP SLAVE',\n  'TEST PIPELINE',\n  'UNLOCK INSTANCE',\n  'UNLOCK TABLES',\n  'USE',\n  'XA',\n  // flow control\n  'ITERATE',\n  'LEAVE',\n  'LOOP',\n  'REPEAT',\n  'RETURN',\n  'WHILE',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT',\n  'INTERSECT',\n  'MINUS',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON DELETE',\n  'ON UPDATE',\n  'CHARACTER SET',\n  '{ROWS | RANGE} BETWEEN',\n  'IDENTIFIED BY',\n]);\n\nexport const singlestoredb: DialectOptions = {\n  name: 'singlestoredb',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    // TODO: support _binary\"some string\" prefix\n    stringTypes: [\n      '\"\"-qq-bs',\n      \"''-qq-bs\",\n      { quote: \"''-raw\", prefixes: ['B', 'X'], requirePrefix: true },\n    ],\n    identTypes: ['``'],\n    identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n    variableTypes: [\n      { regex: '@@?[A-Za-z0-9_$]+' },\n      { quote: '``', prefixes: ['@'], requirePrefix: true },\n    ],\n    lineCommentTypes: ['--', '#'],\n    operators: [\n      ':=',\n      '&',\n      '|',\n      '^',\n      '~',\n      '<<',\n      '>>',\n      '<=>',\n      '&&',\n      '||',\n      '::',\n      '::$',\n      '::%',\n      ':>',\n      '!:>',\n      '*.*', // Not actually an operator\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['::', '::$', '::%'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const functions: string[] = [\n  // https://docs.snowflake.com/en/sql-reference-functions.html\n  //\n  // https://docs.snowflake.com/en/sql-reference/functions-all.html\n  // 1. run in console on this page: $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue)\n  // 2. split all lines that contain ',' or '/' into multiple lines\n  // 3. remove all '— Deprecated' parts from the strings\n  // 4. delete all strings that end with '<object_type>', they are already covered in the list\n  // 5. remove all strings that contain '[', they are operators not functions\n  // 6. fix all values that contain '*'\n  // 7. delete operatos ':', '::', '||'\n  //\n  // Steps 1-5 can be combined by the following script in the developer console:\n  // $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue) // Step 1\n  //   .map(x => x.split(x.includes(',') ? ',' : '/')).flat().map(x => x.trim()) // Step 2\n  //   .map(x => x.replace('— Deprecated', '')) // Step 3\n  //   .filter(x => !x.endsWith('<object_type>')) // Step 4\n  //   .filter(x => !x.includes('[')) // Step 5\n  'ABS',\n  'ACOS',\n  'ACOSH',\n  'ADD_MONTHS',\n  'ALL_USER_NAMES',\n  'ANY_VALUE',\n  'APPROX_COUNT_DISTINCT',\n  'APPROX_PERCENTILE',\n  'APPROX_PERCENTILE_ACCUMULATE',\n  'APPROX_PERCENTILE_COMBINE',\n  'APPROX_PERCENTILE_ESTIMATE',\n  'APPROX_TOP_K',\n  'APPROX_TOP_K_ACCUMULATE',\n  'APPROX_TOP_K_COMBINE',\n  'APPROX_TOP_K_ESTIMATE',\n  'APPROXIMATE_JACCARD_INDEX',\n  'APPROXIMATE_SIMILARITY',\n  'ARRAY_AGG',\n  'ARRAY_APPEND',\n  'ARRAY_CAT',\n  'ARRAY_COMPACT',\n  'ARRAY_CONSTRUCT',\n  'ARRAY_CONSTRUCT_COMPACT',\n  'ARRAY_CONTAINS',\n  'ARRAY_INSERT',\n  'ARRAY_INTERSECTION',\n  'ARRAY_POSITION',\n  'ARRAY_PREPEND',\n  'ARRAY_SIZE',\n  'ARRAY_SLICE',\n  'ARRAY_TO_STRING',\n  'ARRAY_UNION_AGG',\n  'ARRAY_UNIQUE_AGG',\n  'ARRAYS_OVERLAP',\n  'AS_ARRAY',\n  'AS_BINARY',\n  'AS_BOOLEAN',\n  'AS_CHAR',\n  'AS_VARCHAR',\n  'AS_DATE',\n  'AS_DECIMAL',\n  'AS_NUMBER',\n  'AS_DOUBLE',\n  'AS_REAL',\n  'AS_INTEGER',\n  'AS_OBJECT',\n  'AS_TIME',\n  'AS_TIMESTAMP_LTZ',\n  'AS_TIMESTAMP_NTZ',\n  'AS_TIMESTAMP_TZ',\n  'ASCII',\n  'ASIN',\n  'ASINH',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'AUTO_REFRESH_REGISTRATION_HISTORY',\n  'AUTOMATIC_CLUSTERING_HISTORY',\n  'AVG',\n  'BASE64_DECODE_BINARY',\n  'BASE64_DECODE_STRING',\n  'BASE64_ENCODE',\n  'BIT_LENGTH',\n  'BITAND',\n  'BITAND_AGG',\n  'BITMAP_BIT_POSITION',\n  'BITMAP_BUCKET_NUMBER',\n  'BITMAP_CONSTRUCT_AGG',\n  'BITMAP_COUNT',\n  'BITMAP_OR_AGG',\n  'BITNOT',\n  'BITOR',\n  'BITOR_AGG',\n  'BITSHIFTLEFT',\n  'BITSHIFTRIGHT',\n  'BITXOR',\n  'BITXOR_AGG',\n  'BOOLAND',\n  'BOOLAND_AGG',\n  'BOOLNOT',\n  'BOOLOR',\n  'BOOLOR_AGG',\n  'BOOLXOR',\n  'BOOLXOR_AGG',\n  'BUILD_SCOPED_FILE_URL',\n  'BUILD_STAGE_FILE_URL',\n  'CASE',\n  'CAST',\n  'CBRT',\n  'CEIL',\n  'CHARINDEX',\n  'CHECK_JSON',\n  'CHECK_XML',\n  'CHR',\n  'CHAR',\n  'COALESCE',\n  'COLLATE',\n  'COLLATION',\n  'COMPLETE_TASK_GRAPHS',\n  'COMPRESS',\n  'CONCAT',\n  'CONCAT_WS',\n  'CONDITIONAL_CHANGE_EVENT',\n  'CONDITIONAL_TRUE_EVENT',\n  'CONTAINS',\n  'CONVERT_TIMEZONE',\n  'COPY_HISTORY',\n  'CORR',\n  'COS',\n  'COSH',\n  'COT',\n  'COUNT',\n  'COUNT_IF',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CUME_DIST',\n  'CURRENT_ACCOUNT',\n  'CURRENT_AVAILABLE_ROLES',\n  'CURRENT_CLIENT',\n  'CURRENT_DATABASE',\n  'CURRENT_DATE',\n  'CURRENT_IP_ADDRESS',\n  'CURRENT_REGION',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_SCHEMAS',\n  'CURRENT_SECONDARY_ROLES',\n  'CURRENT_SESSION',\n  'CURRENT_STATEMENT',\n  'CURRENT_TASK_GRAPHS',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TRANSACTION',\n  'CURRENT_USER',\n  'CURRENT_VERSION',\n  'CURRENT_WAREHOUSE',\n  'DATA_TRANSFER_HISTORY',\n  'DATABASE_REFRESH_HISTORY',\n  'DATABASE_REFRESH_PROGRESS',\n  'DATABASE_REFRESH_PROGRESS_BY_JOB',\n  'DATABASE_STORAGE_USAGE_HISTORY',\n  'DATE_FROM_PARTS',\n  'DATE_PART',\n  'DATE_TRUNC',\n  'DATEADD',\n  'DATEDIFF',\n  'DAYNAME',\n  'DECODE',\n  'DECOMPRESS_BINARY',\n  'DECOMPRESS_STRING',\n  'DECRYPT',\n  'DECRYPT_RAW',\n  'DEGREES',\n  'DENSE_RANK',\n  'DIV0',\n  'EDITDISTANCE',\n  'ENCRYPT',\n  'ENCRYPT_RAW',\n  'ENDSWITH',\n  'EQUAL_NULL',\n  'EXP',\n  'EXPLAIN_JSON',\n  'EXTERNAL_FUNCTIONS_HISTORY',\n  'EXTERNAL_TABLE_FILES',\n  'EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY',\n  'EXTRACT',\n  'EXTRACT_SEMANTIC_CATEGORIES',\n  'FACTORIAL',\n  'FILTER',\n  'FIRST_VALUE',\n  'FLATTEN',\n  'FLOOR',\n  'GENERATE_COLUMN_DESCRIPTION',\n  'GENERATOR',\n  'GET',\n  'GET_ABSOLUTE_PATH',\n  'GET_DDL',\n  'GET_IGNORE_CASE',\n  'GET_OBJECT_REFERENCES',\n  'GET_PATH',\n  'GET_PRESIGNED_URL',\n  'GET_RELATIVE_PATH',\n  'GET_STAGE_LOCATION',\n  'GETBIT',\n  'GREATEST',\n  'GREATEST_IGNORE_NULLS',\n  'GROUPING',\n  'GROUPING_ID',\n  'HASH',\n  'HASH_AGG',\n  'HAVERSINE',\n  'HEX_DECODE_BINARY',\n  'HEX_DECODE_STRING',\n  'HEX_ENCODE',\n  'HLL',\n  'HLL_ACCUMULATE',\n  'HLL_COMBINE',\n  'HLL_ESTIMATE',\n  'HLL_EXPORT',\n  'HLL_IMPORT',\n  'HOUR',\n  'MINUTE',\n  'SECOND',\n  'IFF',\n  'IFNULL',\n  'ILIKE',\n  'ILIKE ANY',\n  'INFER_SCHEMA',\n  'INITCAP',\n  'INSERT',\n  'INVOKER_ROLE',\n  'INVOKER_SHARE',\n  'IS_ARRAY',\n  'IS_BINARY',\n  'IS_BOOLEAN',\n  'IS_CHAR',\n  'IS_VARCHAR',\n  'IS_DATE',\n  'IS_DATE_VALUE',\n  'IS_DECIMAL',\n  'IS_DOUBLE',\n  'IS_REAL',\n  'IS_GRANTED_TO_INVOKER_ROLE',\n  'IS_INTEGER',\n  'IS_NULL_VALUE',\n  'IS_OBJECT',\n  'IS_ROLE_IN_SESSION',\n  'IS_TIME',\n  'IS_TIMESTAMP_LTZ',\n  'IS_TIMESTAMP_NTZ',\n  'IS_TIMESTAMP_TZ',\n  'JAROWINKLER_SIMILARITY',\n  'JSON_EXTRACT_PATH_TEXT',\n  'KURTOSIS',\n  'LAG',\n  'LAST_DAY',\n  'LAST_QUERY_ID',\n  'LAST_TRANSACTION',\n  'LAST_VALUE',\n  'LEAD',\n  'LEAST',\n  'LEFT',\n  'LENGTH',\n  'LEN',\n  'LIKE',\n  'LIKE ALL',\n  'LIKE ANY',\n  'LISTAGG',\n  'LN',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOG',\n  'LOGIN_HISTORY',\n  'LOGIN_HISTORY_BY_USER',\n  'LOWER',\n  'LPAD',\n  'LTRIM',\n  'MATERIALIZED_VIEW_REFRESH_HISTORY',\n  'MD5',\n  'MD5_HEX',\n  'MD5_BINARY',\n  'MD5_NUMBER — Obsoleted',\n  'MD5_NUMBER_LOWER64',\n  'MD5_NUMBER_UPPER64',\n  'MEDIAN',\n  'MIN',\n  'MAX',\n  'MINHASH',\n  'MINHASH_COMBINE',\n  'MOD',\n  'MODE',\n  'MONTHNAME',\n  'MONTHS_BETWEEN',\n  'NEXT_DAY',\n  'NORMAL',\n  'NTH_VALUE',\n  'NTILE',\n  'NULLIF',\n  'NULLIFZERO',\n  'NVL',\n  'NVL2',\n  'OBJECT_AGG',\n  'OBJECT_CONSTRUCT',\n  'OBJECT_CONSTRUCT_KEEP_NULL',\n  'OBJECT_DELETE',\n  'OBJECT_INSERT',\n  'OBJECT_KEYS',\n  'OBJECT_PICK',\n  'OCTET_LENGTH',\n  'PARSE_IP',\n  'PARSE_JSON',\n  'PARSE_URL',\n  'PARSE_XML',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PI',\n  'PIPE_USAGE_HISTORY',\n  'POLICY_CONTEXT',\n  'POLICY_REFERENCES',\n  'POSITION',\n  'POW',\n  'POWER',\n  'PREVIOUS_DAY',\n  'QUERY_ACCELERATION_HISTORY',\n  'QUERY_HISTORY',\n  'QUERY_HISTORY_BY_SESSION',\n  'QUERY_HISTORY_BY_USER',\n  'QUERY_HISTORY_BY_WAREHOUSE',\n  'RADIANS',\n  'RANDOM',\n  'RANDSTR',\n  'RANK',\n  'RATIO_TO_REPORT',\n  'REGEXP',\n  'REGEXP_COUNT',\n  'REGEXP_INSTR',\n  'REGEXP_LIKE',\n  'REGEXP_REPLACE',\n  'REGEXP_SUBSTR',\n  'REGEXP_SUBSTR_ALL',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'REGR_VALX',\n  'REGR_VALY',\n  'REPEAT',\n  'REPLACE',\n  'REPLICATION_GROUP_REFRESH_HISTORY',\n  'REPLICATION_GROUP_REFRESH_PROGRESS',\n  'REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB',\n  'REPLICATION_GROUP_USAGE_HISTORY',\n  'REPLICATION_USAGE_HISTORY',\n  'REST_EVENT_HISTORY',\n  'RESULT_SCAN',\n  'REVERSE',\n  'RIGHT',\n  'RLIKE',\n  'ROUND',\n  'ROW_NUMBER',\n  'RPAD',\n  'RTRIM',\n  'RTRIMMED_LENGTH',\n  'SEARCH_OPTIMIZATION_HISTORY',\n  'SEQ1',\n  'SEQ2',\n  'SEQ4',\n  'SEQ8',\n  'SERVERLESS_TASK_HISTORY',\n  'SHA1',\n  'SHA1_HEX',\n  'SHA1_BINARY',\n  'SHA2',\n  'SHA2_HEX',\n  'SHA2_BINARY',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SKEW',\n  'SOUNDEX',\n  'SPACE',\n  'SPLIT',\n  'SPLIT_PART',\n  'SPLIT_TO_TABLE',\n  'SQRT',\n  'SQUARE',\n  'ST_AREA',\n  'ST_ASEWKB',\n  'ST_ASEWKT',\n  'ST_ASGEOJSON',\n  'ST_ASWKB',\n  'ST_ASBINARY',\n  'ST_ASWKT',\n  'ST_ASTEXT',\n  'ST_AZIMUTH',\n  'ST_CENTROID',\n  'ST_COLLECT',\n  'ST_CONTAINS',\n  'ST_COVEREDBY',\n  'ST_COVERS',\n  'ST_DIFFERENCE',\n  'ST_DIMENSION',\n  'ST_DISJOINT',\n  'ST_DISTANCE',\n  'ST_DWITHIN',\n  'ST_ENDPOINT',\n  'ST_ENVELOPE',\n  'ST_GEOGFROMGEOHASH',\n  'ST_GEOGPOINTFROMGEOHASH',\n  'ST_GEOGRAPHYFROMWKB',\n  'ST_GEOGRAPHYFROMWKT',\n  'ST_GEOHASH',\n  'ST_GEOMETRYFROMWKB',\n  'ST_GEOMETRYFROMWKT',\n  'ST_HAUSDORFFDISTANCE',\n  'ST_INTERSECTION',\n  'ST_INTERSECTS',\n  'ST_LENGTH',\n  'ST_MAKEGEOMPOINT',\n  'ST_GEOM_POINT',\n  'ST_MAKELINE',\n  'ST_MAKEPOINT',\n  'ST_POINT',\n  'ST_MAKEPOLYGON',\n  'ST_POLYGON',\n  'ST_NPOINTS',\n  'ST_NUMPOINTS',\n  'ST_PERIMETER',\n  'ST_POINTN',\n  'ST_SETSRID',\n  'ST_SIMPLIFY',\n  'ST_SRID',\n  'ST_STARTPOINT',\n  'ST_SYMDIFFERENCE',\n  'ST_UNION',\n  'ST_WITHIN',\n  'ST_X',\n  'ST_XMAX',\n  'ST_XMIN',\n  'ST_Y',\n  'ST_YMAX',\n  'ST_YMIN',\n  'STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY',\n  'STAGE_STORAGE_USAGE_HISTORY',\n  'STARTSWITH',\n  'STDDEV',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STRIP_NULL_VALUE',\n  'STRTOK',\n  'STRTOK_SPLIT_TO_TABLE',\n  'STRTOK_TO_ARRAY',\n  'SUBSTR',\n  'SUBSTRING',\n  'SUM',\n  'SYSDATE',\n  'SYSTEM$ABORT_SESSION',\n  'SYSTEM$ABORT_TRANSACTION',\n  'SYSTEM$AUTHORIZE_PRIVATELINK',\n  'SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS',\n  'SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS',\n  'SYSTEM$CANCEL_ALL_QUERIES',\n  'SYSTEM$CANCEL_QUERY',\n  'SYSTEM$CLUSTERING_DEPTH',\n  'SYSTEM$CLUSTERING_INFORMATION',\n  'SYSTEM$CLUSTERING_RATIO ',\n  'SYSTEM$CURRENT_USER_TASK_NAME',\n  'SYSTEM$DATABASE_REFRESH_HISTORY ',\n  'SYSTEM$DATABASE_REFRESH_PROGRESS',\n  'SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ',\n  'SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE',\n  'SYSTEM$DISABLE_DATABASE_REPLICATION',\n  'SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE',\n  'SYSTEM$ESTIMATE_QUERY_ACCELERATION',\n  'SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS',\n  'SYSTEM$EXPLAIN_JSON_TO_TEXT',\n  'SYSTEM$EXPLAIN_PLAN_JSON',\n  'SYSTEM$EXTERNAL_TABLE_PIPE_STATUS',\n  'SYSTEM$GENERATE_SAML_CSR',\n  'SYSTEM$GENERATE_SCIM_ACCESS_TOKEN',\n  'SYSTEM$GET_AWS_SNS_IAM_POLICY',\n  'SYSTEM$GET_PREDECESSOR_RETURN_VALUE',\n  'SYSTEM$GET_PRIVATELINK',\n  'SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS',\n  'SYSTEM$GET_PRIVATELINK_CONFIG',\n  'SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO',\n  'SYSTEM$GET_TAG',\n  'SYSTEM$GET_TAG_ALLOWED_VALUES',\n  'SYSTEM$GET_TAG_ON_CURRENT_COLUMN',\n  'SYSTEM$GET_TAG_ON_CURRENT_TABLE',\n  'SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER',\n  'SYSTEM$LAST_CHANGE_COMMIT_TIME',\n  'SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME',\n  'SYSTEM$MIGRATE_SAML_IDP_REGISTRATION',\n  'SYSTEM$PIPE_FORCE_RESUME',\n  'SYSTEM$PIPE_STATUS',\n  'SYSTEM$REVOKE_PRIVATELINK',\n  'SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS',\n  'SYSTEM$SET_RETURN_VALUE',\n  'SYSTEM$SHOW_OAUTH_CLIENT_SECRETS',\n  'SYSTEM$STREAM_GET_TABLE_TIMESTAMP',\n  'SYSTEM$STREAM_HAS_DATA',\n  'SYSTEM$TASK_DEPENDENTS_ENABLE',\n  'SYSTEM$TYPEOF',\n  'SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS',\n  'SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN',\n  'SYSTEM$WAIT',\n  'SYSTEM$WHITELIST',\n  'SYSTEM$WHITELIST_PRIVATELINK',\n  'TAG_REFERENCES',\n  'TAG_REFERENCES_ALL_COLUMNS',\n  'TAG_REFERENCES_WITH_LINEAGE',\n  'TAN',\n  'TANH',\n  'TASK_DEPENDENTS',\n  'TASK_HISTORY',\n  'TIME_FROM_PARTS',\n  'TIME_SLICE',\n  'TIMEADD',\n  'TIMEDIFF',\n  'TIMESTAMP_FROM_PARTS',\n  'TIMESTAMPADD',\n  'TIMESTAMPDIFF',\n  'TO_ARRAY',\n  'TO_BINARY',\n  'TO_BOOLEAN',\n  'TO_CHAR',\n  'TO_VARCHAR',\n  'TO_DATE',\n  'DATE',\n  'TO_DECIMAL',\n  'TO_NUMBER',\n  'TO_NUMERIC',\n  'TO_DOUBLE',\n  'TO_GEOGRAPHY',\n  'TO_GEOMETRY',\n  'TO_JSON',\n  'TO_OBJECT',\n  'TO_TIME',\n  'TIME',\n  'TO_TIMESTAMP',\n  'TO_TIMESTAMP_LTZ',\n  'TO_TIMESTAMP_NTZ',\n  'TO_TIMESTAMP_TZ',\n  'TO_VARIANT',\n  'TO_XML',\n  'TRANSLATE',\n  'TRIM',\n  'TRUNCATE',\n  'TRUNC',\n  'TRUNC',\n  'TRY_BASE64_DECODE_BINARY',\n  'TRY_BASE64_DECODE_STRING',\n  'TRY_CAST',\n  'TRY_HEX_DECODE_BINARY',\n  'TRY_HEX_DECODE_STRING',\n  'TRY_PARSE_JSON',\n  'TRY_TO_BINARY',\n  'TRY_TO_BOOLEAN',\n  'TRY_TO_DATE',\n  'TRY_TO_DECIMAL',\n  'TRY_TO_NUMBER',\n  'TRY_TO_NUMERIC',\n  'TRY_TO_DOUBLE',\n  'TRY_TO_GEOGRAPHY',\n  'TRY_TO_GEOMETRY',\n  'TRY_TO_TIME',\n  'TRY_TO_TIMESTAMP',\n  'TRY_TO_TIMESTAMP_LTZ',\n  'TRY_TO_TIMESTAMP_NTZ',\n  'TRY_TO_TIMESTAMP_TZ',\n  'TYPEOF',\n  'UNICODE',\n  'UNIFORM',\n  'UPPER',\n  'UUID_STRING',\n  'VALIDATE',\n  'VALIDATE_PIPE_LOAD',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARIANCE',\n  'VARIANCE_SAMP',\n  'VARIANCE_POP',\n  'WAREHOUSE_LOAD_HISTORY',\n  'WAREHOUSE_METERING_HISTORY',\n  'WIDTH_BUCKET',\n  'XMLGET',\n  'YEAR',\n  'YEAROFWEEK',\n  'YEAROFWEEKISO',\n  'DAY',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFWEEKISO',\n  'DAYOFYEAR',\n  'WEEK',\n  'WEEK',\n  'WEEKOFYEAR',\n  'WEEKISO',\n  'MONTH',\n  'QUARTER',\n  'ZEROIFNULL',\n  'ZIPF',\n];\n","export const keywords: string[] = [\n  // https://docs.snowflake.com/en/sql-reference/reserved-keywords.html\n  //\n  // run in console on this page: $x('//tbody/tr/*[1]/p/text()').map(x => x.nodeValue)\n  'ACCOUNT',\n  'ALL',\n  'ALTER',\n  'AND',\n  'ANY',\n  'AS',\n  'BETWEEN',\n  'BY',\n  'CASE',\n  'CAST',\n  'CHECK',\n  'COLUMN',\n  'CONNECT',\n  'CONNECTION',\n  'CONSTRAINT',\n  'CREATE',\n  'CROSS',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'DATABASE',\n  'DELETE',\n  'DISTINCT',\n  'DROP',\n  'ELSE',\n  'EXISTS',\n  'FALSE',\n  'FOLLOWING',\n  'FOR',\n  'FROM',\n  'FULL',\n  'GRANT',\n  'GROUP',\n  'GSCLUSTER',\n  'HAVING',\n  'ILIKE',\n  'IN',\n  'INCREMENT',\n  'INNER',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'ISSUE',\n  'JOIN',\n  'LATERAL',\n  'LEFT',\n  'LIKE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'MINUS',\n  'NATURAL',\n  'NOT',\n  'NULL',\n  'OF',\n  'ON',\n  'OR',\n  'ORDER',\n  'ORGANIZATION',\n  'QUALIFY',\n  'REGEXP',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'SAMPLE',\n  'SCHEMA',\n  'SELECT',\n  'SET',\n  'SOME',\n  'START',\n  'TABLE',\n  'TABLESAMPLE',\n  'THEN',\n  'TO',\n  'TRIGGER',\n  'TRUE',\n  'TRY_CAST',\n  'UNION',\n  'UNIQUE',\n  'UPDATE',\n  'USING',\n  'VALUES',\n  'VIEW',\n  'WHEN',\n  'WHENEVER',\n  'WHERE',\n  'WITH',\n\n  // These are definitely keywords, but haven't found a definite list in the docs\n  'COMMENT',\n];\n\nexport const dataTypes: string[] = [\n  'NUMBER',\n  'DECIMAL',\n  'NUMERIC',\n  'INT',\n  'INTEGER',\n  'BIGINT',\n  'SMALLINT',\n  'TINYINT',\n  'BYTEINT',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'DOUBLE',\n  'DOUBLE PRECISION',\n  'REAL',\n  'VARCHAR',\n  'CHAR',\n  'CHARACTER',\n  'STRING',\n  'TEXT',\n  'BINARY',\n  'VARBINARY',\n  'BOOLEAN',\n  'DATE',\n  'DATETIME',\n  'TIME',\n  'TIMESTAMP',\n  'TIMESTAMP_LTZ',\n  'TIMESTAMP_NTZ',\n  'TIMESTAMP',\n  'TIMESTAMP_TZ',\n  'VARIANT',\n  'OBJECT',\n  'ARRAY',\n  'GEOGRAPHY',\n  'GEOMETRY',\n];\n","import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { functions } from './snowflake.functions.js';\nimport { dataTypes, keywords } from './snowflake.keywords.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER BY',\n  'QUALIFY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH [FIRST | NEXT]',\n  // Data manipulation\n  // - insert:\n  'INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]',\n  '{THEN | ELSE} INTO',\n  'VALUES',\n  // - update:\n  'SET',\n\n  'CLUSTER BY',\n  '[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}',\n  'COPY GRANTS',\n  'USING TEMPLATE',\n  'MERGE INTO',\n  'WHEN MATCHED [AND]',\n  'THEN {UPDATE SET | DELETE}',\n  'WHEN NOT MATCHED THEN INSERT',\n]);\n\nconst standardOnelineClauses = expandPhrases([\n  'CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]',\n]);\n\nconst tabularOnelineClauses = expandPhrases([\n  // - create:\n  'CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]',\n  // - update:\n  'UPDATE',\n  // - delete:\n  'DELETE FROM',\n  // - drop table:\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS]',\n  'RENAME TO',\n  'SWAP WITH',\n  '[SUSPEND | RESUME] RECLUSTER',\n  'DROP CLUSTERING KEY',\n  'ADD [COLUMN]',\n  'RENAME COLUMN',\n  '{ALTER | MODIFY} [COLUMN]',\n  'DROP [COLUMN]',\n  '{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]',\n  'RENAME CONSTRAINT',\n  '{ADD | DROP} SEARCH OPTIMIZATION',\n  '{SET | UNSET} TAG', // Actually TAG is optional, but that conflicts with UPDATE..SET statement\n  '{ADD | DROP} ROW ACCESS POLICY',\n  'DROP ALL ROW ACCESS POLICIES',\n  '{SET | DROP} DEFAULT', // for alter column\n  '{SET | DROP} NOT NULL', // for alter column\n  'SET DATA TYPE', // for alter column\n  'UNSET COMMENT', // for alter column\n  '{SET | UNSET} MASKING POLICY', // for alter column\n  // - truncate:\n  'TRUNCATE [TABLE] [IF EXISTS]',\n  // other\n  // https://docs.snowflake.com/en/sql-reference/sql-all.html\n  //\n  // 1. run in console on this page: $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue)\n  // 2. delete all lines that contain a sting like '(.*)', they are already covered in the list\n  // 3. delete all lines that contain a sting like '<.*>', they are already covered in the list\n  // 4. delete all lines that contain '…', they are part of a regex statement that can't be covered here\n  // 5. Manually add 'COPY INTO'\n  // 6. Remove all lines that are already in `reservedClauses`\n  //\n  // Steps 1-4 can be combined by the following script in the developer console:\n  // $x('//tbody/tr/*[1]//a/span/text()').map(x => x.nodeValue) // Step 1\n  //   filter(x => !x.match(/\\(.*\\)/) && !x.match(/…/) && !x.match(/<.*>/)) // Step 2-4\n  'ALTER ACCOUNT',\n  'ALTER API INTEGRATION',\n  'ALTER CONNECTION',\n  'ALTER DATABASE',\n  'ALTER EXTERNAL TABLE',\n  'ALTER FAILOVER GROUP',\n  'ALTER FILE FORMAT',\n  'ALTER FUNCTION',\n  'ALTER INTEGRATION',\n  'ALTER MASKING POLICY',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER NETWORK POLICY',\n  'ALTER NOTIFICATION INTEGRATION',\n  'ALTER PIPE',\n  'ALTER PROCEDURE',\n  'ALTER REPLICATION GROUP',\n  'ALTER RESOURCE MONITOR',\n  'ALTER ROLE',\n  'ALTER ROW ACCESS POLICY',\n  'ALTER SCHEMA',\n  'ALTER SECURITY INTEGRATION',\n  'ALTER SEQUENCE',\n  'ALTER SESSION',\n  'ALTER SESSION POLICY',\n  'ALTER SHARE',\n  'ALTER STAGE',\n  'ALTER STORAGE INTEGRATION',\n  'ALTER STREAM',\n  'ALTER TAG',\n  'ALTER TASK',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ALTER WAREHOUSE',\n  'BEGIN',\n  'CALL',\n  'COMMIT',\n  'COPY INTO',\n  'CREATE ACCOUNT',\n  'CREATE API INTEGRATION',\n  'CREATE CONNECTION',\n  'CREATE DATABASE',\n  'CREATE EXTERNAL FUNCTION',\n  'CREATE EXTERNAL TABLE',\n  'CREATE FAILOVER GROUP',\n  'CREATE FILE FORMAT',\n  'CREATE FUNCTION',\n  'CREATE INTEGRATION',\n  'CREATE MANAGED ACCOUNT',\n  'CREATE MASKING POLICY',\n  'CREATE MATERIALIZED VIEW',\n  'CREATE NETWORK POLICY',\n  'CREATE NOTIFICATION INTEGRATION',\n  'CREATE PIPE',\n  'CREATE PROCEDURE',\n  'CREATE REPLICATION GROUP',\n  'CREATE RESOURCE MONITOR',\n  'CREATE ROLE',\n  'CREATE ROW ACCESS POLICY',\n  'CREATE SCHEMA',\n  'CREATE SECURITY INTEGRATION',\n  'CREATE SEQUENCE',\n  'CREATE SESSION POLICY',\n  'CREATE SHARE',\n  'CREATE STAGE',\n  'CREATE STORAGE INTEGRATION',\n  'CREATE STREAM',\n  'CREATE TAG',\n  'CREATE TASK',\n  'CREATE USER',\n  'CREATE WAREHOUSE',\n  'DELETE',\n  'DESCRIBE DATABASE',\n  'DESCRIBE EXTERNAL TABLE',\n  'DESCRIBE FILE FORMAT',\n  'DESCRIBE FUNCTION',\n  'DESCRIBE INTEGRATION',\n  'DESCRIBE MASKING POLICY',\n  'DESCRIBE MATERIALIZED VIEW',\n  'DESCRIBE NETWORK POLICY',\n  'DESCRIBE PIPE',\n  'DESCRIBE PROCEDURE',\n  'DESCRIBE RESULT',\n  'DESCRIBE ROW ACCESS POLICY',\n  'DESCRIBE SCHEMA',\n  'DESCRIBE SEQUENCE',\n  'DESCRIBE SESSION POLICY',\n  'DESCRIBE SHARE',\n  'DESCRIBE STAGE',\n  'DESCRIBE STREAM',\n  'DESCRIBE TABLE',\n  'DESCRIBE TASK',\n  'DESCRIBE TRANSACTION',\n  'DESCRIBE USER',\n  'DESCRIBE VIEW',\n  'DESCRIBE WAREHOUSE',\n  'DROP CONNECTION',\n  'DROP DATABASE',\n  'DROP EXTERNAL TABLE',\n  'DROP FAILOVER GROUP',\n  'DROP FILE FORMAT',\n  'DROP FUNCTION',\n  'DROP INTEGRATION',\n  'DROP MANAGED ACCOUNT',\n  'DROP MASKING POLICY',\n  'DROP MATERIALIZED VIEW',\n  'DROP NETWORK POLICY',\n  'DROP PIPE',\n  'DROP PROCEDURE',\n  'DROP REPLICATION GROUP',\n  'DROP RESOURCE MONITOR',\n  'DROP ROLE',\n  'DROP ROW ACCESS POLICY',\n  'DROP SCHEMA',\n  'DROP SEQUENCE',\n  'DROP SESSION POLICY',\n  'DROP SHARE',\n  'DROP STAGE',\n  'DROP STREAM',\n  'DROP TAG',\n  'DROP TASK',\n  'DROP USER',\n  'DROP VIEW',\n  'DROP WAREHOUSE',\n  'EXECUTE IMMEDIATE',\n  'EXECUTE TASK',\n  'EXPLAIN',\n  'GET',\n  'GRANT OWNERSHIP',\n  'GRANT ROLE',\n  'INSERT',\n  'LIST',\n  'MERGE',\n  'PUT',\n  'REMOVE',\n  'REVOKE ROLE',\n  'ROLLBACK',\n  'SHOW COLUMNS',\n  'SHOW CONNECTIONS',\n  'SHOW DATABASES',\n  'SHOW DATABASES IN FAILOVER GROUP',\n  'SHOW DATABASES IN REPLICATION GROUP',\n  'SHOW DELEGATED AUTHORIZATIONS',\n  'SHOW EXTERNAL FUNCTIONS',\n  'SHOW EXTERNAL TABLES',\n  'SHOW FAILOVER GROUPS',\n  'SHOW FILE FORMATS',\n  'SHOW FUNCTIONS',\n  'SHOW GLOBAL ACCOUNTS',\n  'SHOW GRANTS',\n  'SHOW INTEGRATIONS',\n  'SHOW LOCKS',\n  'SHOW MANAGED ACCOUNTS',\n  'SHOW MASKING POLICIES',\n  'SHOW MATERIALIZED VIEWS',\n  'SHOW NETWORK POLICIES',\n  'SHOW OBJECTS',\n  'SHOW ORGANIZATION ACCOUNTS',\n  'SHOW PARAMETERS',\n  'SHOW PIPES',\n  'SHOW PRIMARY KEYS',\n  'SHOW PROCEDURES',\n  'SHOW REGIONS',\n  'SHOW REPLICATION ACCOUNTS',\n  'SHOW REPLICATION DATABASES',\n  'SHOW REPLICATION GROUPS',\n  'SHOW RESOURCE MONITORS',\n  'SHOW ROLES',\n  'SHOW ROW ACCESS POLICIES',\n  'SHOW SCHEMAS',\n  'SHOW SEQUENCES',\n  'SHOW SESSION POLICIES',\n  'SHOW SHARES',\n  'SHOW SHARES IN FAILOVER GROUP',\n  'SHOW SHARES IN REPLICATION GROUP',\n  'SHOW STAGES',\n  'SHOW STREAMS',\n  'SHOW TABLES',\n  'SHOW TAGS',\n  'SHOW TASKS',\n  'SHOW TRANSACTIONS',\n  'SHOW USER FUNCTIONS',\n  'SHOW USERS',\n  'SHOW VARIABLES',\n  'SHOW VIEWS',\n  'SHOW WAREHOUSES',\n  'TRUNCATE MATERIALIZED VIEW',\n  'UNDROP DATABASE',\n  'UNDROP SCHEMA',\n  'UNDROP TABLE',\n  'UNDROP TAG',\n  'UNSET',\n  'USE DATABASE',\n  'USE ROLE',\n  'USE SCHEMA',\n  'USE SECONDARY ROLES',\n  'USE WAREHOUSE',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'MINUS', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  '[INNER] JOIN',\n  '[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{CROSS | NATURAL} JOIN',\n]);\n\nconst reservedPhrases = expandPhrases([\n  '{ROWS | RANGE} BETWEEN',\n  'ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]',\n]);\n\nexport const snowflake: DialectOptions = {\n  name: 'snowflake',\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...standardOnelineClauses, ...tabularOnelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    reservedKeywords: keywords,\n    reservedDataTypes: dataTypes,\n    reservedFunctionNames: functions,\n    stringTypes: ['$$', `''-qq-bs`],\n    identTypes: ['\"\"-qq'],\n    variableTypes: [\n      // for accessing columns at certain positons in the table\n      { regex: '[$][1-9]\\\\d*' },\n      // identifier style syntax\n      { regex: '[$][_a-zA-Z][_a-zA-Z0-9$]*' },\n    ],\n    extraParens: ['[]'],\n    identChars: { rest: '$' },\n    lineCommentTypes: ['--', '//'],\n    operators: [\n      // Modulo\n      '%',\n      // Type cast\n      '::',\n      // String concat\n      '||',\n      // Generators: https://docs.snowflake.com/en/sql-reference/functions/generator.html#generator\n      '=>',\n      // Assignment https://docs.snowflake.com/en/sql-reference/snowflake-scripting/let\n      ':=',\n      // Lambda: https://docs.snowflake.com/en/user-guide/querying-semistructured#lambda-expressions\n      '->',\n    ],\n    propertyAccessOperators: [':'],\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['::'],\n    onelineClauses: [...standardOnelineClauses, ...tabularOnelineClauses],\n    tabularOnelineClauses,\n  },\n};\n","export const dedupe = (arr: string[]) => [...new Set(arr)];\n\n// Last element from array\nexport const last = <T>(arr: T[]): T | undefined => arr[arr.length - 1];\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings: string[]) =>\n  strings.sort((a, b) => b.length - a.length || a.localeCompare(b));\n\n/** Get length of longest string in list of strings */\nexport const maxLength = (strings: string[]) =>\n  strings.reduce((max, cur) => Math.max(max, cur.length), 0);\n\n// replaces long whitespace sequences with just one space\nexport const equalizeWhitespace = (s: string) => s.replace(/\\s+/gu, ' ');\n\n// True when string contains multiple lines\nexport const isMultiline = (text: string): boolean => /\\n/.test(text);\n\n// Given a type and a field name, returns a type where this field is optional\n//\n// For example, these two type definitions are equivalent:\n//\n//   type Foo = Optional<{ foo: string, bar: number }, 'foo'>;\n//   type Foo = { foo?: string, bar: number };\n//\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n","import { PrefixedQuoteType } from './TokenizerOptions.js';\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\nexport const WHITESPACE_REGEX = /\\s+/uy;\n\nexport const patternToRegex = (pattern: string): RegExp => new RegExp(`(?:${pattern})`, 'uy');\n\n// Converts \"ab\" to \"[Aa][Bb]\"\nexport const toCaseInsensitivePattern = (prefix: string): string =>\n  prefix\n    .split('')\n    .map(char => (/ /gu.test(char) ? '\\\\s+' : `[${char.toUpperCase()}${char.toLowerCase()}]`))\n    .join('');\n\nexport const withDashes = (pattern: string): string => pattern + '(?:-' + pattern + ')*';\n\n// Converts [\"a\", \"b\"] to \"(?:[Aa]|[Bb]|)\" or \"(?:[Aa]|[Bb])\" when required = true\nexport const prefixesPattern = ({ prefixes, requirePrefix }: PrefixedQuoteType): string =>\n  `(?:${prefixes.map(toCaseInsensitivePattern).join('|')}${requirePrefix ? '' : '|'})`;\n","import { sortByLengthDesc } from '../utils.js';\n\nimport { IdentChars, QuoteType, VariableType } from './TokenizerOptions.js';\nimport { escapeRegExp, patternToRegex, prefixesPattern, withDashes } from './regexUtil.js';\n\n/**\n * Builds a RegExp for valid line comments in a SQL dialect\n * @param {string[]} lineCommentTypes - list of character strings that denote line comments\n */\nexport const lineComment = (lineCommentTypes: string[]) =>\n  new RegExp(`(?:${lineCommentTypes.map(escapeRegExp).join('|')}).*?(?=\\r\\n|\\r|\\n|$)`, 'uy');\n\n/**\n * Builds a RegExp for matching either open- or close-parenthesis patterns\n */\nexport const parenthesis = (kind: 'open' | 'close', extraParens: ('[]' | '{}')[] = []): RegExp => {\n  const index = kind === 'open' ? 0 : 1;\n  const parens = ['()', ...extraParens].map(pair => pair[index]);\n  return patternToRegex(parens.map(escapeRegExp).join('|'));\n};\n\n/**\n * Builds a RegExp containing all operators for a SQL dialect\n */\nexport const operator = (operators: string[]) =>\n  patternToRegex(`${sortByLengthDesc(operators).map(escapeRegExp).join('|')}`);\n\n// Negative lookahead to avoid matching a keyword that's actually part of identifier,\n// which can happen when identifier allows word-boundary characters inside it.\n//\n// For example \"SELECT$ME\" should be tokenized as:\n// - [\"SELECT$ME\"] when $ is allowed inside identifiers\n// - [\"SELECT\", \"$\", \"ME\"] when $ can't be part of identifiers.\nconst rejectIdentCharsPattern = ({ rest, dashes }: IdentChars): string =>\n  rest || dashes ? `(?![${rest || ''}${dashes ? '-' : ''}])` : '';\n\n/**\n * Builds a RegExp for all Reserved Keywords in a SQL dialect\n */\nexport const reservedWord = (reservedKeywords: string[], identChars: IdentChars = {}): RegExp => {\n  if (reservedKeywords.length === 0) {\n    return /^\\b$/u;\n  }\n\n  const avoidIdentChars = rejectIdentCharsPattern(identChars);\n\n  const reservedKeywordsPattern = sortByLengthDesc(reservedKeywords)\n    .map(escapeRegExp)\n    .join('|')\n    .replace(/ /gu, '\\\\s+');\n\n  return new RegExp(`(?:${reservedKeywordsPattern})${avoidIdentChars}\\\\b`, 'iuy');\n};\n\n/**\n * Builds a RegExp for parameter placeholder patterns\n * @param {string[]} paramTypes - list of strings that denote placeholder types\n * @param {string} pattern - string that denotes placeholder pattern\n */\nexport const parameter = (paramTypes: string[], pattern: string): RegExp | undefined => {\n  if (!paramTypes.length) {\n    return undefined;\n  }\n  const typesRegex = paramTypes.map(escapeRegExp).join('|');\n\n  return patternToRegex(`(?:${typesRegex})(?:${pattern})`);\n};\n\nconst buildQStringPatterns = () => {\n  const specialDelimiterMap = {\n    '<': '>',\n    '[': ']',\n    '(': ')',\n    '{': '}',\n  };\n\n  // base pattern for special delimiters, left must correspond with right\n  const singlePattern = \"{left}(?:(?!{right}').)*?{right}\";\n\n  // replace {left} and {right} with delimiters, collect as array\n  const patternList = Object.entries(specialDelimiterMap).map(([left, right]) =>\n    singlePattern.replace(/{left}/g, escapeRegExp(left)).replace(/{right}/g, escapeRegExp(right))\n  );\n\n  const specialDelimiters = escapeRegExp(Object.keys(specialDelimiterMap).join(''));\n  // standard pattern for common delimiters, ignores special delimiters\n  const standardDelimiterPattern = String.raw`(?<tag>[^\\s${specialDelimiters}])(?:(?!\\k<tag>').)*?\\k<tag>`;\n\n  // constructs final pattern by joining all cases\n  const qStringPattern = `[Qq]'(?:${standardDelimiterPattern}|${patternList.join('|')})'`;\n\n  return qStringPattern;\n};\n\n// Regex patterns for all supported quote styles.\n//\n// Most of them have a single escaping-style built in,\n// but \"\" and '' support multiple versions of escapes,\n// which must be selected with suffixes: -qq, -bs, -qq-bs, -raw\nexport const quotePatterns = {\n  // - backtick quoted (using `` to escape)\n  '``': '(?:`[^`]*`)+',\n  // - Transact-SQL square bracket quoted (using ]] to escape)\n  '[]': String.raw`(?:\\[[^\\]]*\\])(?:\\][^\\]]*\\])*`,\n  // double-quoted\n  '\"\"-qq': String.raw`(?:\"[^\"]*\")+`, // with repeated quote escapes\n  '\"\"-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")`, // with backslash escapes\n  '\"\"-qq-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")+`, // with repeated quote or backslash escapes\n  '\"\"-raw': String.raw`(?:\"[^\"]*\")`, // no escaping\n  // single-quoted\n  \"''-qq\": String.raw`(?:'[^']*')+`, // with repeated quote escapes\n  \"''-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')`, // with backslash escapes\n  \"''-qq-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')+`, // with repeated quote or backslash escapes\n  \"''-raw\": String.raw`(?:'[^']*')`, // no escaping\n  // PostgreSQL dollar-quoted\n  '$$': String.raw`(?<tag>\\$\\w*\\$)[\\s\\S]*?\\k<tag>`,\n  // BigQuery '''triple-quoted''' (using \\' to escape)\n  \"'''..'''\": String.raw`'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?'''`,\n  // BigQuery \"\"\"triple-quoted\"\"\" (using \\\" to escape)\n  '\"\"\"..\"\"\"': String.raw`\"\"\"[^\\\\]*?(?:\\\\.[^\\\\]*?)*?\"\"\"`,\n  // Hive and Spark variables: ${name}\n  '{}': String.raw`(?:\\{[^\\}]*\\})`,\n  // Oracle q'' strings: q'<text>' q'|text|' ...\n  \"q''\": buildQStringPatterns(),\n};\n\nconst singleQuotePattern = (quoteTypes: QuoteType): string => {\n  if (typeof quoteTypes === 'string') {\n    return quotePatterns[quoteTypes];\n  } else if ('regex' in quoteTypes) {\n    return quoteTypes.regex;\n  } else {\n    return prefixesPattern(quoteTypes) + quotePatterns[quoteTypes.quote];\n  }\n};\n\n/** Builds a RegExp for matching variables */\nexport const variable = (varTypes: VariableType[]): RegExp =>\n  patternToRegex(\n    varTypes\n      .map(varType => ('regex' in varType ? varType.regex : singleQuotePattern(varType)))\n      .join('|')\n  );\n\n/** Builds a quote-delimited pattern for matching all given quote types */\nexport const stringPattern = (quoteTypes: QuoteType[]): string =>\n  quoteTypes.map(singleQuotePattern).join('|');\n\n/** Builds a RegExp for matching quote-delimited patterns */\nexport const string = (quoteTypes: QuoteType[]): RegExp =>\n  patternToRegex(stringPattern(quoteTypes));\n\n/**\n * Builds a RegExp for valid identifiers in a SQL dialect\n */\nexport const identifier = (specialChars: IdentChars = {}): RegExp =>\n  patternToRegex(identifierPattern(specialChars));\n\n/**\n * Builds a RegExp string for valid identifiers in a SQL dialect\n */\nexport const identifierPattern = ({\n  first,\n  rest,\n  dashes,\n  allowFirstCharNumber,\n}: IdentChars = {}): string => {\n  // Unicode letters, diacritical marks and underscore\n  const letter = '\\\\p{Alphabetic}\\\\p{Mark}_';\n  // Numbers 0..9, plus various unicode numbers\n  const number = '\\\\p{Decimal_Number}';\n\n  const firstChars = escapeRegExp(first ?? '');\n  const restChars = escapeRegExp(rest ?? '');\n\n  const pattern = allowFirstCharNumber\n    ? `[${letter}${number}${firstChars}][${letter}${number}${restChars}]*`\n    : `[${letter}${firstChars}][${letter}${number}${restChars}]*`;\n\n  return dashes ? withDashes(pattern) : pattern;\n};\n","/**\n * Determines line and column number of character index in source code.\n */\nexport function lineColFromIndex(source: string, index: number): LineCol {\n  const lines = source.slice(0, index).split(/\\n/);\n  return { line: lines.length, col: lines[lines.length - 1].length + 1 };\n}\n\nexport interface LineCol {\n  line: number;\n  col: number;\n}\n","import { Token, TokenType } from './token.js';\nimport { lineColFromIndex } from './lineColFromIndex.js';\nimport { WHITESPACE_REGEX } from './regexUtil.js';\n\nexport interface RegExpLike {\n  lastIndex: number;\n  exec(input: string): string[] | null;\n}\n\nexport interface TokenRule {\n  type: TokenType;\n  // Normally a RegExp object.\n  // But to allow for more complex matching logic,\n  // an object can be given that implements a RegExpLike interface.\n  regex: RegExpLike;\n  // Called with the raw string that was matched\n  text?: (rawText: string) => string;\n  key?: (rawText: string) => string;\n}\n\nexport default class TokenizerEngine {\n  private input = ''; // The input SQL string to process\n  private index = 0; // Current position in string\n\n  constructor(private rules: TokenRule[], private dialectName: string) {}\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  public tokenize(input: string): Token[] {\n    this.input = input;\n    this.index = 0;\n    const tokens: Token[] = [];\n    let token: Token | undefined;\n\n    // Keep processing the string until end is reached\n    while (this.index < this.input.length) {\n      // skip any preceding whitespace\n      const precedingWhitespace = this.getWhitespace();\n\n      if (this.index < this.input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken();\n        if (!token) {\n          throw this.createParseError();\n        }\n\n        tokens.push({ ...token, precedingWhitespace });\n      }\n    }\n    return tokens;\n  }\n\n  private createParseError(): Error {\n    const text = this.input.slice(this.index, this.index + 10);\n    const { line, col } = lineColFromIndex(this.input, this.index);\n    return new Error(\n      `Parse error: Unexpected \"${text}\" at line ${line} column ${col}.\\n${this.dialectInfo()}`\n    );\n  }\n\n  private dialectInfo(): string {\n    if (this.dialectName === 'sql') {\n      return (\n        `This likely happens because you're using the default \"sql\" dialect.\\n` +\n        `If possible, please select a more specific dialect (like sqlite, postgresql, etc).`\n      );\n    } else {\n      return `SQL dialect used: \"${this.dialectName}\".`;\n    }\n  }\n\n  private getWhitespace(): string | undefined {\n    WHITESPACE_REGEX.lastIndex = this.index;\n\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      // Advance current position by matched whitespace length\n      this.index += matches[0].length;\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  private getNextToken(): Token | undefined {\n    for (const rule of this.rules) {\n      const token = this.match(rule);\n      if (token) {\n        return token;\n      }\n    }\n    return undefined;\n  }\n\n  // Attempts to match token rule regex at current position in input\n  private match(rule: TokenRule): Token | undefined {\n    rule.regex.lastIndex = this.index;\n    const matches = rule.regex.exec(this.input);\n    if (matches) {\n      const matchedText = matches[0];\n\n      const token: Token = {\n        type: rule.type,\n        raw: matchedText,\n        text: rule.text ? rule.text(matchedText) : matchedText,\n        start: this.index,\n      };\n\n      if (rule.key) {\n        token.key = rule.key(matchedText);\n      }\n\n      // Advance current position by matched token length\n      this.index += matchedText.length;\n      return token;\n    }\n    return undefined;\n  }\n}\n","/* eslint-disable no-cond-assign */\nimport { RegExpLike } from './TokenizerEngine.js';\n\nconst START = /\\/\\*/uy; // matches: /*\nconst ANY_CHAR = /[\\s\\S]/uy; // matches single character\nconst END = /\\*\\//uy; // matches: */\n\n/**\n * An object mimicking a regular expression,\n * for matching nested block-comments.\n */\nexport class NestedComment implements RegExpLike {\n  public lastIndex: number = 0;\n\n  public exec(input: string): string[] | null {\n    let result = '';\n    let match: string | null;\n    let nestLevel = 0;\n\n    if ((match = this.matchSection(START, input))) {\n      result += match;\n      nestLevel++;\n    } else {\n      return null;\n    }\n\n    while (nestLevel > 0) {\n      if ((match = this.matchSection(START, input))) {\n        result += match;\n        nestLevel++;\n      } else if ((match = this.matchSection(END, input))) {\n        result += match;\n        nestLevel--;\n      } else if ((match = this.matchSection(ANY_CHAR, input))) {\n        result += match;\n      } else {\n        return null;\n      }\n    }\n\n    return [result];\n  }\n\n  private matchSection(regex: RegExp, input: string): string | null {\n    regex.lastIndex = this.lastIndex;\n    const matches = regex.exec(input);\n    if (matches) {\n      this.lastIndex += matches[0].length;\n    }\n    return matches ? matches[0] : null;\n  }\n}\n","import { Token, TokenType } from './token.js';\nimport * as regex from './regexFactory.js';\nimport { ParamTypes, TokenizerOptions } from './TokenizerOptions.js';\nimport TokenizerEngine, { TokenRule } from './TokenizerEngine.js';\nimport { escapeRegExp, patternToRegex } from './regexUtil.js';\nimport { equalizeWhitespace, Optional } from '../utils.js';\nimport { NestedComment } from './NestedComment.js';\n\ntype OptionalTokenRule = Optional<TokenRule, 'regex'>;\n\nexport default class Tokenizer {\n  private rulesBeforeParams: TokenRule[];\n  private rulesAfterParams: TokenRule[];\n\n  constructor(private cfg: TokenizerOptions, private dialectName: string) {\n    this.rulesBeforeParams = this.buildRulesBeforeParams(cfg);\n    this.rulesAfterParams = this.buildRulesAfterParams(cfg);\n  }\n\n  public tokenize(input: string, paramTypesOverrides: ParamTypes): Token[] {\n    const rules = [\n      ...this.rulesBeforeParams,\n      ...this.buildParamRules(this.cfg, paramTypesOverrides),\n      ...this.rulesAfterParams,\n    ];\n    const tokens = new TokenizerEngine(rules, this.dialectName).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildRulesBeforeParams(cfg: TokenizerOptions): TokenRule[] {\n    return this.validRules([\n      {\n        type: TokenType.BLOCK_COMMENT,\n        regex:\n          /(\\/\\* *sql-formatter-disable *\\*\\/[\\s\\S]*?(?:\\/\\* *sql-formatter-enable *\\*\\/|$))/uy,\n      },\n      {\n        type: TokenType.BLOCK_COMMENT,\n        regex: cfg.nestedBlockComments ? new NestedComment() : /(\\/\\*[^]*?\\*\\/)/uy,\n      },\n      {\n        type: TokenType.LINE_COMMENT,\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      {\n        type: TokenType.QUOTED_IDENTIFIER,\n        regex: regex.string(cfg.identTypes),\n      },\n      {\n        type: TokenType.NUMBER,\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?(?:[0-9]*\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?![\\w\\p{Alphabetic}])/uy,\n      },\n      // RESERVED_PHRASE is matched before all other keyword tokens\n      // to e.g. prioritize matching \"TIMESTAMP WITH TIME ZONE\" phrase over \"WITH\" clause.\n      {\n        type: TokenType.RESERVED_PHRASE,\n        regex: regex.reservedWord(cfg.reservedPhrases ?? [], cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.CASE,\n        regex: /CASE\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.END,\n        regex: /END\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.BETWEEN,\n        regex: /BETWEEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.LIMIT,\n        regex: cfg.reservedClauses.includes('LIMIT') ? /LIMIT\\b/iuy : undefined,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_CLAUSE,\n        regex: regex.reservedWord(cfg.reservedClauses, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_SELECT,\n        regex: regex.reservedWord(cfg.reservedSelect, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_SET_OPERATION,\n        regex: regex.reservedWord(cfg.reservedSetOperations, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.WHEN,\n        regex: /WHEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.ELSE,\n        regex: /ELSE\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.THEN,\n        regex: /THEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_JOIN,\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.AND,\n        regex: /AND\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.OR,\n        regex: /OR\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.XOR,\n        regex: cfg.supportsXor ? /XOR\\b/iuy : undefined,\n        text: toCanonical,\n      },\n      ...(cfg.operatorKeyword\n        ? [\n            {\n              type: TokenType.OPERATOR,\n              regex: /OPERATOR *\\([^)]+\\)/iuy,\n            },\n          ]\n        : []),\n      {\n        type: TokenType.RESERVED_FUNCTION_NAME,\n        regex: regex.reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_DATA_TYPE,\n        regex: regex.reservedWord(cfg.reservedDataTypes, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_KEYWORD,\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        text: toCanonical,\n      },\n    ]);\n  }\n\n  // These rules can also be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildRulesAfterParams(cfg: TokenizerOptions): TokenRule[] {\n    return this.validRules([\n      {\n        type: TokenType.VARIABLE,\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : undefined,\n      },\n      { type: TokenType.STRING, regex: regex.string(cfg.stringTypes) },\n      {\n        type: TokenType.IDENTIFIER,\n        regex: regex.identifier(cfg.identChars),\n      },\n      { type: TokenType.DELIMITER, regex: /[;]/uy },\n      { type: TokenType.COMMA, regex: /[,]/y },\n      {\n        type: TokenType.OPEN_PAREN,\n        regex: regex.parenthesis('open', cfg.extraParens),\n      },\n      {\n        type: TokenType.CLOSE_PAREN,\n        regex: regex.parenthesis('close', cfg.extraParens),\n      },\n      {\n        type: TokenType.OPERATOR,\n        regex: regex.operator([\n          // standard operators\n          '+',\n          '-',\n          '/',\n          '>',\n          '<',\n          '=',\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n      { type: TokenType.ASTERISK, regex: /[*]/uy },\n      {\n        type: TokenType.PROPERTY_ACCESS_OPERATOR,\n        regex: regex.operator(['.', ...(cfg.propertyAccessOperators ?? [])]),\n      },\n    ]);\n  }\n\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  private buildParamRules(cfg: TokenizerOptions, paramTypesOverrides: ParamTypes): TokenRule[] {\n    // Each dialect has its own default parameter types (if any),\n    // but these can be overriden by the user of the library.\n    const paramTypes = {\n      named: paramTypesOverrides?.named || cfg.paramTypes?.named || [],\n      quoted: paramTypesOverrides?.quoted || cfg.paramTypes?.quoted || [],\n      numbered: paramTypesOverrides?.numbered || cfg.paramTypes?.numbered || [],\n      positional:\n        typeof paramTypesOverrides?.positional === 'boolean'\n          ? paramTypesOverrides.positional\n          : cfg.paramTypes?.positional,\n      custom: paramTypesOverrides?.custom || cfg.paramTypes?.custom || [],\n    };\n\n    return this.validRules([\n      {\n        type: TokenType.NAMED_PARAMETER,\n        regex: regex.parameter(\n          paramTypes.named,\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      {\n        type: TokenType.QUOTED_PARAMETER,\n        regex: regex.parameter(paramTypes.quoted, regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      {\n        type: TokenType.NUMBERED_PARAMETER,\n        regex: regex.parameter(paramTypes.numbered, '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      {\n        type: TokenType.POSITIONAL_PARAMETER,\n        regex: paramTypes.positional ? /[?]/y : undefined,\n      },\n      ...paramTypes.custom.map(\n        (customParam): TokenRule => ({\n          type: TokenType.CUSTOM_PARAMETER,\n          regex: patternToRegex(customParam.regex),\n          key: customParam.key ?? (v => v),\n        })\n      ),\n    ]);\n  }\n\n  // filters out rules for token types whose regex is undefined\n  private validRules(rules: OptionalTokenRule[]): TokenRule[] {\n    return rules.filter((rule): rule is TokenRule => Boolean(rule.regex));\n  }\n}\n\n/**\n * Converts keywords (and keyword sequences) to canonical form:\n * - in uppercase\n * - single spaces between words\n */\nconst toCanonical = (v: string) => equalizeWhitespace(v.toUpperCase());\n","import {\n  DialectFormatOptions,\n  ProcessedDialectFormatOptions,\n} from './formatter/ExpressionFormatter.js';\nimport Tokenizer from './lexer/Tokenizer.js';\nimport { TokenizerOptions } from './lexer/TokenizerOptions.js';\n\nexport interface DialectOptions {\n  name: string;\n  tokenizerOptions: TokenizerOptions;\n  formatOptions: DialectFormatOptions;\n}\n\nexport interface Dialect {\n  tokenizer: Tokenizer;\n  formatOptions: ProcessedDialectFormatOptions;\n}\n\nconst cache = new Map<DialectOptions, Dialect>();\n\n/**\n * Factory function for building Dialect objects.\n * When called repeatedly with same options object returns the cached Dialect,\n * to avoid the cost of creating it again.\n */\nexport const createDialect = (options: DialectOptions): Dialect => {\n  let dialect = cache.get(options);\n  if (!dialect) {\n    dialect = dialectFromOptions(options);\n    cache.set(options, dialect);\n  }\n  return dialect;\n};\n\nconst dialectFromOptions = (dialectOptions: DialectOptions): Dialect => ({\n  tokenizer: new Tokenizer(dialectOptions.tokenizerOptions, dialectOptions.name),\n  formatOptions: processDialectFormatOptions(dialectOptions.formatOptions),\n});\n\nconst processDialectFormatOptions = (\n  options: DialectFormatOptions\n): ProcessedDialectFormatOptions => ({\n  alwaysDenseOperators: options.alwaysDenseOperators || [],\n  onelineClauses: Object.fromEntries(options.onelineClauses.map(name => [name, true])),\n  tabularOnelineClauses: Object.fromEntries(\n    (options.tabularOnelineClauses ?? options.onelineClauses).map(name => [name, true])\n  ),\n});\n","import { FormatOptions } from '../FormatOptions.js';\n\n// Utility functions for config options\n\n/**\n * Creates a string to use for one step of indentation.\n */\nexport function indentString(cfg: FormatOptions): string {\n  if (cfg.indentStyle === 'tabularLeft' || cfg.indentStyle === 'tabularRight') {\n    return ' '.repeat(10);\n  }\n  if (cfg.useTabs) {\n    return '\\t';\n  }\n  return ' '.repeat(cfg.tabWidth);\n}\n\n/**\n * True when indentStyle is one of the tabular ones.\n */\nexport function isTabularStyle(cfg: FormatOptions): boolean {\n  return cfg.indentStyle === 'tabularLeft' || cfg.indentStyle === 'tabularRight';\n}\n","export type ParamItems = { [k: string]: string };\n\n/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n  private params: ParamItems | string[] | undefined;\n  private index: number;\n\n  constructor(params: ParamItems | string[] | undefined) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   */\n  public get({ key, text }: { key?: string; text: string }): string {\n    if (!this.params) {\n      return text;\n    }\n\n    if (key) {\n      return (this.params as ParamItems)[key];\n    }\n    return (this.params as string[])[this.index++];\n  }\n\n  /**\n   * Returns index of current positional parameter.\n   */\n  public getPositionalParameterIndex(): number {\n    return this.index;\n  }\n\n  /**\n   * Sets index of current positional parameter.\n   */\n  public setPositionalParameterIndex(i: number) {\n    this.index = i;\n  }\n}\n","import nearley from 'nearley';\n\nimport Tokenizer from '../lexer/Tokenizer.js';\nimport { disambiguateTokens } from '../lexer/disambiguateTokens.js';\nimport { ParamTypes } from '../lexer/TokenizerOptions.js';\nimport { StatementNode } from './ast.js';\nimport grammar from './grammar.js';\nimport LexerAdapter from './LexerAdapter.js';\nimport { createEofToken } from '../lexer/token.js';\n\nconst { Parser: NearleyParser, Grammar } = nearley;\n\nexport interface Parser {\n  parse(sql: string, paramTypesOverrides: ParamTypes): StatementNode[];\n}\n\n/**\n * Creates a parser object which wraps the setup of Nearley parser\n */\nexport function createParser(tokenizer: Tokenizer): Parser {\n  let paramTypesOverrides: ParamTypes = {};\n  const lexer = new LexerAdapter(chunk => [\n    ...disambiguateTokens(tokenizer.tokenize(chunk, paramTypesOverrides)),\n    createEofToken(chunk.length),\n  ]);\n  const parser = new NearleyParser(Grammar.fromCompiled(grammar), { lexer });\n\n  return {\n    parse: (sql: string, paramTypes: ParamTypes) => {\n      // share paramTypesOverrides with Tokenizer\n      paramTypesOverrides = paramTypes;\n\n      const { results } = parser.feed(sql);\n\n      if (results.length === 1) {\n        return results[0];\n      } else if (results.length === 0) {\n        // Ideally we would report a line number where the parser failed,\n        // but I haven't found a way to get this info from Nearley :(\n        throw new Error('Parse error: Invalid SQL');\n      } else {\n        throw new Error(`Parse error: Ambiguous grammar\\n${JSON.stringify(results, undefined, 2)}`);\n      }\n    },\n  };\n}\n","import { isReserved, Token, TokenType } from './token.js';\n\n/**\n * Ensures that no keyword token (RESERVED_*) is preceded or followed by a dot (.)\n * or any other property-access operator.\n *\n * Ensures that all RESERVED_FUNCTION_NAME tokens are followed by \"(\".\n * If they're not, converts the token to IDENTIFIER.\n *\n * Converts RESERVED_DATA_TYPE tokens followed by \"(\" to RESERVED_PARAMETERIZED_DATA_TYPE.\n *\n * When IDENTIFIER or RESERVED_DATA_TYPE token is followed by \"[\"\n * converts it to ARRAY_IDENTIFIER or ARRAY_KEYWORD accordingly.\n *\n * This is needed to avoid ambiguity in parser which expects function names\n * to always be followed by open-paren, and to distinguish between\n * array accessor `foo[1]` and array literal `[1, 2, 3]`.\n */\nexport function disambiguateTokens(tokens: Token[]): Token[] {\n  return tokens\n    .map(propertyNameKeywordToIdent)\n    .map(funcNameToIdent)\n    .map(dataTypeToParameterizedDataType)\n    .map(identToArrayIdent)\n    .map(dataTypeToArrayKeyword);\n}\n\nconst propertyNameKeywordToIdent = (token: Token, i: number, tokens: Token[]): Token => {\n  if (isReserved(token.type)) {\n    const prevToken = prevNonCommentToken(tokens, i);\n    if (prevToken && prevToken.type === TokenType.PROPERTY_ACCESS_OPERATOR) {\n      return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n    }\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && nextToken.type === TokenType.PROPERTY_ACCESS_OPERATOR) {\n      return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n    }\n  }\n  return token;\n};\n\nconst funcNameToIdent = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.RESERVED_FUNCTION_NAME) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (!nextToken || !isOpenParen(nextToken)) {\n      return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n    }\n  }\n  return token;\n};\n\nconst dataTypeToParameterizedDataType = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.RESERVED_DATA_TYPE) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenParen(nextToken)) {\n      return { ...token, type: TokenType.RESERVED_PARAMETERIZED_DATA_TYPE };\n    }\n  }\n  return token;\n};\n\nconst identToArrayIdent = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.IDENTIFIER) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenBracket(nextToken)) {\n      return { ...token, type: TokenType.ARRAY_IDENTIFIER };\n    }\n  }\n  return token;\n};\n\nconst dataTypeToArrayKeyword = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.RESERVED_DATA_TYPE) {\n    const nextToken = nextNonCommentToken(tokens, i);\n    if (nextToken && isOpenBracket(nextToken)) {\n      return { ...token, type: TokenType.ARRAY_KEYWORD };\n    }\n  }\n  return token;\n};\n\nconst prevNonCommentToken = (tokens: Token[], index: number): Token | undefined =>\n  nextNonCommentToken(tokens, index, -1);\n\nconst nextNonCommentToken = (\n  tokens: Token[],\n  index: number,\n  dir: -1 | 1 = 1\n): Token | undefined => {\n  let i = 1;\n  while (tokens[index + i * dir] && isComment(tokens[index + i * dir])) {\n    i++;\n  }\n  return tokens[index + i * dir];\n};\n\nconst isOpenParen = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '(';\n\nconst isOpenBracket = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '[';\n\nconst isComment = (t: Token): boolean =>\n  t.type === TokenType.BLOCK_COMMENT || t.type === TokenType.LINE_COMMENT;\n","import { lineColFromIndex } from '../lexer/lineColFromIndex.js';\nimport { Token, TokenType } from '../lexer/token.js';\n\n// Nearly type definitions say that Token must have a value field,\n// which however is wrong.  Instead Nearley expects a text field.\ntype NearleyToken = Token & { value: string };\n\nexport default class LexerAdapter {\n  private index = 0;\n  private tokens: Token[] = [];\n  private input = '';\n\n  constructor(private tokenize: (chunk: string) => Token[]) {}\n\n  reset(chunk: string, _info: any) {\n    this.input = chunk;\n    this.index = 0;\n    this.tokens = this.tokenize(chunk);\n  }\n\n  next(): NearleyToken | undefined {\n    return this.tokens[this.index++] as NearleyToken | undefined;\n  }\n\n  save(): any {}\n\n  formatError(token: NearleyToken) {\n    const { line, col } = lineColFromIndex(this.input, token.start);\n    return `Parse error at token: ${token.text} at line ${line} column ${col}`;\n  }\n\n  has(name: string): boolean {\n    return name in TokenType;\n  }\n}\n","// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var DELIMITER: any;\ndeclare var EOF: any;\ndeclare var LIMIT: any;\ndeclare var COMMA: any;\ndeclare var RESERVED_SELECT: any;\ndeclare var ASTERISK: any;\ndeclare var RESERVED_CLAUSE: any;\ndeclare var RESERVED_SET_OPERATION: any;\ndeclare var ARRAY_IDENTIFIER: any;\ndeclare var ARRAY_KEYWORD: any;\ndeclare var RESERVED_FUNCTION_NAME: any;\ndeclare var PROPERTY_ACCESS_OPERATOR: any;\ndeclare var BETWEEN: any;\ndeclare var AND: any;\ndeclare var CASE: any;\ndeclare var END: any;\ndeclare var WHEN: any;\ndeclare var THEN: any;\ndeclare var ELSE: any;\ndeclare var OPERATOR: any;\ndeclare var IDENTIFIER: any;\ndeclare var QUOTED_IDENTIFIER: any;\ndeclare var VARIABLE: any;\ndeclare var NAMED_PARAMETER: any;\ndeclare var QUOTED_PARAMETER: any;\ndeclare var NUMBERED_PARAMETER: any;\ndeclare var POSITIONAL_PARAMETER: any;\ndeclare var CUSTOM_PARAMETER: any;\ndeclare var NUMBER: any;\ndeclare var STRING: any;\ndeclare var RESERVED_KEYWORD: any;\ndeclare var RESERVED_PHRASE: any;\ndeclare var RESERVED_JOIN: any;\ndeclare var RESERVED_DATA_TYPE: any;\ndeclare var RESERVED_PARAMETERIZED_DATA_TYPE: any;\ndeclare var OR: any;\ndeclare var XOR: any;\ndeclare var LINE_COMMENT: any;\ndeclare var BLOCK_COMMENT: any;\ndeclare var DISABLE_COMMENT: any;\n\nimport LexerAdapter from './LexerAdapter.js';\nimport { NodeType, AstNode, CommentNode, KeywordNode, IdentifierNode, DataTypeNode } from './ast.js';\nimport { Token, TokenType } from '../lexer/token.js';\n\n// The lexer here is only to provide the has() method,\n// that's used inside the generated grammar definition.\n// A proper lexer gets passed to Nearley Parser constructor.\nconst lexer = new LexerAdapter(chunk => []);\n\n// Used for unwrapping grammar rules like:\n//\n//   rule -> ( foo | bar | baz )\n//\n// which otherwise produce single element nested inside two arrays\nconst unwrap = <T>([[el]]: T[][]): T => el;\n\nconst toKeywordNode = (token: Token): KeywordNode => ({\n  type: NodeType.keyword,\n  tokenType: token.type,\n  text: token.text,\n  raw: token.raw,\n});\n\nconst toDataTypeNode = (token: Token): DataTypeNode => ({\n  type: NodeType.data_type,\n  text: token.text,\n  raw: token.raw,\n});\n\ninterface CommentAttachments {\n  leading?: CommentNode[];\n  trailing?: CommentNode[];\n}\n\nconst addComments = (node: AstNode, { leading, trailing }: CommentAttachments): AstNode => {\n  if (leading?.length) {\n    node = { ...node, leadingComments: leading };\n  }\n  if (trailing?.length) {\n    node = { ...node, trailingComments: trailing };\n  }\n  return node;\n};\n\nconst addCommentsToArray = (nodes: AstNode[], { leading, trailing }: CommentAttachments): AstNode[] => {\n  if (leading?.length) {\n    const [first, ...rest] = nodes;\n    nodes = [addComments(first, { leading }), ...rest];\n  }\n  if (trailing?.length) {\n    const lead = nodes.slice(0, -1);\n    const last = nodes[nodes.length-1];\n    nodes = [...lead, addComments(last, { trailing })];\n  }\n  return nodes;\n};\n\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexer,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\": \n        ([statements]) => {\n          const last = statements[statements.length - 1];\n          if (last && !last.hasSemicolon) {\n            // we have fully parsed the whole file\n            // discard the last statement when it's empty\n            return last.children.length > 0 ? statements : statements.slice(0, -1);\n          } else {\n            // parsing still in progress, do nothing\n            return statements;\n          }\n        }\n        },\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"DELIMITER\") ? {type: \"DELIMITER\"} : DELIMITER)]},\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"EOF\") ? {type: \"EOF\"} : EOF)]},\n    {\"name\": \"statement\", \"symbols\": [\"expressions_or_clauses\", \"statement$subexpression$1\"], \"postprocess\": \n        ([children, [delimiter]]) => ({\n          type: NodeType.statement,\n          children,\n          hasSemicolon: delimiter.type === TokenType.DELIMITER,\n        })\n        },\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": [\"expressions_or_clauses$ebnf$2\", \"clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expressions_or_clauses$ebnf$2\"], \"postprocess\": \n        ([expressions, clauses]) => [...expressions, ...clauses]\n        },\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"limit_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"select_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"other_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"set_operation\"]},\n    {\"name\": \"clause\", \"symbols\": [\"clause$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"free_form_sql\"]},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA), \"limit_clause$ebnf$1$subexpression$1$ebnf$1\"]},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"limit_clause\", \"symbols\": [(lexer.has(\"LIMIT\") ? {type: \"LIMIT\"} : LIMIT), \"_\", \"expression_chain_\", \"limit_clause$ebnf$1\"], \"postprocess\": \n        ([limitToken, _, exp1, optional]) => {\n          if (optional) {\n            const [comma, exp2] = optional;\n            return {\n              type: NodeType.limit_clause,\n              limitKw: addComments(toKeywordNode(limitToken), { trailing: _ }),\n              offset: exp1,\n              count: exp2,\n            };\n          } else {\n            return {\n              type: NodeType.limit_clause,\n              limitKw: addComments(toKeywordNode(limitToken), { trailing: _ }),\n              count: exp1,\n            };\n          }\n        }\n        },\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": [\"select_clause$subexpression$1$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"all_columns_asterisk\", \"select_clause$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": [\"select_clause$subexpression$1$ebnf$2\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"asteriskless_free_form_sql\", \"select_clause$subexpression$1$ebnf$2\"]},\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT), \"select_clause$subexpression$1\"], \"postprocess\": \n        ([nameToken, [exp, expressions]]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children: [exp, ...expressions],\n        })\n        },\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT)], \"postprocess\": \n        ([nameToken]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children: [],\n        })\n        },\n    {\"name\": \"all_columns_asterisk\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)], \"postprocess\": \n        () => ({ type: NodeType.all_columns_asterisk })\n        },\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": []},\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": [\"other_clause$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"other_clause\", \"symbols\": [(lexer.has(\"RESERVED_CLAUSE\") ? {type: \"RESERVED_CLAUSE\"} : RESERVED_CLAUSE), \"other_clause$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": []},\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": [\"set_operation$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"set_operation\", \"symbols\": [(lexer.has(\"RESERVED_SET_OPERATION\") ? {type: \"RESERVED_SET_OPERATION\"} : RESERVED_SET_OPERATION), \"set_operation$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.set_operation,\n          nameKw: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"expression_chain_$ebnf$1\", \"symbols\": [\"expression_with_comments_\"]},\n    {\"name\": \"expression_chain_$ebnf$1\", \"symbols\": [\"expression_chain_$ebnf$1\", \"expression_with_comments_\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expression_chain_\", \"symbols\": [\"expression_chain_$ebnf$1\"], \"postprocess\": id},\n    {\"name\": \"expression_chain$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expression_chain$ebnf$1\", \"symbols\": [\"expression_chain$ebnf$1\", \"_expression_with_comments\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expression_chain\", \"symbols\": [\"expression\", \"expression_chain$ebnf$1\"], \"postprocess\": \n        ([expr, chain]) => [expr, ...chain]\n        },\n    {\"name\": \"andless_expression_chain$ebnf$1\", \"symbols\": []},\n    {\"name\": \"andless_expression_chain$ebnf$1\", \"symbols\": [\"andless_expression_chain$ebnf$1\", \"_andless_expression_with_comments\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"andless_expression_chain\", \"symbols\": [\"andless_expression\", \"andless_expression_chain$ebnf$1\"], \"postprocess\": \n        ([expr, chain]) => [expr, ...chain]\n        },\n    {\"name\": \"expression_with_comments_\", \"symbols\": [\"expression\", \"_\"], \"postprocess\": \n        ([expr, _]) => addComments(expr, { trailing: _ })\n        },\n    {\"name\": \"_expression_with_comments\", \"symbols\": [\"_\", \"expression\"], \"postprocess\": \n        ([_, expr]) => addComments(expr, { leading: _ })\n        },\n    {\"name\": \"_andless_expression_with_comments\", \"symbols\": [\"_\", \"andless_expression\"], \"postprocess\": \n        ([_, expr]) => addComments(expr, { leading: _ })\n        },\n    {\"name\": \"free_form_sql$subexpression$1\", \"symbols\": [\"asteriskless_free_form_sql\"]},\n    {\"name\": \"free_form_sql$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"free_form_sql\", \"symbols\": [\"free_form_sql$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"asteriskless_andless_expression\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"logic_operator\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"comment\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"other_keyword\"]},\n    {\"name\": \"asteriskless_free_form_sql\", \"symbols\": [\"asteriskless_free_form_sql$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"andless_expression\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"logic_operator\"]},\n    {\"name\": \"expression\", \"symbols\": [\"expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"andless_expression$subexpression$1\", \"symbols\": [\"asteriskless_andless_expression\"]},\n    {\"name\": \"andless_expression$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"andless_expression\", \"symbols\": [\"andless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"atomic_expression\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"between_predicate\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"case_expression\"]},\n    {\"name\": \"asteriskless_andless_expression\", \"symbols\": [\"asteriskless_andless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"function_call\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"property_access\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"curly_braces\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"square_brackets\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"operator\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"parameter\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"literal\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"data_type\"]},\n    {\"name\": \"atomic_expression$subexpression$1\", \"symbols\": [\"keyword\"]},\n    {\"name\": \"atomic_expression\", \"symbols\": [\"atomic_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_IDENTIFIER\") ? {type: \"ARRAY_IDENTIFIER\"} : ARRAY_IDENTIFIER), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addComments({ type: NodeType.identifier, quoted: false, text: arrayToken.text}, { trailing: _ }),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_KEYWORD\") ? {type: \"ARRAY_KEYWORD\"} : ARRAY_KEYWORD), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addComments(toKeywordNode(arrayToken), { trailing: _ }),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"RESERVED_FUNCTION_NAME\") ? {type: \"RESERVED_FUNCTION_NAME\"} : RESERVED_FUNCTION_NAME), \"_\", \"parenthesis\"], \"postprocess\": \n        ([nameToken, _, parens]) => ({\n          type: NodeType.function_call,\n          nameKw: addComments(toKeywordNode(nameToken), { trailing: _ }),\n          parenthesis: parens,\n        })\n        },\n    {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\"}, \"expressions_or_clauses\", {\"literal\":\")\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"(\",\n          closeParen: \")\",\n        })\n        },\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": []},\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": [\"curly_braces$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"curly_braces\", \"symbols\": [{\"literal\":\"{\"}, \"curly_braces$ebnf$1\", {\"literal\":\"}\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"{\",\n          closeParen: \"}\",\n        })\n        },\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": []},\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": [\"square_brackets$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"square_brackets\", \"symbols\": [{\"literal\":\"[\"}, \"square_brackets$ebnf$1\", {\"literal\":\"]\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"[\",\n          closeParen: \"]\",\n        })\n        },\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"all_columns_asterisk\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"parameter\"]},\n    {\"name\": \"property_access\", \"symbols\": [\"atomic_expression\", \"_\", (lexer.has(\"PROPERTY_ACCESS_OPERATOR\") ? {type: \"PROPERTY_ACCESS_OPERATOR\"} : PROPERTY_ACCESS_OPERATOR), \"_\", \"property_access$subexpression$1\"], \"postprocess\": \n        // Allowing property to be <array_subscript> is currently a hack.\n        // A better way would be to allow <property_access> on the left side of array_subscript,\n        // but we currently can't do that because of another hack that requires\n        // %ARRAY_IDENTIFIER on the left side of <array_subscript>.\n        ([object, _1, dot, _2, [property]]) => {\n          return {\n            type: NodeType.property_access,\n            object: addComments(object, { trailing: _1 }),\n            operator: dot.text,\n            property: addComments(property, { leading: _2 }),\n          };\n        }\n        },\n    {\"name\": \"between_predicate\", \"symbols\": [(lexer.has(\"BETWEEN\") ? {type: \"BETWEEN\"} : BETWEEN), \"_\", \"andless_expression_chain\", \"_\", (lexer.has(\"AND\") ? {type: \"AND\"} : AND), \"_\", \"andless_expression\"], \"postprocess\": \n        ([betweenToken, _1, expr1, _2, andToken, _3, expr2]) => ({\n          type: NodeType.between_predicate,\n          betweenKw: toKeywordNode(betweenToken),\n          expr1: addCommentsToArray(expr1, { leading: _1, trailing: _2 }),\n          andKw: toKeywordNode(andToken),\n          expr2: [addComments(expr2, { leading: _3 })],\n        })\n        },\n    {\"name\": \"case_expression$ebnf$1\", \"symbols\": [\"expression_chain_\"], \"postprocess\": id},\n    {\"name\": \"case_expression$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"case_expression$ebnf$2\", \"symbols\": []},\n    {\"name\": \"case_expression$ebnf$2\", \"symbols\": [\"case_expression$ebnf$2\", \"case_clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"case_expression\", \"symbols\": [(lexer.has(\"CASE\") ? {type: \"CASE\"} : CASE), \"_\", \"case_expression$ebnf$1\", \"case_expression$ebnf$2\", (lexer.has(\"END\") ? {type: \"END\"} : END)], \"postprocess\": \n        ([caseToken, _, expr, clauses, endToken]) => ({\n          type: NodeType.case_expression,\n          caseKw: addComments(toKeywordNode(caseToken), { trailing: _ }),\n          endKw: toKeywordNode(endToken),\n          expr: expr || [],\n          clauses,\n        })\n        },\n    {\"name\": \"case_clause\", \"symbols\": [(lexer.has(\"WHEN\") ? {type: \"WHEN\"} : WHEN), \"_\", \"expression_chain_\", (lexer.has(\"THEN\") ? {type: \"THEN\"} : THEN), \"_\", \"expression_chain_\"], \"postprocess\": \n        ([whenToken, _1, cond, thenToken, _2, expr]) => ({\n          type: NodeType.case_when,\n          whenKw: addComments(toKeywordNode(whenToken), { trailing: _1 }),\n          thenKw: addComments(toKeywordNode(thenToken), { trailing: _2 }),\n          condition: cond,\n          result: expr,\n        })\n        },\n    {\"name\": \"case_clause\", \"symbols\": [(lexer.has(\"ELSE\") ? {type: \"ELSE\"} : ELSE), \"_\", \"expression_chain_\"], \"postprocess\": \n        ([elseToken, _, expr]) => ({\n          type: NodeType.case_else,\n          elseKw: addComments(toKeywordNode(elseToken), { trailing: _ }),\n          result: expr,\n        })\n        },\n    {\"name\": \"comma$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA)]},\n    {\"name\": \"comma\", \"symbols\": [\"comma$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.comma })},\n    {\"name\": \"asterisk$subexpression$1\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)]},\n    {\"name\": \"asterisk\", \"symbols\": [\"asterisk$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [(lexer.has(\"OPERATOR\") ? {type: \"OPERATOR\"} : OPERATOR)]},\n    {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"IDENTIFIER\") ? {type: \"IDENTIFIER\"} : IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_IDENTIFIER\") ? {type: \"QUOTED_IDENTIFIER\"} : QUOTED_IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"VARIABLE\") ? {type: \"VARIABLE\"} : VARIABLE)]},\n    {\"name\": \"identifier\", \"symbols\": [\"identifier$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.identifier, quoted: token.type !== \"IDENTIFIER\", text: token.text })},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NAMED_PARAMETER\") ? {type: \"NAMED_PARAMETER\"} : NAMED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_PARAMETER\") ? {type: \"QUOTED_PARAMETER\"} : QUOTED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBERED_PARAMETER\") ? {type: \"NUMBERED_PARAMETER\"} : NUMBERED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"POSITIONAL_PARAMETER\") ? {type: \"POSITIONAL_PARAMETER\"} : POSITIONAL_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"CUSTOM_PARAMETER\") ? {type: \"CUSTOM_PARAMETER\"} : CUSTOM_PARAMETER)]},\n    {\"name\": \"parameter\", \"symbols\": [\"parameter$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.parameter, key: token.key, text: token.text })},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBER\") ? {type: \"NUMBER\"} : NUMBER)]},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"STRING\") ? {type: \"STRING\"} : STRING)]},\n    {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.literal, text: token.text })},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_KEYWORD\") ? {type: \"RESERVED_KEYWORD\"} : RESERVED_KEYWORD)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_PHRASE\") ? {type: \"RESERVED_PHRASE\"} : RESERVED_PHRASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_JOIN\") ? {type: \"RESERVED_JOIN\"} : RESERVED_JOIN)]},\n    {\"name\": \"keyword\", \"symbols\": [\"keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"data_type$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_DATA_TYPE\") ? {type: \"RESERVED_DATA_TYPE\"} : RESERVED_DATA_TYPE)]},\n    {\"name\": \"data_type\", \"symbols\": [\"data_type$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toDataTypeNode(token)\n        },\n    {\"name\": \"data_type\", \"symbols\": [(lexer.has(\"RESERVED_PARAMETERIZED_DATA_TYPE\") ? {type: \"RESERVED_PARAMETERIZED_DATA_TYPE\"} : RESERVED_PARAMETERIZED_DATA_TYPE), \"_\", \"parenthesis\"], \"postprocess\": \n        ([nameToken, _, parens]) => ({\n          type: NodeType.parameterized_data_type,\n          dataType: addComments(toDataTypeNode(nameToken), { trailing: _ }),\n          parenthesis: parens,\n        })\n        },\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"AND\") ? {type: \"AND\"} : AND)]},\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"OR\") ? {type: \"OR\"} : OR)]},\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"XOR\") ? {type: \"XOR\"} : XOR)]},\n    {\"name\": \"logic_operator\", \"symbols\": [\"logic_operator$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"WHEN\") ? {type: \"WHEN\"} : WHEN)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"THEN\") ? {type: \"THEN\"} : THEN)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"ELSE\") ? {type: \"ELSE\"} : ELSE)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"END\") ? {type: \"END\"} : END)]},\n    {\"name\": \"other_keyword\", \"symbols\": [\"other_keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"comment\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": ([comments]) => comments},\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"LINE_COMMENT\") ? {type: \"LINE_COMMENT\"} : LINE_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.line_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"BLOCK_COMMENT\") ? {type: \"BLOCK_COMMENT\"} : BLOCK_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.block_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"DISABLE_COMMENT\") ? {type: \"DISABLE_COMMENT\"} : DISABLE_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.disable_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        }\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n","import { last } from '../utils.js';\n\nimport Indentation from './Indentation.js';\n\n/** Whitespace modifiers to be used with add() method */\nexport enum WS {\n  SPACE, // Adds single space\n  NO_SPACE, // Removes preceding horizontal whitespace (if any)\n  NO_NEWLINE, // Removes all preceding whitespace (whether horizontal or vertical)\n  NEWLINE, // Adds single newline (and removes any preceding whitespace)\n  MANDATORY_NEWLINE, // Adds single newline that can't be removed by NO_NEWLINE\n  INDENT, // Adds indentation (as much as needed for current indentation level)\n  SINGLE_INDENT, // Adds whitespace for single indentation step\n}\n\nexport type LayoutItem = WS.SPACE | WS.SINGLE_INDENT | WS.NEWLINE | WS.MANDATORY_NEWLINE | string;\n\n/**\n * API for constructing SQL string (especially the whitespace part).\n *\n * It hides the internal implementation.\n * Originally it used plain string concatenation, which was expensive.\n * Now it's storing items to array and builds the string only in the end.\n */\nexport default class Layout {\n  private items: LayoutItem[] = [];\n\n  constructor(public indentation: Indentation) {}\n\n  /**\n   * Appends token strings and whitespace modifications to SQL string.\n   */\n  public add(...items: (WS | string)[]) {\n    for (const item of items) {\n      switch (item) {\n        case WS.SPACE:\n          this.items.push(WS.SPACE);\n          break;\n        case WS.NO_SPACE:\n          this.trimHorizontalWhitespace();\n          break;\n        case WS.NO_NEWLINE:\n          this.trimWhitespace();\n          break;\n        case WS.NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline(WS.NEWLINE);\n          break;\n        case WS.MANDATORY_NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline(WS.MANDATORY_NEWLINE);\n          break;\n        case WS.INDENT:\n          this.addIndentation();\n          break;\n        case WS.SINGLE_INDENT:\n          this.items.push(WS.SINGLE_INDENT);\n          break;\n        default:\n          this.items.push(item);\n      }\n    }\n  }\n\n  private trimHorizontalWhitespace() {\n    while (isHorizontalWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n\n  private trimWhitespace() {\n    while (isRemovableWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n\n  private addNewline(newline: WS.NEWLINE | WS.MANDATORY_NEWLINE) {\n    if (this.items.length > 0) {\n      switch (last(this.items)) {\n        case WS.NEWLINE:\n          this.items.pop();\n          this.items.push(newline);\n          break;\n        case WS.MANDATORY_NEWLINE:\n          // keep as is\n          break;\n        default:\n          this.items.push(newline);\n          break;\n      }\n    }\n  }\n\n  private addIndentation() {\n    for (let i = 0; i < this.indentation.getLevel(); i++) {\n      this.items.push(WS.SINGLE_INDENT);\n    }\n  }\n\n  /**\n   * Returns the final SQL string.\n   */\n  public toString(): string {\n    return this.items.map(item => this.itemToString(item)).join('');\n  }\n\n  /**\n   * Returns the internal layout data\n   */\n  public getLayoutItems(): LayoutItem[] {\n    return this.items;\n  }\n\n  private itemToString(item: LayoutItem): string {\n    switch (item) {\n      case WS.SPACE:\n        return ' ';\n      case WS.NEWLINE:\n      case WS.MANDATORY_NEWLINE:\n        return '\\n';\n      case WS.SINGLE_INDENT:\n        return this.indentation.getSingleIndent();\n      default:\n        return item;\n    }\n  }\n}\n\nconst isHorizontalWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT;\n\nconst isRemovableWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT || item === WS.NEWLINE;\n","import { IndentStyle } from '../FormatOptions.js';\nimport { isLogicalOperator, TokenType } from '../lexer/token.js';\n\n/**\n * When tabular style enabled,\n * produces a 10-char wide version of token text.\n */\nexport default function toTabularFormat(tokenText: string, indentStyle: IndentStyle): string {\n  if (indentStyle === 'standard') {\n    return tokenText;\n  }\n\n  let tail = [] as string[]; // rest of keyword\n  if (tokenText.length >= 10 && tokenText.includes(' ')) {\n    // split for long keywords like INNER JOIN or UNION DISTINCT\n    [tokenText, ...tail] = tokenText.split(' ');\n  }\n\n  if (indentStyle === 'tabularLeft') {\n    tokenText = tokenText.padEnd(9, ' ');\n  } else {\n    tokenText = tokenText.padStart(9, ' ');\n  }\n\n  return tokenText + ['', ...tail].join(' ');\n}\n\n/**\n * True when the token can be formatted in tabular style\n */\nexport function isTabularToken(type: TokenType): boolean {\n  return (\n    isLogicalOperator(type) ||\n    type === TokenType.RESERVED_CLAUSE ||\n    type === TokenType.RESERVED_SELECT ||\n    type === TokenType.RESERVED_SET_OPERATION ||\n    type === TokenType.RESERVED_JOIN ||\n    type === TokenType.LIMIT\n  );\n}\n","import { last } from '../utils.js';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_CLAUSE words\n */\nexport default class Indentation {\n  private indentTypes: string[] = [];\n\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(private indent: string) {}\n\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent(): string {\n    return this.indent;\n  }\n\n  /**\n   * Returns current indentation level\n   */\n  getLevel(): number {\n    return this.indentTypes.length;\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nimport Indentation from './Indentation.js';\nimport Layout, { WS } from './Layout.js';\n\n/**\n * Like Layout, but only formats single-line expressions.\n *\n * Throws InlineLayoutError:\n * - when encountering a newline\n * - when exceeding configured expressionWidth\n */\nexport default class InlineLayout extends Layout {\n  private length = 0;\n  // Keeps track of the trailing whitespace,\n  // so that we can decrease length when encountering WS.NO_SPACE,\n  // but only when there actually is a space to remove.\n  private trailingSpace = false;\n\n  constructor(private expressionWidth: number) {\n    super(new Indentation('')); // no indentation in inline layout\n  }\n\n  public add(...items: (WS | string)[]) {\n    items.forEach(item => this.addToLength(item));\n    if (this.length > this.expressionWidth) {\n      // We have exceeded the allowable width\n      throw new InlineLayoutError();\n    }\n    super.add(...items);\n  }\n\n  private addToLength(item: WS | string) {\n    if (typeof item === 'string') {\n      this.length += item.length;\n      this.trailingSpace = false;\n    } else if (item === WS.MANDATORY_NEWLINE || item === WS.NEWLINE) {\n      // newlines not allowed within inline block\n      throw new InlineLayoutError();\n    } else if (item === WS.INDENT || item === WS.SINGLE_INDENT || item === WS.SPACE) {\n      if (!this.trailingSpace) {\n        this.length++;\n        this.trailingSpace = true;\n      }\n    } else if (item === WS.NO_NEWLINE || item === WS.NO_SPACE) {\n      if (this.trailingSpace) {\n        this.trailingSpace = false;\n        this.length--;\n      }\n    }\n  }\n}\n\n/**\n * Thrown when block of SQL can't be formatted as a single line.\n */\nexport class InlineLayoutError extends Error {}\n","import { FormatOptions } from '../FormatOptions.js';\nimport { equalizeWhitespace, isMultiline, last } from '../utils.js';\n\nimport Params from './Params.js';\nimport { isTabularStyle } from './config.js';\nimport { TokenType } from '../lexer/token.js';\nimport {\n  AllColumnsAsteriskNode,\n  ArraySubscriptNode,\n  AstNode,\n  BetweenPredicateNode,\n  SetOperationNode,\n  ClauseNode,\n  FunctionCallNode,\n  LimitClauseNode,\n  NodeType,\n  ParenthesisNode,\n  LiteralNode,\n  IdentifierNode,\n  ParameterNode,\n  OperatorNode,\n  LineCommentNode,\n  BlockCommentNode,\n  CommaNode,\n  KeywordNode,\n  PropertyAccessNode,\n  CommentNode,\n  CaseExpressionNode,\n  CaseWhenNode,\n  CaseElseNode,\n  DataTypeNode,\n  ParameterizedDataTypeNode,\n  DisableCommentNode,\n} from '../parser/ast.js';\n\nimport Layout, { WS } from './Layout.js';\nimport toTabularFormat, { isTabularToken } from './tabularStyle.js';\nimport InlineLayout, { InlineLayoutError } from './InlineLayout.js';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  dialectCfg: ProcessedDialectFormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\nexport interface DialectFormatOptions {\n  // List of operators that should always be formatted without surrounding spaces\n  alwaysDenseOperators?: string[];\n  // List of clauses that should be formatted on a single line\n  onelineClauses: string[];\n  // List of clauses that should be formatted on a single line in tabular style\n  tabularOnelineClauses?: string[];\n}\n\n// Contains the same data as DialectFormatOptions,\n// but optimized for faster and more conventient lookup.\nexport interface ProcessedDialectFormatOptions {\n  alwaysDenseOperators: string[];\n  onelineClauses: Record<string, boolean>;\n  tabularOnelineClauses: Record<string, boolean>;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private dialectCfg: ProcessedDialectFormatOptions;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, dialectCfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.dialectCfg = dialectCfg;\n    this.inline = inline;\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      this.formatNode(this.nodes[this.index]);\n    }\n    return this.layout;\n  }\n\n  private formatNode(node: AstNode) {\n    this.formatComments(node.leadingComments);\n    this.formatNodeWithoutComments(node);\n    this.formatComments(node.trailingComments);\n  }\n\n  private formatNodeWithoutComments(node: AstNode) {\n    switch (node.type) {\n      case NodeType.function_call:\n        return this.formatFunctionCall(node);\n      case NodeType.parameterized_data_type:\n        return this.formatParameterizedDataType(node);\n      case NodeType.array_subscript:\n        return this.formatArraySubscript(node);\n      case NodeType.property_access:\n        return this.formatPropertyAccess(node);\n      case NodeType.parenthesis:\n        return this.formatParenthesis(node);\n      case NodeType.between_predicate:\n        return this.formatBetweenPredicate(node);\n      case NodeType.case_expression:\n        return this.formatCaseExpression(node);\n      case NodeType.case_when:\n        return this.formatCaseWhen(node);\n      case NodeType.case_else:\n        return this.formatCaseElse(node);\n      case NodeType.clause:\n        return this.formatClause(node);\n      case NodeType.set_operation:\n        return this.formatSetOperation(node);\n      case NodeType.limit_clause:\n        return this.formatLimitClause(node);\n      case NodeType.all_columns_asterisk:\n        return this.formatAllColumnsAsterisk(node);\n      case NodeType.literal:\n        return this.formatLiteral(node);\n      case NodeType.identifier:\n        return this.formatIdentifier(node);\n      case NodeType.parameter:\n        return this.formatParameter(node);\n      case NodeType.operator:\n        return this.formatOperator(node);\n      case NodeType.comma:\n        return this.formatComma(node);\n      case NodeType.line_comment:\n        return this.formatLineComment(node);\n      case NodeType.block_comment:\n        return this.formatBlockComment(node);\n      case NodeType.disable_comment:\n        return this.formatBlockComment(node);\n      case NodeType.data_type:\n        return this.formatDataType(node);\n      case NodeType.keyword:\n        return this.formatKeywordNode(node);\n    }\n  }\n\n  private formatFunctionCall(node: FunctionCallNode) {\n    this.withComments(node.nameKw, () => {\n      this.layout.add(this.showFunctionKw(node.nameKw));\n    });\n    this.formatNode(node.parenthesis);\n  }\n\n  private formatParameterizedDataType(node: ParameterizedDataTypeNode) {\n    this.withComments(node.dataType, () => {\n      this.layout.add(this.showDataType(node.dataType));\n    });\n    this.formatNode(node.parenthesis);\n  }\n\n  private formatArraySubscript(node: ArraySubscriptNode) {\n    let formattedArray: string;\n\n    switch (node.array.type) {\n      case NodeType.data_type:\n        formattedArray = this.showDataType(node.array);\n        break;\n      case NodeType.keyword:\n        formattedArray = this.showKw(node.array);\n        break;\n      default:\n        formattedArray = this.showIdentifier(node.array);\n        break;\n    }\n\n    this.withComments(node.array, () => {\n      this.layout.add(formattedArray);\n    });\n\n    this.formatNode(node.parenthesis);\n  }\n\n  private formatPropertyAccess(node: PropertyAccessNode) {\n    this.formatNode(node.object);\n    this.layout.add(WS.NO_SPACE, node.operator);\n    this.formatNode(node.property);\n  }\n\n  private formatParenthesis(node: ParenthesisNode) {\n    const inlineLayout = this.formatInlineExpression(node.children);\n\n    if (inlineLayout) {\n      this.layout.add(node.openParen);\n      this.layout.add(...inlineLayout.getLayoutItems());\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicateNode) {\n    this.layout.add(this.showKw(node.betweenKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr1);\n    this.layout.add(WS.NO_SPACE, WS.SPACE, this.showNonTabularKw(node.andKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr2);\n    this.layout.add(WS.SPACE);\n  }\n\n  private formatCaseExpression(node: CaseExpressionNode) {\n    this.formatNode(node.caseKw);\n\n    this.layout.indentation.increaseBlockLevel();\n    this.layout = this.formatSubExpression(node.expr);\n    this.layout = this.formatSubExpression(node.clauses);\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.endKw);\n  }\n\n  private formatCaseWhen(node: CaseWhenNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.whenKw);\n    this.layout = this.formatSubExpression(node.condition);\n    this.formatNode(node.thenKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n\n  private formatCaseElse(node: CaseElseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.elseKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n\n  private formatClause(node: ClauseNode) {\n    if (this.isOnelineClause(node)) {\n      this.formatClauseInOnelineStyle(node);\n    } else if (isTabularStyle(this.cfg)) {\n      this.formatClauseInTabularStyle(node);\n    } else {\n      this.formatClauseInIndentedStyle(node);\n    }\n  }\n\n  private isOnelineClause(node: ClauseNode): boolean {\n    if (isTabularStyle(this.cfg)) {\n      return this.dialectCfg.tabularOnelineClauses[node.nameKw.text];\n    } else {\n      return this.dialectCfg.onelineClauses[node.nameKw.text];\n    }\n  }\n\n  private formatClauseInIndentedStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.NEWLINE);\n    this.layout.indentation.increaseTopLevel();\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatClauseInOnelineStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatClauseInTabularStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.SPACE);\n    this.layout.indentation.increaseTopLevel();\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatSetOperation(node: SetOperationNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.NEWLINE);\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClauseNode) {\n    this.withComments(node.limitKw, () => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.limitKw));\n    });\n    this.layout.indentation.increaseTopLevel();\n\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    }\n\n    if (node.offset) {\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsteriskNode) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatLiteral(node: LiteralNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatIdentifier(node: IdentifierNode) {\n    this.layout.add(this.showIdentifier(node), WS.SPACE);\n  }\n\n  private formatParameter(node: ParameterNode) {\n    this.layout.add(this.params.get(node), WS.SPACE);\n  }\n\n  private formatOperator({ text }: OperatorNode) {\n    if (this.cfg.denseOperators || this.dialectCfg.alwaysDenseOperators.includes(text)) {\n      this.layout.add(WS.NO_SPACE, text);\n    } else if (text === ':') {\n      this.layout.add(WS.NO_SPACE, text, WS.SPACE);\n    } else {\n      this.layout.add(text, WS.SPACE);\n    }\n  }\n\n  private formatComma(_node: CommaNode) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, ',', WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n    }\n  }\n\n  private withComments(node: AstNode, fn: () => void) {\n    this.formatComments(node.leadingComments);\n    fn();\n    this.formatComments(node.trailingComments);\n  }\n\n  private formatComments(comments: CommentNode[] | undefined) {\n    if (!comments) {\n      return;\n    }\n    comments.forEach(com => {\n      if (com.type === NodeType.line_comment) {\n        this.formatLineComment(com);\n      } else {\n        this.formatBlockComment(com);\n      }\n    });\n  }\n\n  private formatLineComment(node: LineCommentNode) {\n    if (isMultiline(node.precedingWhitespace || '')) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else if (this.layout.getLayoutItems().length > 0) {\n      this.layout.add(WS.NO_NEWLINE, WS.SPACE, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else {\n      // comment is the first item in code - no need to add preceding spaces\n      this.layout.add(node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatBlockComment(node: BlockCommentNode | DisableCommentNode) {\n    if (node.type === NodeType.block_comment && this.isMultilineBlockComment(node)) {\n      this.splitBlockComment(node.text).forEach(line => {\n        this.layout.add(WS.NEWLINE, WS.INDENT, line);\n      });\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(node.text, WS.SPACE);\n    }\n  }\n\n  private isMultilineBlockComment(node: BlockCommentNode): boolean {\n    return isMultiline(node.text) || isMultiline(node.precedingWhitespace || '');\n  }\n\n  private isDocComment(comment: string): boolean {\n    const lines = comment.split(/\\n/);\n    return (\n      // first line starts with /* or /**\n      /^\\/\\*\\*?$/.test(lines[0]) &&\n      // intermediate lines start with *\n      lines.slice(1, lines.length - 1).every(line => /^\\s*\\*/.test(line)) &&\n      // last line ends with */\n      /^\\s*\\*\\/$/.test(last(lines) as string)\n    );\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this doc-comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  // However, a normal comment (non-doc-comment) like this:\n  //\n  //   ..../*\n  //   ....Some description here\n  //   ....*/\n  //\n  // gets broken to this array (no leading spaces):\n  //\n  //   [ '/*',\n  //     'Some description here',\n  //     '*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    if (this.isDocComment(comment)) {\n      return comment.split(/\\n/).map(line => {\n        if (/^\\s*\\*/.test(line)) {\n          return ' ' + line.replace(/^\\s*/, '');\n        } else {\n          return line;\n        }\n      });\n    } else {\n      return comment.split(/\\n/).map(line => line.replace(/^\\s*/, ''));\n    }\n  }\n\n  private formatSubExpression(nodes: AstNode[]): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialectCfg,\n      params: this.params,\n      layout: this.layout,\n      inline: this.inline,\n    }).format(nodes);\n  }\n\n  private formatInlineExpression(nodes: AstNode[]): Layout | undefined {\n    const oldParamIndex = this.params.getPositionalParameterIndex();\n    try {\n      return new ExpressionFormatter({\n        cfg: this.cfg,\n        dialectCfg: this.dialectCfg,\n        params: this.params,\n        layout: new InlineLayout(this.cfg.expressionWidth),\n        inline: true,\n      }).format(nodes);\n    } catch (e) {\n      if (e instanceof InlineLayoutError) {\n        // While formatting, some of the positional parameters might have\n        // been consumed, which increased the current parameter index.\n        // We reset the index to an earlier state, so we can run the\n        // formatting again and re-consume these parameters in non-inline mode.\n        this.params.setPositionalParameterIndex(oldParamIndex);\n        return undefined;\n      } else {\n        // forward all unexpected errors\n        throw e;\n      }\n    }\n  }\n\n  private formatKeywordNode(node: KeywordNode): void {\n    switch (node.tokenType) {\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(node);\n      case TokenType.AND:\n      case TokenType.OR:\n      case TokenType.XOR:\n        return this.formatLogicalOperator(node);\n      default:\n        return this.formatKeyword(node);\n    }\n  }\n\n  private formatJoin(node: KeywordNode) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n    }\n  }\n\n  private formatKeyword(node: KeywordNode) {\n    this.layout.add(this.showKw(node), WS.SPACE);\n  }\n\n  private formatLogicalOperator(node: KeywordNode) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatDataType(node: DataTypeNode) {\n    this.layout.add(this.showDataType(node), WS.SPACE);\n  }\n\n  private showKw(node: KeywordNode): string {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularKw(node);\n    }\n  }\n\n  // Like showKw(), but skips tabular formatting\n  private showNonTabularKw(node: KeywordNode): string {\n    switch (this.cfg.keywordCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n\n  private showFunctionKw(node: KeywordNode): string {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularFunctionKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularFunctionKw(node);\n    }\n  }\n\n  // Like showFunctionKw(), but skips tabular formatting\n  private showNonTabularFunctionKw(node: KeywordNode): string {\n    switch (this.cfg.functionCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n\n  private showIdentifier(node: IdentifierNode): string {\n    if (node.quoted) {\n      return node.text;\n    } else {\n      switch (this.cfg.identifierCase) {\n        case 'preserve':\n          return node.text;\n        case 'upper':\n          return node.text.toUpperCase();\n        case 'lower':\n          return node.text.toLowerCase();\n      }\n    }\n  }\n\n  private showDataType(node: DataTypeNode): string {\n    switch (this.cfg.dataTypeCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n}\n","import { FormatOptions } from '../FormatOptions.js';\nimport { indentString } from './config.js';\nimport Params from './Params.js';\n\nimport { createParser } from '../parser/createParser.js';\nimport { StatementNode } from '../parser/ast.js';\nimport { Dialect } from '../dialect.js';\n\nimport ExpressionFormatter from './ExpressionFormatter.js';\nimport Layout, { WS } from './Layout.js';\nimport Indentation from './Indentation.js';\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n  private dialect: Dialect;\n  private cfg: FormatOptions;\n  private params: Params;\n\n  constructor(dialect: Dialect, cfg: FormatOptions) {\n    this.dialect = dialect;\n    this.cfg = cfg;\n    this.params = new Params(this.cfg.params);\n  }\n\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  public format(query: string): string {\n    const ast = this.parse(query);\n    const formattedQuery = this.formatAst(ast);\n    return formattedQuery.trimEnd();\n  }\n\n  private parse(query: string): StatementNode[] {\n    return createParser(this.dialect.tokenizer).parse(query, this.cfg.paramTypes || {});\n  }\n\n  private formatAst(statements: StatementNode[]): string {\n    return statements\n      .map(stat => this.formatStatement(stat))\n      .join('\\n'.repeat(this.cfg.linesBetweenQueries + 1));\n  }\n\n  private formatStatement(statement: StatementNode): string {\n    const layout = new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialect.formatOptions,\n      params: this.params,\n      layout: new Layout(new Indentation(indentString(this.cfg))),\n    }).format(statement.children);\n\n    if (!statement.hasSemicolon) {\n      // do nothing\n    } else if (this.cfg.newlineBeforeSemicolon) {\n      layout.add(WS.NEWLINE, ';');\n    } else {\n      layout.add(WS.NO_NEWLINE, ';');\n    }\n    return layout.toString();\n  }\n}\n","import { FormatOptions } from './FormatOptions.js';\nimport { ParamItems } from './formatter/Params.js';\nimport { ParamTypes } from './lexer/TokenizerOptions.js';\n\nexport class ConfigError extends Error {}\n\nexport function validateConfig(cfg: FormatOptions): FormatOptions {\n  const removedOptions = [\n    'multilineLists',\n    'newlineBeforeOpenParen',\n    'newlineBeforeCloseParen',\n    'aliasAs',\n    'commaPosition',\n    'tabulateAlias',\n  ];\n  for (const optionName of removedOptions) {\n    if (optionName in cfg) {\n      throw new ConfigError(`${optionName} config is no more supported.`);\n    }\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.params && !validateParams(cfg.params)) {\n    // eslint-disable-next-line no-console\n    console.warn('WARNING: All \"params\" option values should be strings.');\n  }\n\n  if (cfg.paramTypes && !validateParamTypes(cfg.paramTypes)) {\n    throw new ConfigError(\n      'Empty regex given in custom paramTypes. That would result in matching infinite amount of parameters.'\n    );\n  }\n\n  return cfg;\n}\n\nfunction validateParams(params: ParamItems | string[]): boolean {\n  const paramValues = params instanceof Array ? params : Object.values(params);\n  return paramValues.every(p => typeof p === 'string');\n}\n\nfunction validateParamTypes(paramTypes: ParamTypes): boolean {\n  if (paramTypes.custom && Array.isArray(paramTypes.custom)) {\n    return paramTypes.custom.every(p => p.regex !== '');\n  }\n  return true;\n}\n","import * as allDialects from './allDialects.js';\n\nimport { FormatOptions } from './FormatOptions.js';\nimport { createDialect, DialectOptions } from './dialect.js';\nimport Formatter from './formatter/Formatter.js';\nimport { ConfigError, validateConfig } from './validateConfig.js';\n\nconst dialectNameMap: Record<keyof typeof allDialects | 'tsql', keyof typeof allDialects> = {\n  bigquery: 'bigquery',\n  db2: 'db2',\n  db2i: 'db2i',\n  hive: 'hive',\n  mariadb: 'mariadb',\n  mysql: 'mysql',\n  n1ql: 'n1ql',\n  plsql: 'plsql',\n  postgresql: 'postgresql',\n  redshift: 'redshift',\n  spark: 'spark',\n  sqlite: 'sqlite',\n  sql: 'sql',\n  tidb: 'tidb',\n  trino: 'trino',\n  transactsql: 'transactsql',\n  tsql: 'transactsql', // alias for transactsq\n  singlestoredb: 'singlestoredb',\n  snowflake: 'snowflake',\n};\n\nexport const supportedDialects = Object.keys(dialectNameMap);\nexport type SqlLanguage = keyof typeof dialectNameMap;\n\nexport type FormatOptionsWithLanguage = Partial<FormatOptions> & {\n  language?: SqlLanguage;\n};\n\nexport type FormatOptionsWithDialect = Partial<FormatOptions> & {\n  dialect: DialectOptions;\n};\n\nconst defaultOptions: FormatOptions = {\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  identifierCase: 'preserve',\n  dataTypeCase: 'preserve',\n  functionCase: 'preserve',\n  indentStyle: 'standard',\n  logicalOperatorNewline: 'before',\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptionsWithLanguage} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: FormatOptionsWithLanguage = {}): string => {\n  if (typeof cfg.language === 'string' && !supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  const canonicalDialectName = dialectNameMap[cfg.language || 'sql'];\n\n  return formatDialect(query, {\n    ...cfg,\n    dialect: allDialects[canonicalDialectName],\n  });\n};\n\n/**\n * Like the above format(), but language parameter is mandatory\n * and must be a Dialect object instead of a string.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptionsWithDialect} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const formatDialect = (\n  query: string,\n  { dialect, ...cfg }: FormatOptionsWithDialect\n): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  return new Formatter(createDialect(dialect), options).format(query);\n};\n\nexport type FormatFn = typeof format;\n"],"mappings":"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,yBACA,oBACA,oBACA;AAAA;AAAA;AAIA,gBACA,gBACA,mBACA,kBACA,uBACA,4BACA,iBACA,UACA,eACA,WACA;AAAA;AAGA;AAAA;AAAA;AAIA,oBACA,iBACA;AAAA;AAGA,gBACA,WACA,QACA,YACA,YACA,aACA,cACA,uBACA,eACA,YACA,cACA;AAAA;AAGA,oBACA,YACA,WACA,gBACA,gBACA,iBACA,kBACA,mBACA,YACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA,sBACA,sBACA,YACA,WACA,eACA,gBACA,aACA,cACA,eACA,kBACA,aACA,0BACA,eACA,mBACA,mBACA,oBACA,eACA,iBACA,gBACA,aACA,iBACA,gBACA,eACA,eACA,WACA,cACA,eACA,aACA,aACA,mBACA,eACA,sBACA,mBACA,kBACA,gBACA,2BACA,cACA,mBACA,oBACA,mBACA,iBACA,oBACA,mBACA,cACA,aACA,eACA,kBACA,0BACA,kBACA,cACA,oBACA,gBACA,gBACA,aACA,eACA,iBACA,iBACA,cACA,YACA,gBACA,aACA,QACA;AAAA;AAGA,oBACA,OACA,QACA,UACA;AAAA;AAGA,kBACA,mBACA,2BACA;AAAA;AAGA,iBACA,WACA,gBACA,iBACA;AAAA;AAGA,gBACA,cACA,uBACA,cACA,sBACA,oBACA,6BACA,oBACA;AAAA;AAGA,OACA,QACA,UACA,UACA,eACA,QACA,QACA,OACA,SACA,OACA,MACA,OACA,SACA,YACA,SACA,OACA,eACA,iBACA,eACA,YACA,iBACA,OACA,SACA,SACA,QACA,WACA,SACA,OACA,QACA,QACA,SACA,OACA,QACA,QACA,SACA,OACA,QACA,QACA,SACA,SACA;AAAA;AAGA,eACA,cACA,aACA,QACA,OACA,mBACA;AAAA;AAGA,sBACA,2BACA,oBACA,mBACA,gBACA,uBACA,qBACA,YACA,qBACA;AAAA;AAGA,QACA,cACA,gBACA,aACA,SACA;AAAA;AAGA;AAAA;AAGA,QACA,aACA,cACA,cACA,eACA,UACA,WACA,YACA;AAAA;AAGA,SACA,eACA,eACA,oBACA,OACA,wBACA,yBACA,UACA,mBACA,aACA,UACA,eACA,eACA,YACA,WACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,0BACA,gBACA,mBACA,kBACA,sBACA,gBACA,kBACA,iBACA,WACA,UACA,WACA,SACA,QACA,SACA,gCACA,WACA,SACA,eACA,UACA,UACA,aACA,aACA,aACA,kBACA,UACA,aACA,QACA,WACA;AAAA;AAGA,gBACA,QACA,WACA,YACA,YACA,aACA,cACA,eACA;AAAA;AAGA,qBACA,WACA,UACA,aACA,iBACA,iBACA,kBACA,mBACA,oBACA,mBACA,qBACA,oBACA,oBACA,gBACA,eACA;AAAA;AAGA;AAAA;AAGA,YACA,MACA,UACA;AAAA;AAAA;AAIA,OACA,WACA,UACA,WACA,QACA,SACA,aACA,cACA,wBACA,SACA,gBACA,yBACA,QACA,OACA,OACA,QACA,OACA,aACA,UACA,cACA,eACA,OACA,OACA,UACA,YACA,WACA;AAAA;AAGA;AAAA;AAGA,WACA,SACA,QACA,SACA,cACA,WACA;AAAA;AAAA;AAIA,YACA,YACA,UACA,UACA,UACA,yBACA,SACA;AAAA;AAGA,gBACA,gBACA,qBACA,QACA,YACA,YACA,OACA,aACA,aACA,mBACA,QACA,UACA,SACA,qBACA,OACA,kBACA,WACA,oBACA,UACA,qBACA,QACA,aACA,qBACA,oBACA,qBACA,qBACA,mBACA,oBACA,qBACA,oBACA,oBACA,QACA;AAAA;AAGA,aACA,YACA,oBACA;AAAA;AAGA,gBACA;AAAA;AAGA,OACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,OACA,QACA,WACA,OACA,SACA,MACA,OACA,QACA,SACA,MACA,OACA,WACA,QACA,SACA,OACA,QACA,QACA,OACA;AAAA;AAGA,gBACA,kBACA;AAAA;AAGA;AAAA;AAEA,SACA,QACA,UACA,SACA,QACA,SACA,WACA,SACA,QACA,SACA,SACA,UACA;AAAA;AAGA,oBACA,2BACA;AAAA;AAGA,QACA,UACA;AAAA;AAGA,OACA,SACA,OACA,OACA,UACA,OACA,aACA,cACA,eACA,OACA,cACA,QACA,aACA,SACA,gBACA,mBACA,mBACA,QACA,mBACA;AAAA;AAGA,gBACA,SACA,eACA,QACA,oBACA,MACA,YACA,QACA,QACA;AAAA;AAGA,kBACA;AAAA;AAGA;AAAA;AAGA,SACA,UACF;;;AC3kBO,IAAMC,QAAA,GAAqB;AAAA;AAEhC,OACA,OACA,OACA,MACA,OACA,wBACA,MACA,WACA,MACA,QACA,QACA,WACA,YACA,UACA,SACA,QACA,WACA,WACA,UACA,QACA,YACA,QACA,OACA,QACA,UACA,UACA,WACA,UACA,WACA,SACA,SACA,aACA,OACA,QACA,QACA,SACA,YACA,UACA,QACA,UACA,MACA,UACA,MACA,SACA,aACA,QACA,MACA,QACA,WACA,QACA,SACA,UACA,SACA,WACA,OACA,MACA,OACA,QACA,SACA,MACA,MACA,MACA,SACA,SACA,QACA,aACA,aACA,SACA,SACA,aACA,WACA,SACA,UACA,QACA,UACA,OACA,QACA,SACA,eACA,QACA,MACA,SACA,QACA,aACA,SACA,UACA,SACA,QACA,SACA,UACA,QACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA,MACA,OACA,SACA,WACA,YACA,WACA,YACA,gBACF;AAEO,IAAMC,SAAA,GAAsB;AAAA;AAEjC;AAAA;AACA,QACA;AAAA;AACA,QACA,YACA,aACA,YACA,SACA,OACA,YACA,WACA,UACA,WACA,WACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,WACA;AAAA;AACA;AAAA;AACA,QACA,WACF;;;ACnIA,IAAMC,cAAA,GAAiB3D,aAAA,CAAc,CAAC,gDAAgD,CAAC;AAEvF,IAAM4D,eAAA,GAAkB5D,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,WACA,UACA,gBACA,YACA,SACA,UACA;AAAA;AAAA;AAAA;AAGA,iBACA;AAAA;AAEA;AAAA;AAEA,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;IACF,WAAW9D,KAAA,CAAMrC,IAAA,KAAS,MAAM;MAC9BmG,KAAA,IAAS;IACX;IACA,IAAIA,KAAA,KAAU,GAAG;MACf,OAAOT,CAAA;IACT;EACF;EACA,OAAOR,MAAA,CAAOpE,MAAA,GAAS;AACzB;;;ACzQO,IAAMsF,UAAA,GAAsB;AAAA;AAEjC,aACA,OACA,eACA,SACA,aACA,cACA,mBACA,aACA,YACA,WACA,OACA,UACA,OACA,mBACA,mBACA,gBACA,aACA,aACA,cACA,kBACA,aACA,WACA,cACA,YACA,YACA,YACA,UACA,eACA,OACA,YACA,iBACA,UACA;AAAA;AAGA,OACA,UACA,QACA,YACA,aACA,eACA,cACA,eACA,aACA,OACA,gBACA,eACA,cACA,cACA,eACA,SACA,aACA,QACA,QACA,SACA,SACA,UACA,aACA,SACA,UACA,UACA,UACA,gBACA,SACA,eACA,WACA,QACA,oBACA,OACA,YACA,iBACA,qBACA,oBACA,UACA,OACA,QACA,OACA,mBACA,oBACA,aACA,cACA,OACA,WACA,cACA,aACA,iBACA,aACA,QACA,gBACA,wBACA,kBACA,YACA,mBACA,UACA,eACA,gBACA,WACA,SACA,cACA,UACA,oBACA,cACA,cACA,gBACA,eACA,WACA,mBACA,OACA,WACA,aACA,SACA,sBACA,mBACA,WACA,YACA,QACA,SACA,SACA,eACA,OACA,YACA,QACA,iBACA,sBACA,UACA,WACA,UACA,SACA,UACA,UACA,UACA,WACA,UACA,WACA,WACA,UACA,cACA,eACA,cACA,gBACA,cACA,cACA,YACA,SACA,SACA,QACA,UACA,WACA,WACA,WACA,MACA,UACA,oBACA,SACA,gBACA,mBACA,SACA,QACA,SACA,OACA,mBACA,eACA,oBACA,OACA,UACA,mBACA,OACA,SACA,aACA,kBACA,gBACA,YACA,cACA,gBACA,aACA,aACA,sBACA,OACA,UACA,OACA,QACA,gBACA,WACA,aACA,YACA,UACA,OACA,SACA,YACA,WACA,eACA,iBACA,WACA,eACA,QACA,UACA,YACA,WACA,gBACA,kBACA,gBACA,eACA,sBACA,kBACA,iBACA,UACA,WACA,OACA,WACA,SACA,SACA,mBACA,QACA,SACA,YACA,oBACA,oBACA,UACA,mBACA,QACA,OACA,QACA,WACA,SACA,QACA,SACA,WACA,UACA,YACA,UACA,WACA,WACA,WACA,aACA,cACA,gBACA,OACA,QACA,cACA,gBACA,aACA,aACA,oBACA,iBACA,iBACA,YACA,WACA,WACA,WACA,UACA,iBACA,YACA,YACA,aACA,kBACA,gBACA,oBACA,cACA,aACA,QACA,cACA,mBACA,YACA,SACA,WACA,aACA,eACA,SACA,eACA,SACA,SACA,sBACA,kBACA,sBACA,yBACA,wBACA,wCACA,QACA,YACA,iBACA,gBACA,iBACA,cACA,aACA,eACA,cACA,aACA,iBACA,YACA,SACA,YACA,UACA,gBACA,WACA,eACA,kBACA,gBACA,QACA,iBACA;AAAA;AAGA,cACA,cACA,UACA;AAAA;AAAA;AAIA,QACA,cACA,SACA,OACA,QACA,cACA,eACA,cACA,aACA;AAAA;AAGA,OACF;;;ACpUO,IAAMC,SAAA,GAAqB;AAAA;AAEhC,YACA,OACA,SACA,SACA,OACA,YACA,SACA,SACA,OACA,OACA,MACA,cACA,aACA,WACA,MACA,cACA,SACA,iBACA,OACA,aACA,UACA,SACA,WACA,UACA,cACA,MACA,SACA,QACA,UACA,WACA,eACA,YACA,QACA,QACA,SACA,SACA,SACA,WACA,cACA,UACA,UACA,WACA,UACA,UACA,aACA,WACA,cACA,cACA,YACA,YACA,SACA,aACA,UACA,SACA,WACA,gBACA,oBACA,gBACA,kBACA,kBACA,gBACA,qBACA,oBACA,gBACA,UACA,SACA,QACA,YACA,qBACA,oBACA,OACA,QACA,cACA,YACA,UACA,UACA,mBACA,kBACA,cACA,WACA,WACA,YACA,cACA,UACA,aACA,cACA,YACA,cACA,iBACA,eACA,WACA,YACA,cACA,YACA,MACA,YACA,QACA,UACA,WACA,QACA,YACA,QACA,UACA,UACA,YACA,cACA,OACA,YACA,UACA,SACA,UACA,SACA,UACA,aACA,aACA,aACA,WACA,UACA,QACA,WACA,YACA,YACA,WACA,UACA,SACA,aACA,QACA,SACA,UACA,OACA,WACA,QACA,QACA,QACA,YACA,WACA,aACA,OACA,UACA,MACA,QACA,SACA,WACA,SACA,WACA,QACA,gBACA,UACA,QACA,QACA,QACA,SACA,YACA,MACA,aACA,UACA,MACA,aACA,aACA,aACA,SACA,aACA,cACA,OACA,YACA,WACA,SACA,SACA,eACA,UACA,aACA,aACA,QACA,MACA,UACA,UACA,aACA,WACA,OACA,QACA,QACA,QACA,OACA,SACA,YACA,SACA,WACA,YACA,SACA,QACA,QACA,SACA,YACA,SACA,aACA,UACA,aACA,kBACA,WACA,YACA,QACA,WACA,YACA,QACA,cACA,gBACA,YACA,eACA,gBACA,UACA,WACA,YACA,QACA,YACA,SACA,UACA,OACA,OACA,aACA,WACA,MACA,WACA,WACA,YACA,cACA,cACA,cACA,QACA,WACA,cACA,QACA,WACA,QACA,SACA,YACA,QACA,MACA,OACA,UACA,OACA,aACA,MACA,QACA,gBACA,YACA,UACA,MACA,SACA,OACA,SACA,QACA,cACA,WACA,UACA,YACA,aACA,QACA,aACA,eACA,gBACA,cACA,YACA,QACA,WACA,aACA,QACA,YACA,aACA,WACA,WACA,WACA,UACA,cACA,aACA,WACA,QACA,UACA,SACA,WACA,SACA,QACA,QACA,SACA,YACA,cACA,eACA,WACA,WACA,UACA,UACA,SACA,YACA,WACA,YACA,UACA,sBACA,UACA,WACA,UACA,SACA,QACA,YACA,iBACA,cACA,eACA,mBACA,mBACA,iBACA,YACA,WACA,OACA,aACA,QACA,UACA,cACA,OACA,OACA,aACA,UACA,cACA,UACA,UACA,UACA,WACA,UACA,YACA,UACA,aACA,YACA,WACA,gBACA,OACA,UACA,UACA,QACA,QACA,UACA,YACA,OACA,SACA,WACA,YACA,SACA,YACA,aACA,UACA,YACA,QACA,YACA,UACA,SACA,aACA,WACA,WACA,UACA,UACA,WACA,UACA,eACA,SACA,cACA,QACA,MACA,eACA,WACA,QACA,YACA,QACA,QACA,SACA,UACA,SACA,UACA,SACA,QACA,SACA,aACA,SACA,UACA,YACA,WACA,QACA,WACA,QACA,YACA,WACA,QACA,YACA,SACA,SACA,QACA,WACA,OACA,SACA,cACA,aACA,iBACA,QACA,QACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,SACA,UACA,UACA,QACA,WACA,SACA,QACA,aACA,QACA,QACA,YACA,UACA,OACA,WACA,UACA,oBACA,SACA,UACA,UACA,WACA,OACA,QACA,QACA,QACA,WACA,YACA,gBACA,mBACA,SACA,QACA,SACA,YACA,WACA,YACA,QACA,QACA,aACA,aACA,WACA,aACF;;;ACxbA,IAAMC,eAAA,GAAiBhH,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMiH,gBAAA,GAAkBjH,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,SACA,YACA,UACA,gBACA,6BACA,SACA,UACA,cACA,mBACA,2BACA,6EACA,oBACA,oBACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA;AAAA;AAEA,cACA,6BACA,cACA,SACD;AAED,IAAMkH,uBAAA,GAAyBlH,aAAA,CAAc,CAC3C,6DACD;AAED,IAAMmH,sBAAA,GAAwBnH,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA,UACA,oBACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,gBACA,iBACA,iBACA,kBACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,YACA,sBACA,oBACA,kCACA,kBACA,uBACA,kBACA,4BACA,eACA,cACA,gBACA,gBACA,kBACA,iBACA,oBACA,mBACA,gBACA,kCACA,yBACA,kBACA,gBACA,uBACA,kBACA,oBACA,mBACA,iBACA,yBACA,cACA,oBACA,sBACA,cACA,yBACA,wBACA,kBACA,iBACA,mBACA,kBACA,oBACA,iBACA,yBACA,cACA,+CACA,SACA,yBACA,QACA,SACA,cACA,iBACA,WACA,sCACA,uBACA,qBACA,mCACA,wBACA,gCACA,2BACA,6BACA,yBACA,0BACA,4BACA,4BACA,8BACA,gCACA,kCACA,iCACA,eACA,iBACA,qCACA,0BACA,gCACA,wBACA,iBACA,mBACA,kBACA,mEACA,oBACA,uCACA,+BACA,0BACA,4BACA,uBACA,qBACA,2BACA,gCACA,0BACA,yBACA,mBACA,kBACA,WACA,kCACA,6BACA,cACA,uBACA,qBACA,mBACA,iCACA,sBACA,4BACA,yBACA,2BACA,0BACA,aACA,0BACA,eACA,iBACA,gBACA,mBACA,6BACA,aACA,eACA,mCACA,wBACA,iBACA,eACA,sBACA,iBACA,wBACA,mCACA,iCACA,kBACA,gBACA,wBACA,uBACA,mBACA,yBACA,iBACA,yBACA,kCACA,iBACA,gBACA,kBACA,uBACA,uBACA,kCACA,gBACA,wCACA,uBACA,yBACA,oCACA,iCACA,wCACA,gBACA,mBACA,QACA;AAAA;AACA,WACA,WACA,SACA,cACA,QACA,QACA,QACA,WACA,iBACA,WACA,0BACA,kDACA,UACA,YACA,UACA;AAAA;AACA,kCACA,aACA,+BACA,kBACA;AAAA;AACA,2BACA,2BACA,iBACA,gBACA,YACA,YACA,cACA,qBACA,8CACA,kBACA,UACA,yBACA,gDACA,QACD;AAED,IAAMoH,sBAAA,GAAwBpH,aAAA,CAAc,CAAC,eAAe,gBAAgB,iBAAiB,CAAC;AAE9F,IAAMqH,cAAA,GAAgBrH,aAAA,CAAc,CAClC,QACA,sCACA,uBACD;AAED,IAAMsH,gBAAA,GAAkBtH,aAAA,CAAc,CACpC,aACA,aACA,YACA,yBACD;AAEM,IAAMjB,GAAA,GAAsB;EACjCmF,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAqD,eAAA;IACApD,eAAA,EAAiB,CAAC,GAAGqD,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzFpD,qBAAA,EAAAqD,sBAAA;IACApD,aAAA,EAAAqD,cAAA;IACApD,eAAA,EAAAqD,gBAAA;IACAlD,gBAAA,EAAkB0C,SAAA;IAClBzC,iBAAA,EAAmB0C,UAAA;IACnBzC,qBAAA,EAAuBuC,UAAA;IACvBtC,WAAA,EAAa,CAAC,IAAI;IAClBC,WAAA,EAAa,CACX;MAAEC,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,KAAK,KAAK,IAAI;IAAE,GAC7C;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,MAAM,MAAM,IAAI;MAAGC,aAAA,EAAe;IAAK,EAC5E;IACAC,UAAA,EAAY,CAAC,OAAO;IACpBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAOC,IAAA,EAAM;IAAM;IACxCzC,UAAA,EAAY;MAAEC,UAAA,EAAY;MAAMC,KAAA,EAAO,CAAC,GAAG;IAAE;IAC7CwC,UAAA,EAAY;MAAEF,KAAA,EAAO;MAAOC,IAAA,EAAM;IAAM;IACxCjC,SAAA,EAAW,CACT,MACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA;EAEJ;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGwB,uBAAA,EAAwB,GAAGC,sBAAqB;IACpErD,qBAAA,EAAAqD;EACF;AACF;;;AClTO,IAAMO,UAAA,GAAsB;AAAA;AAAA;AAGjC,aACA,OACA,QACA,eACA,SACA,aACA,aACA,cACA,SACA,cACA,mBACA,SACA,YACA,iBACA,kBACA,WACA,OACA,UACA,OACA,mBACA;AAAA;AAEA,aACA,aACA,cACA,kBACA,WACA,cACA,YACA,YACA,YACA,QACA,cACA,UACA,eACA,OACA,WACA,YACA,OACA,YACA,iBACA,UACA;AAAA;AAGA,OACA,UACA,QACA,YACA,aACA,eACA,cACA,eACA,aACA,WACA,yBACA,cACA,SACA,QACA,QACA,SACA,SACA,iBACA,iBACA,cACA,UACA,aACA,UACA,SACA,UACA,gBACA,eACA,QACA,WACA,eACA,oBACA,OACA,YACA,oBACA,UACA,YACA,OACA,QACA,OACA,WACA,WACA,YACA,qBACA,oBACA,OACA,WACA,cACA,iBACA,aACA,aACA,QACA,mBACA,kBACA,mBACA,oBACA,kBACA,eACA,gBACA,cACA,WACA,cACA,UACA,aACA,cACA,iBACA,aACA,iBACA,eACA,eACA,WACA,oBACA,UACA,WACA,eACA,kBACA,eACA,gBACA,OACA,WACA,aACA,SACA,mBACA,sBACA,sBACA,wBACA,gBACA,WACA,YACA,YACA,YACA,aACA,eACA,eACA,eACA,gBACA,OACA,YACA,QACA,sBACA,sBACA,oBACA,eACA,iBACA,YACA,mBACA,cACA,kBACA,aACA,iBACA,YACA,sBACA,UACA,UACA,SACA,aACA,WACA,cACA,aACA,UACA,cACA,eACA,cACA,gBACA,eACA,cACA,cACA,QACA,YACA,SACA,SACA,QACA,UACA,MACA,QACA,oBACA,UACA,SACA,OACA,SACA,QACA,SACA,mBACA,OACA,eACA,oBACA,OACA,UACA,OACA,SACA,aACA,kBACA,UACA,cACA,aACA,iBACA,UACA,gBACA,YACA,sBACA,OACA,UACA,OACA,gBACA,WACA,MACA,YACA,UACA,OACA,SACA,YACA,WACA,WACA,eACA,UACA,QACA,gBACA,gBACA,kBACA,iBACA,UACA,WACA,OACA,SACA,mBACA,SACA,QACA,OACA,SACA,SACA,UACA,QACA,OACA,QACA,WACA,SACA,QACA,SACA,WACA,UACA,YACA,UACA,aACA,cACA,gBACA,OACA,QACA,oBACA,iBACA,qBACA,iBACA,WACA,WACA,WACA,aACA,gBACA,cACA,aACA,cACA,QACA,mBACA,SACA,YACA,SACA,SACA,cACA,cACA,SACA,oBACA,sBACA,yBACA,kBACA,yBACA,YACA,QACA,QACA,iBACA,cACA,aACA,eACA,cACA,aACA,iBACA,YACA,SACA,UACA,gBACA,WACA,eACA,OACA,gBACA,QACA;AAAA;AAGA,cACA,4BACA,uBACA,yBACA,oBACA,2BACA,sBACA,0BACA,qBACA,yBACA,oBACA,cACA,aACA,iBACA,gBACA,oBACA;AAAA;AAGA;AAAA;AAGA,aACA,cACA,eACA,OACA,cACA,QACA,aACA,SACA,gBACA,QACA,mBACA;AAAA;AAGA,OACF;;;ACnVO,IAAMC,SAAA,GAAqB;AAAA;AAAA;AAAA;AAIhC,UACA,aACA,UACA,UACA,YACA,OACA,SACA,OACA,YACA,SACA,SACA,OACA,OACA,UACA,YACA,SACA,aACA,cACA,MACA,OACA,cACA,aACA,UACA,UACA,cACA,iBACA,cACA,UACA,SACA,WACA,QACA,QACA,cACA,MACA,SACA,QACA,UACA,eACA,QACA,QACA,SACA,MACA,SACA,WACA,WACA,cACA,UACA,WACA,UACA,WACA,eACA,YACA,UACA,cACA,aACA,WACA,mBACA,cACA,YACA,cACA,YACA,WACA,YACA,QACA,SACA,aACA,UACA,YACA,SACA,QACA,aACA,WACA,gBACA,gBACA,kBACA,kBACA,gBACA,qBACA,oBACA,gBACA,UACA,SACA,YACA,qBACA,oBACA,OACA,QACA,cACA,YACA,UACA,UACA,mBACA,kBACA,cACA,cACA,WACA,WACA,YACA,SACA,UACA,cACA,UACA,YACA,cACA,aACA,QACA,YACA,cACA,UACA,iBACA,eACA,WACA,YACA,cACA,YACA,MACA,YACA,QACA,WACA,QACA,QACA,UACA,SACA,UACA,YACA,cACA,OACA,YACA,UACA,YACA,SACA,UACA,SACA,UACA,aACA,aACA,aACA,WACA,UACA,QACA,UACA,YACA,WACA,SACA,UACA,SACA,aACA,QACA,SACA,eACA,OACA,WACA,UACA,QACA,YACA,QACA,QACA,YACA,YACA,WACA,aACA,OACA,UACA,MACA,QACA,SACA,SACA,WACA,QACA,YACA,gBACA,UACA,QACA,QACA,QACA;AAAA;AAEA,YACA,MACA,UACA,aACA,cACA,MACA,WACA,aACA,aACA,aACA,SACA,WACA,aACA,OACA,YACA,WACA,UACA,SACA,SACA,eACA,UACA,aACA,aACA,aACA,aACA,QACA,MACA,UACA,aACA,WACA,QACA,QACA,QACA,cACA,iBACA,eACA,eACA,kBACA,cACA,cACA,cACA,QACA,OACA,QACA,SACA,OACA,YACA,cACA,WACA,QACA,SACA,QACA,UACA,QACA,SACA,YACA,WACA,SACA,aACA,aACA,kBACA,YACA,WACA,QACA,YACA,OACA,UACA,QACA,cACA,QACA,WACA,gBACA,YACA,SACA,eACA,gBACA,cACA,UACA,WACA,YACA,UACA,SACA,QACA,YACA,SACA,UACA,aACA,OACA,YACA,SACA,SACA,UACA,OACA,aACA,WACA,MACA,WACA,WACA,YACA,cACA,cACA,cACA,QACA,WACA,cACA,OACA,WACA,aACA,SACA,QACA,SACA,YACA,QACA,UACA,MACA,OACA,UACA,OACA,aACA,QACA,MACA,QACA,QACA,YACA,UACA,MACA,SACA,cACA,YACA,OACA,SACA,QACA,WACA,cACA,WACA,UACA,QACA,YACA,aACA,QACA,aACA,eACA,gBACA,cACA,WACA,YACA,QACA,WACA,gBACA,mBACA,mBACA,UACA,cACA,aACA,QACA,QACA,YACA,WACA,WACA,WACA,SACA,UACA,cACA,aACA,WACA,aACA,SACA,SACA,QACA,mBACA,UACA,QACA,SACA,YACA,cACA,eACA,WACA,eACA,WACA,UACA,UACA,SACA,YACA,WACA,UACA,sBACA,UACA,aACA,WACA,UACA,OACA,SACA,YACA,UACA,WACA,OACA,cACA,aACA,QACA,OACA,OACA,aACA,QACA,UACA,UACA,cACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,aACA,YACA,WACA,gBACA,OACA,UACA,UACA,QACA,QACA,QACA,UACA,YACA,OACA,SACA,kBACA,qBACA,WACA,SACA,YACA,aACA,UACA,YACA,aACA,WACA,WACA,eACA,eACA,SACA,cACA,eACA,OACA,QACA,cACA,MACA,eACA,YACA,WACA,QACA,cACA,QACA,YACA,YACA,QACA,QACA,SACA,UACA,QACA,WACA,UACA,SACA,UACA,YACA,OACA,SACA,OACA,QACA,UACA,SACA,SACA,UACA,YACA,WACA,QACA,WACA,cACA,QACA,YACA,QACA,QACA,YACA,SACA,SACA,QACA,UACA,WACA,WACA,WACA,SACA,cACA,UACA,iBACA,WACA,cACA,aACA,eACA,cACA,aACA,YACA,iBACA,YACA,SACA,UACA,gBACA,YACA,WACA,eACA,gBACA,aACA,QACA,SACA,OACA,OACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,SACA,UACA,UACA,OACA,QACA,WACA,SACA,QACA,aACA,QACA,QACA,YACA,QACA,UACA,YACA,WACA,OACA,UACA,oBACA,SACA,WACA,OACA,WACA,QACA,WACA,QACA,SACA,YACA,QACA,aACA,aACA,WACA,cACA,MACF;;;ACjhBA,IAAMC,eAAA,GAAiB7H,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAM8H,gBAAA,GAAkB9H,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,QACA,SACA,YACA,UACA,gBACA,wCACA,SACA,UACA,wBACA,mBACA,iBACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA;AAAA;AAEA,cACA,6BACA,cACA,UACA;AAAA;AAEA,kBACD;AAED,IAAM+H,uBAAA,GAAyB/H,aAAA,CAAc,CAAC,2BAA2B,CAAC;AAE1E,IAAMgI,sBAAA,GAAwBhI,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA,UACA,oBACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,gBACA,kBACA,iBACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,wBACA;AAAA;AAEA,mBACA,kDACA,2CACA,kDACA,+CACA,yBACA,QACA,SACA,kJACA,0DACA,kEACA,6CACA,4EACA,wBACA,6BACA,0GACA,iCACA,wCACA,iBACA,eACA,gDACA,kBACA,kCACA,WACA,mBACA,kBACA,qBACA,kCACA,kBACA,wBACA,wBACA,4HACA,gEACA,uBACA;AAAA;AAEA,gBACA,yCACA,uCACA,sJACA,gBACA,WACA,oIACA,wDACA,cACA,QACA,WACA,iBACA,WACA,0BACA,6BACA,uJACA,yCACA,aACA,kBACA,gHACA,yCACA,2BACA,cACA,kDACA,yDACA,6BACA,oBACA,mBACA,2BACA,OACA,yBACA,+CACD;AAED,IAAMiI,sBAAA,GAAwBjI,aAAA,CAAc,CAAC,eAAe,gBAAgB,iBAAiB,CAAC;AAE9F,IAAMkI,cAAA,GAAgBlI,aAAA,CAAc,CAClC,QACA,sCACA,iCACA,uBACD;AAED,IAAMmI,gBAAA,GAAkBnI,aAAA,CAAc,CACpC,aACA,aACA,YACA,yBACD;AAGM,IAAMhB,IAAA,GAAuB;EAClCkF,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAkE,eAAA;IACAjE,eAAA,EAAiB,CAAC,GAAGkE,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzFjE,qBAAA,EAAAkE,sBAAA;IACAjE,aAAA,EAAAkE,cAAA;IACAjE,eAAA,EAAAkE,gBAAA;IACA/D,gBAAA,EAAkBuD,SAAA;IAClBtD,iBAAA,EAAmBuD,UAAA;IACnBtD,qBAAA,EAAuBoD,UAAA;IACvBU,mBAAA,EAAqB;IACrB7D,WAAA,EAAa,CAAC,IAAI;IAClBC,WAAA,EAAa,CACX;MAAEC,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,KAAK,GAAG;IAAE,GACvC;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,MAAM,MAAM,IAAI;MAAGC,aAAA,EAAe;IAAK,EAC5E;IACAC,UAAA,EAAY,CAAC,OAAO;IACpBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAOC,IAAA,EAAM;IAAM;IACxCzC,UAAA,EAAY;MAAEC,UAAA,EAAY;MAAMC,KAAA,EAAO,CAAC,GAAG;IAAE;IAC7CwC,UAAA,EAAY;MAAEF,KAAA,EAAO;MAAOC,IAAA,EAAM;IAAM;IACxCjC,SAAA,EAAW,CAAC,MAAM,SAAM,SAAM,SAAM,MAAM,MAAM,MAAM,IAAI;EAC5D;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGqC,uBAAA,EAAwB,GAAGC,sBAAqB;IACpElE,qBAAA,EAAAkE;EACF;AACF;;;ACvLO,IAAMK,UAAA,GAAsB;AAAA;AAAA;AAGjC,OACA,QACA,QACA,QACA,OACA,UACA,QACA,QACA,WACA,QACA,OACA;AAAA;AAEA,OACA,aACA,SACA,YACA,OACA,SACA,MACA,OACA,SACA,QACA,YACA,MACA,QACA,YACA,OACA,SACA,WACA,QACA,SACA,aACA,cACA,sBACA,QACA,OACA,QACA,OACA,SACA;AAAA;AAGA,kBACA,YACA,cACA,QACA;AAAA;AAGA,UACA;AAAA;AAGA,cACA,QACA,YACA,eACA,YACA,YACA,OACA,WACA,cACA,aACA,WACA,iBACA,sBACA,QACA,YACA,UACA,SACA,kBACA,YACA,WACA,UACA,aACA,WACA,oBACA,SACA,kBACA,cACA;AAAA;AAGA,eACA,YACA,MACA,aACA,UACA,UACA;AAAA;AAGA,SACA,UACA,oBACA,OACA,UACA,aACA,kBACA,UACA,OACA,UACA,SACA,eACA,iBACA,mBACA,WACA,WACA,SACA,SACA,UACA,eACA,UACA,SACA,QACA,SACA,UACA,gBACA,aACA,UACA,SACA,kBACA,kBACA,UACA,WACA,QACA,SACA,aACA,WACA,SACA,SACA,cACA,UACA,aACA,aACA,QACA,SACA,YACA;AAAA;AAGA,QACA,gBACA,aACA,eACA,qBACA;AAAA;AAGA,eACA,eACA,SACA,oBACA,gBACA,QACA,eACA,kBACA,OACA,WACA,OACA,QACA,QACA,iBACA;AAAA;AAGA,OACA,gBACA,eACA,QACA,SACA,aACA,cACA,qBACA,OACA,OACA,SACA,cACA,qBACA,aACA,aACA,cACA,kBACA,WACA,cACA,YACA,YACA,YACA,cACA,eACA,OACA,WACA,YACA;AAAA;AAGA,WACA,UACA,cACA,mBACA,cACA;AAAA;AAGA,QACA,OACA,eACA,cACA,QACA,cACA,cACA,aACA,gBACA,QACF;;;AC1NO,IAAMC,SAAA,GAAqB;AAAA;AAAA;AAGhC,OACA,SACA,SACA,WACA,WACA,OACA,UACA,UACA,WACA,WACA,UACA,WACA,aACA,iBACA,cACA,WACA,WACA,WACA,eACA,WACA,eACA,YACA,QACA,aACA,YACA,OACA,gBACA,YACA,WACA,aACA,cACA,QACA,eACA,aACA,WACA,cACA,aACA,UACA,WACA,aACA,WACA,UACA,UACA,QACA,cACA,SACA,UACA,aACA,aACA,gBACA,QACA,iBACA,UACA,SACA,WACA,UACA,eACA,eACA,SACA,OACA,QACA,YACA,SACA,SACA,QACA,YACA,QACA,SACA,WACA,QACA,WACA,gBACA,YACA,SACA,UACA,SACA,QACA,UACA,WACA,WACA,UACA,gBACA,gBACA,aACA,SACA,eACA,cACA,QACA,UACA,cACA,cACA,SACA,QACA,YACA,WACA,gBACA,gBACA,UACA,UACA,UACA,WACA,eACA,YACA,WACA,QACA,SACA,UACA,WACA,UACA,QACA,SACA,mBACA,UACA,QACA,UACA,QACA,iBACA,UACA,QACA,UACA,OACA,cACA,UACA,eACA,UACA,UACA,iBACA,aACA,cACA,WACA,SACA,gBACA,aACA,QACA,aACA,UACA,SACA,YACA,OACA,OACA,OACA,gBACA,cACA,QACA,SACA,QACA,cACA,aACA,SACA,UACA,YACA,eACA,QACA,SACA,SACA,OACA,QACA,UACA,cACA,SACA,QACA,YACA,UACA,OACA,cACA,YACA,WACA,WACA,iBACA,QACA,SACA,UACA,SACA,QACA,SACA,WACA,WACA,eACA;AAAA;AAGA,OACA,SACA,OACA,MACA,iBACA,WACA,QACA,MACA,QACA,QACA,UACA,QACA,UACA,SACA,QACA,WACA,gBACA,qBACA,UACA,YACA,UACA,YACA,YACA,QACA,QACA,OACA,YACA,UACA,YACA,YACA,SACA,SACA,aACA,OACA,QACA,QACA,YACA,SACA,SACA,YACA,UACA,MACA,UACA,MACA,SACA,UACA,aACA,QACA,MACA,QACA,WACA,QACA,QACA,QACA,SACA,SACA,QACA,QACA,OACA,QACA,MACA,MACA,MACA,SACA,OACA,SACA,QACA,eACA,aACA,WACA,aACA,YACA,aACA,SACA,SACA,UACA,UACA,SACA,UACA,OACA,QACA,UACA,OACA,SACA,eACA,QACA,MACA,aACA,WACA,QACA,YACA,aACA,SACA,cACA,UACA,QACA,SACA,gBACA,UACA,QACA,SACA,UACA,QACA,UACA,QACA,UACA,SACA,YACA,SACA,SACA,cACA,WACA,WACA,cACA,aACA,WACA,SACA,SACA,QACA;AAAA;AAGA,YACA,gBACA,OACA,OACA,OACA,WACA,QACA,UACA,YACA,eACA,eACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,SACA,UACA,UACA,WACA,QACA,QACA,WACA,UACA,SACA,OACA,WACA,YACA,OACA,WACA,aACA,YACA,UACA,aACA,UACF;;;AC/UA,IAAMC,eAAA,GAAiBxI,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMyI,gBAAA,GAAkBzI,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,WACA,cACA,iBACA;AAAA;AAAA;AAAA;AAAA;AAKA,uBACA;AAAA;AAEA;AAAA;AAEA,cACA,6BACA,cACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA,4BACA,yBACD;AAED,IAAM0I,uBAAA,GAAyB1I,aAAA,CAAc,CAC3C,sDACD;AAED,IAAM2I,sBAAA,GAAwB3I,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA;AAAA;AAEA;AAAA;AAEA,SACA,UACA,OACA,YACA,QACA,SACA,QACA,aACA,aACA,aACD;AAED,IAAM4I,sBAAA,GAAwB5I,aAAA,CAAc,CAAC,wBAAwB,CAAC;AAEtE,IAAM6I,cAAA,GAAgB7I,aAAA,CAAc,CAClC,QACA,sCACA;AAAA;AAEA,iBACD;AAED,IAAM8I,gBAAA,GAAkB9I,aAAA,CAAc,CAAC,wBAAwB,CAAC;AAGzD,IAAMf,IAAA,GAAuB;EAClCiF,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA6E,eAAA;IACA5E,eAAA,EAAiB,CAAC,GAAG6E,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzF5E,qBAAA,EAAA6E,sBAAA;IACA5E,aAAA,EAAA6E,cAAA;IACA5E,eAAA,EAAA6E,gBAAA;IACA1E,gBAAA,EAAkBkE,SAAA;IAClBjE,iBAAA,EAAmBkE,UAAA;IACnBjE,qBAAA,EAAuB+D,UAAA;IACvB9D,WAAA,EAAa,CAAC,IAAI;IAClBC,WAAA,EAAa,CAAC,SAAS,OAAO;IAC9BI,UAAA,EAAY,CAAC,IAAI;IACjBO,aAAA,EAAe,CAAC;MAAEV,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,CAAC;IACrEY,SAAA,EAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,MAAM,KAAK,IAAI;EAC7D;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGgD,uBAAA,EAAwB,GAAGC,sBAAqB;IACpE7E,qBAAA,EAAA6E;EACF;AACF;;;ACxGO,SAASI,aAAYpD,MAAA,EAAiB;EAC3C,OAAOA,MAAA,CAAOpF,GAAA,CAAI,CAACuC,KAAA,EAAOqD,CAAA,KAAM;IAC9B,MAAM6C,SAAA,GAAYrD,MAAA,CAAOQ,CAAA,GAAI,CAAC,KAAKzD,SAAA;IACnC,IAAIK,OAAA,CAAQG,GAAA,CAAIJ,KAAK,KAAKkG,SAAA,CAAUvI,IAAA,KAAS,KAAK;MAEhD,OAAOsF,aAAA,CAAAC,cAAA,KAAKlD,KAAA,GAAL;QAAYlC,IAAA;MAAuC;IAC5D;IACA,MAAMkF,SAAA,GAAYH,MAAA,CAAOQ,CAAA,GAAI,CAAC,KAAKzD,SAAA;IACnC,IAAIK,OAAA,CAAQM,MAAA,CAAOP,KAAK,KAAKgD,SAAA,CAAUrF,IAAA,KAAS,KAAK;MAEnD,OAAOsF,aAAA,CAAAC,cAAA,KAAKlD,KAAA,GAAL;QAAYlC,IAAA;MAAuC;IAC5D;IACA,OAAOkC,KAAA;EACT,CAAC;AACH;;;AClBO,IAAMmG,SAAA,GAAqB;AAAA;AAEhC,cACA,OACA,OACA,SACA,WACA,OACA,MACA,OACA,cACA,UACA,WACA,QACA,MACA,QACA,WACA,QACA,UACA,SACA,WACA,UACA,aACA,cACA,YACA,WACA,UACA,SACA,gBACA,gBACA,gBACA,qBACA,gBACA,UACA,YACA,aACA,YACA,mBACA,cACA,cACA,WACA,WACA,WACA,UACA,oBACA,QACA,YACA,iBACA,YACA,eACA,OACA,iBACA,QACA,QACA,QACA,QACA,UACA,YACA,WACA,UACA,UACA,QACA,WACA,SACA,SACA,OACA,SACA,WACA,QACA,YACA,WACA,SACA,SACA,UACA,iBACA,oBACA,eACA,eACA,MACA,UACA,qBACA,qBACA,MACA,SACA,UACA,SACA,SACA,eACA,UACA,aACA,YACA,QACA,MACA,WACA,QACA,OACA,QACA,QACA,WACA,SACA,QACA,QACA,SACA,UACA,SACA,QACA,aACA,kBACA,QACA,QACA,gBACA,2BACA,iCACA,SACA,YACA,sBACA,iBACA,OACA,YACA,WACA,OACA,sBACA,QACA,UACA,MACA,YACA,UACA,cACA,MACA,SACA,OACA,SACA,WACA,QACA,iBACA,mBACA,aACA,YACA,WACA,aACA,SACA,SACA,QACA,SACA,cACA,aACA,iBACA,cACA,UACA,WACA,UACA,UACA,WACA,WACA,YACA,YACA,UACA,aACA,UACA,SACA,SACA,cACA,QACA,UACA,WACA,sBACA,UACA,aACA,aACA,OACA,QACA,UACA,QACA,WACA,YACA,OACA,gBACA,YACA,cACA,kBACA,uBACA,oBACA,OACA,YACA,qBACA,oBACA,sBACA,iBACA,SACA,cACA,QACA,MACA,YACA,WACA,QACA,QACA,SACA,UACA,UACA,YACA,UACA,SACA,OACA,SACA,YACA,YACA,iBACA,UACA,QACA,SACA,SACA,UACA,QACA,SACA,OACA,cACA,WACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,UACA,UACA,OACA,QACA,aACA,QACA,aACA,YACA,OACA,WACA,oBACA,UACA,QACA,SACA,SACA,UACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,YACA,YACA,cACA,aACA,cACA,aACA,iBACA,oBACA,WACA,aACA,QACA,YACA,QACA,aACA,YACA,WACA,YACA,aACA,WACA,gBACA,WACA;AAAA;AAAA;AAAA,CAGF;;;AC9QO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,WACA,cACA,WACA,UACA,WACA,QACA,SACA,aACA,WACA,WACA,YACA,YACA,eACA,UACA,cACA,WACA,eACA,gBACA,iBACA,kBACA,OACA,QACA,OACA,UACA,OACA,OACA,OACA,aACA,SACA,YACA,gBACA,mBACA,mBACA,QACA,cACA,gBACA,OACA,UACA,cACA,eACA,WACA,UACA,aACA,OACA,eACA,QACA,eACA,YACA,WACA,YACA,OACA,QACA,WACA,eACA,eACA,QACA,QACA,SACA,aACA,OACA,mBACA,aACA,cACA,QACA,WACA,oBACA,eACA,OACA,gBACA,gBACA,iBACA,eACA,eACA,YACA,UACA,0BACA,aACA,iBACA,QACA,cACA,OACA,OACA,SACA,YACA,WACA,cACA,aACA,aACA,WACA,oBACA,iBACA,eACA,eACA,OACA,UACA,WACA,OACA,cACA,gBACA,SACA,eACA,SACA,UACA,cACA,eACA,aACA,iBACA,YACA,YACA,OACA,UACA,SACA,UACA,gBACA,gBACA,cACA,qBACA,qBACA,gBACA,iBACA,sBACA,cACA,iBACA,eACA,gBACA,eACA,aACA,eACA,cACA,cACA,oBACA,uBACA,cACA,cACA,eACA,eACA,gBACA,YACA,eACA,aACA,gBACA,cACA,cACA,YACA,kBACA,SACA,SACA,UACA,WACA,MACA,aACA,UACA,OACA,SACA,QACA,SACA,QACA,eACA,SACA,gBACA,YACA,YACA,YACA,oBACA,mBACA,OACA,aACA,cACA,OACA,QACA,OACA,gBACA,OACA,cACA,eACA,MACA,OACA,SACA,SACA,gBACA,kBACA,iBACA,WACA,QACA,qBACA,gBACA,kBACA,WACA,SACA,QACA,eACA,SACA,gBACA,eACA,OACA,QACA,QACA,QACA,OACA,SACA,WACA,SACA,QACA,UACA,eACA,iBACA,mBACA,WACA,YACA,OACA,YACA,eACA,eACA,aACA,WACA,WACA,cACA,SACA,cACA,uBACA,SACA,kBACA,aACA,SACA,QACA,cACA,WACA,WACA,cACA,2BACA,wBACA,6BACA;AAAA;AAEA,YACA,SACF;;;ACxOA,IAAMC,eAAA,GAAiBpJ,aAAA,CAAc,CAAC,uCAAuC,CAAC;AAE9E,IAAMqJ,gBAAA,GAAkBrJ,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,gBACA,YACA,SACA,UACA;AAAA;AAAA;AAGA,mEACA,2CACA,UACA;AAAA;AAEA;AAAA;AAEA,YACD;AAED,IAAMsJ,uBAAA,GAAyBtJ,aAAA,CAAc,CAC3C,wDACD;AAED,IAAMuJ,sBAAA,GAAwBvJ,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,6CACA,gCACA,0CACA,6BACA,eACA,iBACA,kBACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,kBACA,0BACA,eACA,kBACA,mBACA,gBACA,wBACA,kBACA,gBACA,cACA,cACA,WACA,iBACA,eACA,gBACA,iBACA,SACA,UACA,eACA,QACA,oBACA,eACA,cACA,kBACA,UACA,6BACA,mBACA,gBACA,mBACA,gBACA,oBACA,eACA,mBACA,iBACA,wBACA,kBACA,uBACA,eACA,sBACA,YACA,iBACA,cACA,iBACA,cACA,gBACA,kBACA,aACA,iBACA,eACA,gBACA,aACA,aACA,WACA,WACA,SACA,mBACA,6BACA,SACA,WACA,QACA,kBACA,kBACA,QACA,oBACA,yBACA,mBACA,cACA,kBACA,WACA,qBACA,qBACA,qBACA,gBACA,eACA,gBACA,eACA,gBACA,qBACA,iBACA,eACA,YACA,UACA,YACA,aACA,qBACA,oBACA,0BACA,aACA,gBACA,YACA,iBACA,mBACA,QACA,4BACA,0BACA,gBACA,oBACA,sBACA,sBACA,sBACA,0BACA,kBACA,gBACA,qBACA,wBACA,qBACA,wBACA,uBACA,4BACA,yBACA,wBACA,qBACA,uBACA,oBACA,oBACA,kBACA,eACA,6BACA,gBACA,eACA,eACA,gBACA,sBACA,wBACA,eACA,cACA,gBACA,yBACA,aACA,gBACA,oBACA,sBACA,oBACA,0BACA,4BACA,uBACA,gBACA,uBACA,mBACA,uBACA,yBACA,oBACA,gBACA,iBACA,4BACA,wBACA,gBACA,sBACA,uBACA,gBACA,cACA,oBACA,qBACA,eACA,wBACA,qBACA,eACA,iBACA,wBACA,kBACA,iBACA,yBACA,qBACA,YACA,UACA,sBACA,oBACA,iBACA,eACA,qBACA,qBACA,mBACA,gBACA,cACA,oBACA,oBACA,gBACA,OACA,YACA,aACA,UACA,cACA,cACA,eACA,WACD;AAED,IAAMwJ,sBAAA,GAAwBxJ,aAAA,CAAc,CAC1C,0BACA,2BACA,8BACA,yBACD;AAED,IAAMyJ,cAAA,GAAgBzJ,aAAA,CAAc,CAClC,QACA,+BACA,wBACA,gBACA;AAAA;AAEA,gBACD;AAED,IAAM0J,gBAAA,GAAkB1J,aAAA,CAAc,CACpC,iDACA,iBACA,0BACA,gBACD;AAGM,IAAMd,OAAA,GAA0B;EACrCgF,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAyF,eAAA;IACAxF,eAAA,EAAiB,CAAC,GAAGyF,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzFxF,qBAAA,EAAAyF,sBAAA;IACAxF,aAAA,EAAAyF,cAAA;IACAxF,eAAA,EAAAyF,gBAAA;IACAC,WAAA,EAAa;IACbvF,gBAAA,EAAkB6E,SAAA;IAClB5E,iBAAA,EAAmB6E,UAAA;IACnB5E,qBAAA,EAAuB6E,UAAA;IAAA;IAEvB3E,WAAA,EAAa,CACX,YACA,YACA;MAAEC,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC,IAAI;IACjBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAKC,IAAA,EAAM;MAAKoC,oBAAA,EAAsB;IAAK;IAChEzE,aAAA,EAAe,CACb;MAAEC,KAAA,EAAO;IAAqB,GAC9B;MAAEX,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EACtD;IACAI,UAAA,EAAY;MAAEC,UAAA,EAAY;IAAK;IAC/BM,gBAAA,EAAkB,CAAC,MAAM,GAAG;IAC5BC,SAAA,EAAW,CACT,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,OACA,MACA,MACA,KACA;IAAA;IAAA,CACF;IACAC,WAAA,EAAAuD;EACF;EACAtD,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAG4D,uBAAA,EAAwB,GAAGC,sBAAqB;IACpEzF,qBAAA,EAAAyF;EACF;AACF;;;AC/TO,IAAMM,SAAA,GAAqB;AAAA;AAEhsB;AAAA;AAEjC;AAAA;AACA;AAAA;AACA,OACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,oBACA;AAAA;AACA,QACA,SACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,QACA,QACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA,CAEF;;;AC5RO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,OACA,QACA,WACA,WACA,eACA;AAAA;AAEA,aACA,SACA,QACA,QACA,SACA,OACA,aACA,OACA,eACA,UACA,WACA,aACA,cACA,UACA,WACA,qBACA,uBACA,oBACA,mBACA,mBACA,QACA,QACA,WACA,QACA,eACA,oBACA,WACA,YACA,gBACA,aACA,YACA,UACA,aACA,iBACA,QACA,WACA,cACA,OACA,OACA,SACA,SACA,aACA,WACA,gBACA,gBACA,gBACA,qBACA,gBACA,WACA,YACA,QACA,YACA,eACA,YACA,YACA,OACA,WACA,cACA,aACA,aACA,WACA,WACA,cACA,OACA,OACA,OACA,cACA,WACA,gBACA,SACA,eACA,eACA,SACA,UACA,gBACA,oBACA,cACA,eACA,aACA,iBACA,kBACA,sBACA,4BACA,yBACA,gCACA,cACA,YACA,YACA,gBACA,YACA,eACA,iBACA,OACA,QACA,eACA,MACA;AAAA;AAEA,aACA,aACA,cACA,cACA,UACA,SACA,2BACA,2BACA,uBACA,qBACA,sBACA,wBACA,2BACA,iCACA,kCACA,yBACA,yBACA,sCACA,qCACA,yBACA,4BACA,8BACA,0BACA,4BACA,uBACA,wBACA,YACA,MACA,gBACA,WACA,kBACA,kBACA,WACA,UACA,eACA,WACA,gBACA,WACA,UACA,cACA,qBACA,qBACA,iBACA,iBACA,sBACA,cACA,gBACA,eACA,aACA,eACA,cACA,oBACA,uBACA,eACA,kBACA,iBACA,eACA,cACA,eACA,gBACA,qBACA,iCACA,eACA,YACA,qBACA,qBACA,cACA,aACA,gBACA,cACA,cACA,OACA,YACA,kBACA,cACA,SACA,QACA,SACA,QACA,UACA,QACA,cACA,MACA,aACA,aACA,kBACA,UACA,OACA,SACA,QACA,SACA,QACA,SACA,YACA,YACA,YACA,mBACA,SACA,OACA,eACA,gBACA,aACA,eACA,aACA,iBACA,eACA,cACA,aACA,OACA,aACA,eACA,OACA,OACA,UACA,OACA,SACA,aACA,mBACA,cACA,gBACA,cACA,OACA,UACA,YACA,cACA,OACA,aACA,SACA,UACA,OACA;AAAA;AAEA,OACA,gBACA,cACA,eACA,MACA,SACA,WACA,YACA,OACA,SACA,wBACA,gBACA,WACA,SACA,WACA,QACA,gBACA,QACA,UACA,gBACA,eACA,kBACA,iBACA,qBACA,gBACA,UACA,WACA,WACA,SACA,SACA,iBACA,SACA,aACA,cACA,QACA,SACA,UACA,eACA,UACA,gBACA,QACA,QACA,QACA,OACA,SACA,WACA,eACA,mBACA,SACA,QACA,WACA,eACA,gBACA,aACA,aACA,sBACA,eACA,cACA,eACA,iBACA,cACA,iBACA,gBACA,eACA,eACA,sBACA,eACA,eACA,aACA,mBACA,sBACA,cACA,uBACA,sBACA,gBACA,mBACA,sBACA,mBACA,kBACA,wBACA,oBACA,mBACA,iBACA,eACA,cACA,eACA,cACA,qBACA,eACA,aACA,mBACA,kBACA,2BACA,4BACA,sBACA,gBACA,mBACA,oBACA,mBACA,qBACA,oBACA,oBACA,mBACA,oBACA,sBACA,gBACA,eACA,sBACA,uBACA,oBACA,mBACA,aACA,mBACA,kBACA,eACA,WACA,iBACA,aACA,oBACA,cACA,gBACA,YACA,eACA,aACA,QACA,QACA,oBACA,yBACA,OACA,UACA,cACA,eACA,eACA,UACA,WACA,UACA,aACA,mBACA,WACA,OACA,WACA,eACA,OACA,QACA,eACA,eACA,YACA,aACA,gBACA,iBACA,aACA,WACA,cACA,QACA,YACA,SACA,cACA,uBACA,SACA,kBACA,aACA;AAAA;AAEA,YACA,YACA,iBACA,QACA,cACA,eACA,8BACA,UACA,WACA,YACA,YACA,WACA,8BACA,qCACA,QACA,WACA,cACA;AAAA;AAEA,QACA,WACF;;;ACjaA,IAAMC,eAAA,GAAiBhK,aAAA,CAAc,CAAC,uCAAuC,CAAC;AAE9E,IAAMiK,gBAAA,GAAkBjK,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,mEACA,2CACA,UACA;AAAA;AAEA,MACD;AAED,IAAMkK,uBAAA,GAAyBlK,aAAA,CAAc,CAAC,0CAA0C,CAAC;AAEzF,IAAMmK,sBAAA,GAAwBnK,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,gBACA,8BACA,iBACA,oBACA,iBACA,kBACA;AAAA;AAAA;AAEA;AAAA;AAEA,kBACA,eACA,kBACA,kBACA,uBACA,mBACA,wBACA,gBACA,oBACA,cACA,cACA,iBACA,UACA,eACA,QACA,oBACA,6BACA,gCACA,eACA,kBACA,SACA,UACA,mBACA,gBACA,mBACA,mBACA,gBACA,wBACA,oBACA,yBACA,eACA,iBACA,mCACA,qBACA,kBACA,eACA,sBACA,YACA,iBACA,cACA,iBACA,iBACA,cACA,sBACA,kBACA,uBACA,aACA,eACA,iCACA,mBACA,gBACA,aACA,aACA,WACA,WACA,SACA,SACA,WACA,QACA,gBACA,qBACA,kBACA,QACA,aACA,yBACA,YACA,4BACA,eACA,mBACA,kBACA,WACA,qBACA,qBACA,gBACA,eACA,gBACA,SACA,gBACA,iBACA,iBACA,eACA,WACA,UACA,YACA,yBACA,aACA,qBACA,oBACA,aACA,gBACA,sBACA,YACA,mBACA,QACA,oBACA,sBACA,sBACA,kBACA,gBACA,wBACA,qBACA,wBACA,yBACA,qBACA,uBACA,oBACA,oBACA,kBACA,eACA,gBACA,eACA,eACA,sBACA,wBACA,eACA,cACA,sBACA,oBACA,gBACA,mBACA,uBACA,yBACA,oBACA,gBACA,iBACA,wBACA,uBACA,iBACA,cACA,oBACA,eACA,qBACA,eACA,iBACA,kBACA,iBACA,YACA,mBACA,2BACA,iBACA,eACA,qBACA,0BACA,gBACA,cACA,SACA,uBACA,oBACA,mBACA,iBACA,OACA;AAAA;AAAA;AAGA,WACA,SACA,QACA,UACA,UACA,QACD;AAED,IAAMoK,sBAAA,GAAwBpK,aAAA,CAAc,CAAC,wBAAwB,CAAC;AAEtE,IAAMqK,cAAA,GAAgBrK,aAAA,CAAc,CAClC,QACA,+BACA,wBACA,wBACA;AAAA;AAEA,gBACD;AAED,IAAMsK,gBAAA,GAAkBtK,aAAA,CAAc,CACpC,mCACA,iBACA,0BACA,gBACD;AAGM,IAAMb,KAAA,GAAwB;EACnC+E,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAqG,eAAA;IACApG,eAAA,EAAiB,CAAC,GAAGqG,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzFpG,qBAAA,EAAAqG,sBAAA;IACApG,aAAA,EAAAqG,cAAA;IACApG,eAAA,EAAAqG,gBAAA;IACAX,WAAA,EAAa;IACbvF,gBAAA,EAAkByF,SAAA;IAClBxF,iBAAA,EAAmByF,UAAA;IACnBxF,qBAAA,EAAuByF,UAAA;IAAA;IAEvBvF,WAAA,EAAa,CACX,YACA;MAAEC,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;IAAE,GACrC;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC,IAAI;IACjBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAKC,IAAA,EAAM;MAAKoC,oBAAA,EAAsB;IAAK;IAChEzE,aAAA,EAAe,CACb;MAAEC,KAAA,EAAO;IAAqB,GAC9B;MAAEX,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EACtD;IACAI,UAAA,EAAY;MAAEC,UAAA,EAAY;IAAK;IAC/BM,gBAAA,EAAkB,CAAC,MAAM,GAAG;IAC5BC,SAAA,EAAW,CACT,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,OACA,MACA,OACA,MACA,MACA,KACA;IAAA;IAAA,CACF;IACAC,WAAA,EAAAuD;EACF;EACAtD,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGwE,uBAAA,EAAwB,GAAGC,sBAAqB;IACpErG,qBAAA,EAAAqG;EACF;AACF;;;AC9RO,IAAMI,SAAA,GAAqB;AAAA;AAEhC;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA,CACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC;AAAA;AACA;AAAA;AACA,OACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,oBACA;AAAA;AACA,QACA,SACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,QACA,QACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA,CAEF;;;AChPO,IAAMC,UAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAKjC,OACA,QACA,WACA,WACA,eACA;AAAA;AAEA,aACA,SACA,QACA,QACA,SACA,OACA,aACA,OACA,eACA,WACA,aACA,cACA,UACA,WACA,UACA,UACA,SACA,UACA,QACA,QACA,QACA,WACA,aACA,eACA,oBACA,WACA,YACA,gBACA,aACA,YACA,UACA,aACA,iBACA,QACA,WACA,cACA,OACA,OACA,SACA,SACA,aACA,WACA,gBACA,0BACA,gBACA,gBACA,qBACA,gBACA,WACA,YACA,QACA,YACA,eACA,YACA,YACA,OACA,WACA,cACA,aACA,aACA,UACA,gBACA,WACA,cACA,eACA,eACA,OACA,OACA,UACA,WACA,MACA,OACA,cACA,WACA,SACA,eACA,eACA,SACA,UACA,gBACA,oBACA,cACA,eACA,aACA,iBACA,MACA,cACA,YACA,YACA,YACA,gBACA,YACA,MACA,OACA,QACA,MACA,UACA;AAAA;AAEA,cACA,cACA,aACA,aACA,eACA,SACA,UACA,YACA,gBACA,WACA,kBACA,kBACA,WACA,gBACA,WACA,WACA,UACA,UACA,cACA,iBACA,qBACA,qBACA,iBACA,sBACA,cACA,gBACA,eACA,aACA,eACA,iBACA,cACA,oBACA,uBACA,eACA,kBACA,iBACA,eACA,cACA,eACA,gBACA,eACA,YACA,qBACA,qBACA,aACA,gBACA,cACA,OACA,YACA,kBACA,cACA,WACA,SACA,MACA,QACA,SACA,QACA,aACA,UACA,QACA,MACA,aACA,aACA,kBACA,UACA,OACA,SACA,QACA,SACA,QACA,MACA,SACA,YACA,YACA,YACA,mBACA,OACA,OACA,eACA,OACA,OACA,SACA,UACA,OACA,SACA,aACA,OACA,cACA,MACA,WACA,OACA,OACA,aACA,SACA,UACA,OACA,gBACA;AAAA;AAEA,OACA,iBACA,gBACA,cACA,eACA,MACA,QACA,YACA,OACA,SACA,WACA,SACA,WACA,QACA,gBACA,QACA,UACA,gBACA,eACA,kBACA,iBACA,qBACA,gBACA,UACA,WACA,WACA,SACA,cACA,SACA,aACA,cACA,QACA,SACA,UACA,eACA,UACA,gBACA,UACA,UACA,OACA,QACA,QACA,QACA,OACA,SACA,OACA,SACA,QACA,OACA,UACA,cACA,eACA,eACA,UACA,WACA,UACA,aACA,mBACA,WACA,OACA,WACA,eACA,OACA,0BACA,oBACA,2BACA,mBACA,oBACA,2BACA,0BACA,qBACA,kBACA,0BACA,qBACA,cACA,gBACA,QACA,eACA,eACA,YACA,aACA,gBACA,iBACA,aACA,WACA,cACA,aACA,QACA,YACA,SACA,cACA,cACA,uBACA,SACA,kBACA;AAAA;AAEA,YACA,YACA,iBACA,QACA,cACA,eACA,8BACA,WACA,YACA,YACA,WACA,eACA,QACA,WACA,cACA;AAAA;AAEA,QACA,WACF;;;AChUA,IAAMC,eAAA,GAAiB1K,aAAA,CAAc,CAAC,uCAAuC,CAAC;AAE9E,IAAM2K,gBAAA,GAAkB3K,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,mEACA,2CACA,UACA;AAAA;AAEA,MACD;AAED,IAAM4K,uBAAA,GAAyB5K,aAAA,CAAc,CAAC,0CAA0C,CAAC;AAEzF,IAAM6K,sBAAA,GAAwB7K,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,gBACA,8BACA,iBACA,oBACA,iBACA,kBACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,kBACA,wBACA;AAAA;AAEA,cACA,cACA,iBACA,eACA,kBACA,UACA,mBACA,gBACA,yBACA,eACA,mBACA,eACA,sBACA,YACA,iBACA,cACA,uBACA,aACA,mBACA,aACA,aACA,WACA;AAAA;AAEA,SACA,gBACA,qBACA,kBACA,QACA,aACA,4BACA,eACA,kBACA,WACA,qBACA,gBACA,eACA,gBACA,SACA,UACA,YACA,yBACA,aACA,qBACA,oBACA,aACA,gBACA,sBACA,YACA,mBACA,QACA,oBACA,sBACA,sBACA,kBACA,gBACA,wBACA,qBACA,oBACA,oBACA,kBACA,eACA,gBACA,eACA,eACA,eACA,cACA,sBACA,oBACA,gBACA,mBACA,oBACA,gBACA,iBACA,eACA,qBACA,eACA,iBACA,kBACA;AAAA;AAEA,SACA,uBACA,oBACA,mBACA;AAAA;AAEA,MACD;AAED,IAAM8K,sBAAA,GAAwB9K,aAAA,CAAc,CAAC,wBAAwB,CAAC;AAEtE,IAAM+K,cAAA,GAAgB/K,aAAA,CAAc,CAClC,QACA,+BACA,wBACA,wBACA;AAAA;AAEA,gBACD;AAED,IAAMgL,gBAAA,GAAkBhL,aAAA,CAAc,CACpC,mCACA,iBACA,0BACA,gBACD;AAGM,IAAMH,IAAA,GAAuB;EAClCqE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA+G,eAAA;IACA9G,eAAA,EAAiB,CAAC,GAAG+G,gBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzF9G,qBAAA,EAAA+G,sBAAA;IACA9G,aAAA,EAAA+G,cAAA;IACA9G,eAAA,EAAA+G,gBAAA;IACArB,WAAA,EAAa;IACbvF,gBAAA,EAAkBmG,SAAA;IAClBlG,iBAAA,EAAmBmG,UAAA;IACnBlG,qBAAA,EAAuBmG,UAAA;IAAA;IAEvBjG,WAAA,EAAa,CACX,YACA;MAAEC,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;IAAE,GACrC;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC,IAAI;IACjBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAKC,IAAA,EAAM;MAAKoC,oBAAA,EAAsB;IAAK;IAChEzE,aAAA,EAAe,CACb;MAAEC,KAAA,EAAO;IAAqB,GAC9B;MAAEX,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EACtD;IACAI,UAAA,EAAY;MAAEC,UAAA,EAAY;IAAK;IAC/BM,gBAAA,EAAkB,CAAC,MAAM,GAAG;IAC5BC,SAAA,EAAW,CACT,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,OACA,MACA,OACA,MACA,MACA,KACA;IAAA;IAAA,CACF;IACAC,WAAA,EAAAuD;EACF;EACAtD,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGkF,uBAAA,EAAwB,GAAGC,sBAAqB;IACpE/G,qBAAA,EAAA+G;EACF;AACF;;;AC5NO,IAAMI,UAAA,GAAsB;AAAA;AAEjC,SACA,OACA,QACA,WACA,aACA,aACA,gBACA,aACA,uBACA,gBACA,kBACA,eACA,kBACA,gBACA,iBACA,gBACA,gBACA,mBACA,gBACA,aACA,aACA,cACA,kBACA,iBACA,aACA,eACA,gBACA,gBACA,iBACA,iBACA,cACA,cACA,aACA,iBACA,kBACA,kBACA,eACA,QACA,QACA,SACA,OACA,UACA,iBACA,iBACA,WACA,aACA,WACA,UACA,WACA,aACA,YACA,WACA,QACA,eACA,gBACA,aACA,YACA,aACA,YACA,UACA,WACA,YACA,kBACA,uBACA,yBACA,OACA,SACA,SACA,UACA,aACA,QACA,mBACA,gBACA,oBACA,iBACA,mBACA,oBACA,iBACA,qBACA,kBACA,qBACA,kBACA,UACA,eACA,WACA,cACA;AAAA;AAEA,gBACA,eACA,OACA,eACA,SACA,YACA,aACA,SACA,aACA,mBACA,SACA,cACA,UACA,WACA,WACA,UACA,YACA,aACA,YACA,YACA,YACA,OACA,cACA,QACA,SACA,UACA,MACA,OACA,SACA,SACA,OACA,QACA,UACA,QACA,UACA,mBACA,iBACA,gBACA,iBACA,uBACA,OACA,aACA,SACA,YACA,aACA,cACA,WACA,UACA,WACA,aACA,SACA,UACA,OACA,QACA,cACA,iBACA,sBACA,uBACA,iBACA,gBACA,gBACA,cACA,iBACA,iBACA,kBACA,iBACA,iBACA,SACA,gBACA,MACA,eACA,YACA,YACA,SACA,WACA,UACA,QACA,mBACA,mBACA,eACA,kBACA,mBACA,kBACA,gBACA,kBACA,cACA,iBACA,kBACA,iBACA,eACA,UACA,WACA,WACA,SACA,cACA,SACA,UACA,eACA,gBACA,QACA,OACA,SACA,QACA,UACA,cACA,eACA,mBACA,iBACA,aACA,cACA,oBACA,UACA,YACA,OACA,OACA,SACA,WACA,UACA,aACA,UACA,UACA,YACA,YACA,YACA,QACA;AAAA;AAEA,SACA,QACA,YACA,gBACA,iBACA,WACA,YACA,kBACA;AAAA;AAAA;AAAA;AAIA,OACF;;;ACtOO,IAAMC,SAAA,GAAqB;AAAA;AAEhC,UACA,OACA,SACA,WACA,OACA,OACA,SACA,MACA,OACA,MACA,SACA,WACA,UACA,WACA,SACA,UACA,SACA,MACA,QACA,QACA,QACA,WACA,WACA,cACA,UACA,aACA,WACA,YACA,cACA,SACA,UACA,WACA,YACA,WACA,aACA,WACA,aACA,UACA,WACA,QACA,YACA,YACA,MACA,QACA,QACA,WACA,QACA,OACA,SACA,UACA,WACA,WACA,UACA,WACA,SACA,SACA,UACA,SACA,WACA,SACA,aACA,OACA,SACA,QACA,OACA,YACA,UACA,SACA,SACA,UACA,OACA,QACA,UACA,MACA,UACA,SACA,MACA,WACA,aACA,SACA,SACA,UACA,SACA,UACA,aACA,QACA,MACA,aACA,cACA,QACA,OACA,QACA,YACA,SACA,YACA,QACA,QACA,OACA,WACA,SACA,QACA,SACA,OACA,OACA,WACA,WACA,gBACA,SACA,SACA,WACA,aACA,QACA,MACA,MACA,OACA,aACA,QACA,SACA,UACA,UACA,UACA,MACA,UACA,WACA,MACA,SACA,UACA,SACA,QACA,SACA,aACA,YACA,QACA,QACA,aACA,WACA,WACA,WACA,aACA,SACA,aACA,UACA,SACA,OACA,SACA,UACA,UACA,WACA,UACA,aACA,UACA,SACA,QACA,YACA,OACA,QACA,aACA,aACA,UACA,SACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,cACA,UACA,UACA,QACA,QACA,MACA,QACA,eACA,WACA,QACA,YACA,aACA,SACA,SACA,UACA,WACA,UACA,SACA,UACA,UACA,OACA,QACA,SACA,YACA,SACA,UACA,UACA,OACA,QACA,QACA,SACA,SACA,UACA,QACA,UACA,QACA,MACF;AAEO,IAAMC,UAAA,GAAsB;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA,CASnC;;;ACpNA,IAAMC,eAAA,GAAiBpL,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMqL,gBAAA,GAAkBrL,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA;AAAA;AAEA,cACA,2BACA,cACA;AAAA;AAEA,QACA,UACA,YACD;AAED,IAAM0F,cAAA,GAAiB1F,aAAA,CAAc;AAAA;AAEnC;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,UACA,eACA,qBACA,eACA,sBACA,qBACA,mBACA,gBACA,wBACA,gBACA,mBACA,iBACA,cACA,sBACA,cACA,WACA,oBACA,WACA,SACA,SACA,WACA,UACA,wBACA,aACA,mBACA,qBACA;AAAA;AAEA,OACA,sBACA,QACA,qBACD;AAED,IAAMsL,sBAAA,GAAwBtL,aAAA,CAAc,CAAC,eAAe,gBAAgB,iBAAiB,CAAC;AAE9F,IAAMuL,cAAA,GAAgBvL,aAAA,CAAc,CAAC,QAAQ,+BAA+B,YAAY,CAAC;AAEzF,IAAMwL,gBAAA,GAAkBxL,aAAA,CAAc,CAAC,iCAAiC,CAAC;AAGlE,IAAMZ,IAAA,GAAuB;EAClC8E,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAyH,eAAA;IACAxH,eAAA,EAAiB,CAAC,GAAGyH,gBAAA,EAAiB,GAAG3F,cAAc;IACvD3B,qBAAA,EAAAuH,sBAAA;IACAtH,aAAA,EAAAuH,cAAA;IACAtH,eAAA,EAAAuH,gBAAA;IACA7B,WAAA,EAAa;IACbvF,gBAAA,EAAkB8G,SAAA;IAClB7G,iBAAA,EAAmB8G,UAAA;IACnB7G,qBAAA,EAAuB2G,UAAA;IAAA;IAAA;IAAA;IAIvBzG,WAAA,EAAa,CAAC,SAAS,OAAO;IAC9BI,UAAA,EAAY,CAAC,IAAI;IACjBL,WAAA,EAAa,CAAC,MAAM,IAAI;IACxBQ,UAAA,EAAY;MAAEC,UAAA,EAAY;MAAMyG,QAAA,EAAU,CAAC,GAAG;MAAGxG,KAAA,EAAO,CAAC,GAAG;IAAE;IAC9DK,gBAAA,EAAkB,CAAC,KAAK,IAAI;IAC5BC,SAAA,EAAW,CAAC,KAAK,MAAM,KAAK,IAAI;EAClC;EACAE,aAAA,EAAe;IACbC;EACF;AACF;;;AC9GO,IAAMgG,SAAA,GAAqB;AAAA;AAAA;AAGhC,OACA,SACA,aACA,OACA,SACA,OACA,OACA,SACA,MACA,OACA,MACA,aACA,UACA,OACA,SACA,WACA,SACA,QACA,QACA,SACA,QACA,MACA;AAAA;AAEA,QACA,WACA,WACA,QACA,WACA,eACA,aACA,SACA,SACA,WACA,YACA,WACA,WACA,WACA,WACA,UACA,aACA,YACA,YACA,WACA,YACA,eACA,WACA,WACA,SACA,SACA,UACA,WACA,UACA,eACA,YACA,QACA,OACA,WACA,WACA,UACA,UACA,QACA,iBACA,YACA,QACA,YACA,WACA,QACA,SACA,SACA,OACA,UACA,UACA,aACA,cACA,aACA,WACA,UACA,QACA,YACA,SACA,SACA,SACA,OACA,UACA,SACA,QACA,QACA,YACA,WACA,QACA,SACA,SACA,QACA,UACA,QACA,UACA,QACA,cACA,MACA,aACA,MACA,aACA,SACA,WACA,aACA,WACA,YACA,UACA,gBACA,aACA,aACA,YACA,QACA,cACA,MACA,aACA,QACA,YACA,SACA,WACA,UACA,SACA,WACA,QACA,SACA,SACA,SACA,SACA,WACA,SACA,QACA,QACA,OACA,OACA,UACA,UACA,SACA,OACA,SACA,UACA,OACA,QACA,UACA,SACA,YACA,QACA,OACA,YACA,UACA,OACA,cACA,UACA,OACA,UACA,QACA,UACA,WACA,WACA,eACA,eACA,eACA,iBACA,aACA,UACA,UACA,gBACA,YACA,aACA,WACA,MACA,MACA,QACA,UACA,QACA,YACA,UACA,MACA,UACA,WACA,SACA,YACA,gBACA,UACA,WACA,UACA,OACA,cACA,WACA,mBACA,aACA,cACA,aACA,UACA,QACA,aACA,UACA,SACA,WACA,aACA,UACA,SACA,SACA,QACA,UACA,OACA,aACA,OACA,aACA,UACA,YACA,UACA,UACA,aACA,WACA,UACA,YACA,OACA,UACA,QACA,aACA,OACA,OACA,OACA,UACA,WACA,UACA,QACA,YACA,YACA,gBACA,OACA,SACA,SACA,QACA,UACA,QACA,UACA,OACA,WACA,WACA,WACA,YACA,YACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,eACA,gBACA,iBACA,WACA,OACA,WACA,WACA,SACA,OACA,OACA,QACA,QACA,iBACA,iBACA,mBACA,mBACA,MACA,YACA,WACA,iBACA,WACA,QACA,OACA,OACA,OACA,SACA,SACA,UACA,YACA,aACA,UACA,OACA,SACA,UACA,SACA,UACA,YACA,YACA,UACA,QACA,SACA,QACA,QACA,SACA,SACA,QACA,QACA,WACA,SACA,QACA,OACF;AAEO,IAAMC,UAAA,GAAsB;AAAA;AAEjC,SACA,cACA,UACA,aACA,gBACA,aACA,QACA,qBACA,aACA,aACA,aACA,QACA,WACA,UACA,SACA,OACA,gBACA,iBACA,QACA,yBACA,iBACA,8BACA,sBACA,iBACA,SACA,SACA,eACA,UACA,YACA,YACA,aACA,OACA,aACA,UACA,WACA,WACF;;;ACzVO,IAAMC,UAAA,GAAsB;AAAA;AAAA;AAGjC,OACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,QACA,OACA,SACA,MACA,OACA,OACA,SACA,SACA,aACA,SACA,QACA,OACA,QACA,QACA,OACA,QACA,SACA;AAAA;AAGA,OACA,UACA,WACA,SACA,QACA,SACA,eACA,aACA,WACA,aACA,kBACA,iBACA,WACA,QACA,SACA,WACA,UACA,aACA,SACA,QACA,SAEA,wBACA,kBACA,oBAEA,SACA,SACA,UACA;AAAA;AAGA,cACA,gBACA,qBACA,cACA,WACA,WACA,YACA,kBACA,kBACA,YACA,YACA,mBACA,mBACA,SACA,mBACA,mBACA,WACA,gBACA,WACA,gBACA,mBACA,iBACA,iBACA,SACA;AAAA;AAGA,YACA;AAAA;AAGA,YACA,cACA,QACA,eACA,WACA,WACA,aACA,YACA,mBACA,mBACA,YACA,aACA,eACA,gBACA,oBACA,oBACA,oBACA,mBACA,WACA,WACA,WACA,iBACA,UACA,iBACA,YACA,YACA,aACA,iBACA,kBACA,gBACA,mBACA,iBACA,iBACA,aACA;AAAA;AAGA,aACA,eACA;AAAA;AAGA,eACA,WACA,iBACA,gCACA;AAAA;AAGA;AAAA;AAGA,cACA,uBACA,eACA,cACA,eACA,iBACA,cACA,mBACA,sBACA,0BACA;AAAA;AAGA,kBACA,aACA,SACA,WACA,cACA,gBACA,kBACA,mBACA,QACA,gBACA,cACA,cACA,aACA,UACA,YACA,gBACA,cACA,aACA,aACA,YACA,SACA,YACA,WACA,eACA,gBACA,YACA;AAAA;AAGA,UACA,QACA,YACA;AAAA;AAGA,YACA,SACA,UACA,OACA;AAAA;AAGA,eACA,YACA,cACA,OACA,QACA;AAAA;AAGA,OACA,WACA,QACA,UACA,UACA,SACA,aACA,cACA,aACA,cACA,SACA,YACA,YACA,eACA,QACA,OACA,UACA,OACA,mBACA,mBACA,gBACA,QACA,cACA,kBACA,cACA,WACA,aACA,aACA,YACA,YACA,YACA,uBACA,kBACA,gBACA,iBACA,cACA,iBACA,uBACA,oBACA,uBACA,sBACA,uBACA,kBACA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UACA,WACA,QACA,UACA,SACA,QACA,SACA,OACA,aACA,gBACA,WACA,eACA,sBACA,YACA,eACA,iBACA,kBACA,gBACA,kBACA,kBACA,yBACA,yBACA,UACA,WACA,WACA,SACA,QACA,SACA,cACA,WACA,eACA,cACA,mBACA,mBACA,UACA,UACA,aACA,YACA,UACA,aACA,QACA,UACA;AAAA;AAGA,aACA,cACA,SACA,WACA,gBACA,cACA,UACA,UACA,WACA,YACA,UACA,SACA,OACA,gBACA,WACA,YACA,SACA,WACA,YACA,UACA,UACA,UACA,UACA,cACA,UACA,aACA;AAAA;AAGA,aACA,cACA,WACA,UACA,gBACA,WACA,YACA,WACA;AAAA;AAGA,gBACA,kBACA,kBACA,yBACA;AAAA;AAGA,WACA,WACA,aACA;AAAA;AAAA;AAIA,mBACA,gBACA,gBACA,qBACA,YACA,aACA,cACA,WACA,YACA,gBACA,iBACA,oBACA,aACA,kBACA,aACA,iBACA,aACA,kBACA,oBACA,OACA,YACA,gBACA,kBACA,uBACA,aACA,gBACA;AAAA;AAGA,cACA,aACA;AAAA;AAGA,QACA,aACA,OACA,UACA,UACA,YACA,YACA,UACA,YACA,UACA,UACA,QACA,QACA,WACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA;AAAA;AAGA,UACA,aACA,UACA,QACA,YACA,cACA,oBACA,oBACA,WACA,WACA,WACA;AAAA;AAEA;AAAA;AAGA,qBACA,yBACA,qBACA,oBACA,UACA,WACA,oBACA,mBACA,aACA,aACA,SACA,cACA,eACA,kBACA,qBACA,YACA,aACA,aACA,eACA,aACA,YACA,WACA,cACA,cACA,WACA,iBACA;AAAA;AAGA;AAAA;AAGA,iBACA,uBACA,mBACA,yBACA,iCACA,WACA,gBACA,sBACA,8BACA,iBACA,uBACA,+BACA,UACA,gBACA,sBACA,8BACA,UACA,cACA,aACA,cACA,aACA,aACA,YACA,SACA,WACA,gBACA,YACA,sBACA,8BACA,+BACA,SACA;AAAA;AAGA,iBACA,aACA,wBACA,6BACA,sBACA,qBACA,sBACA,cACA,mBACA,sBACA,2BACA,gBACA,gBACA,oBACA,qBACA,qBACA,wBACA,oBACA,uBACA,oBACA,0BACA,6BACA,0BACA,6BACA,uBACA,yBACA,4BACA,gBACA,aACA,iBACA,qBACA,mBACA,sBACA,gBACA,YACA,uBACA,4BACA,qBACA,oBACA,qBACA,aACA,kBACA,qBACA,0BACA,eACA,mBACA,oBACA,wBACA,2BACA,oBACA,kBACA,qBACA,eACA,eACA,WACA,YACA;AAAA;AAGA,WACA,WACA,WACA;AAAA;AAAA;AAIA,YACA,YACA,SACA;AAAA;AAGA,aACA,gBACA,aACA,cACA,cACA,gBACA,eACA,eACA,kBACA,mBACA,iBACA,gBACA,iBACA,mBACA,eACA,eACA,mBACA,cACA;AAAA;AAGA,WACA,SACA,aACA,aACA,cACA,eACA,SACA,aACA;AAAA;AAAA;AAIA,aACA,OACA,WACA,UACA,WACA,YACA,WACA,YACA,QACA,SACA,aACA,cACA,aACA,cACA,SACA,YACA,aACA,oBACA,YACA,mBACA,OACA,OACA,QACA,mBACA,mBACA,gBACA,aACA,uBACA,QACA,aACA,aACA,cACA,kBACA,WACA,cACA,YACA,YACA;AAAA;AAEA,UACA,cACA,eACA,cACA,OACA,WACA,YACA,YACA,WACA,YACA;AAAA;AAGA,aACA,cACA,eACA,OACA,cACA,QACA,aACA,SACA,gBACA,QACA;AAAA;AAGA,mBACA;AAAA;AAGA,cACA,cACA,mBACA,mBACA,oBACA,iBACA,gBACA,kBACA,mBACA,gBACA,eACA,4BACA,wBACA,0BACA,sCACA,0BACA,0BACA,wBACA,0BACA,wBACA,4BACA,uBACA,sBACA,oBACA,oBACA,oBACA,oBACA,eACA,mBACA,kBACA,oBACA,2BACA,qBACA,yBACA,mBACA,qBACA,4BACA,sBACA,uBACA,sBACA,kCACA,sBACA,0BACA,+BACA,wBACA,eACA,sBACA,6BACA,sCACA,0BACA,mBACA,mBACA,yBACA,yBACA,kBACA,0BACA,2BACA,qBACA,mBACA,kBACA,eACA,sBACA,iCACA,2BACA,gCACA,yBACA,2BACA,oBACA,0BACA,yBACA,qBACA,+BACA,yBACA,0BACA,0BACA,uBACA,4BACA,kCACA,mBACA,oBACA,oBACA,gCACA,2BACA,0BACA,uBACA,oBACA,2BACA,yBACA,2BACA,6BACA,aACA,sBACA,0BACA,4BACA,mCACA,kBACA,mBACA,uBACA,gBACA,qBACA,eACA,mBACA,mBACA,cACA,kBACA,cACA,mBACA,cACA,cACA,gBACA,4BACA,yBACA,qBACA,sBACA,sBACA,eACA,4BACA,QACA;AAAA;AAGA,0BACA,6BACA,wBACA,gBACA,mBACA,0BACA,oBACA,2BACA,sBACA,0BACA,6BACA,yBACA,gCACA,wBACA,qBACA,+BACA,yBACA,kBACA,oCACA,qCACA,sCACA,uCACA,2BACA,4BACA,6BACA,sBACA,oBACA,4BACA,sBACA,wBACA,iCACA,+BACA,mBACA,mBACA,qBACA,2BACA,2BACA,0BACA,iCACA,2BACA,sCACA,+BACA,uCACA,gCACA,kCACA,2BACA,aACA,gBACA,gBACA,gBACA,0BACA,qBACA,qBACA,cACA,uBACA,gBACA,wBACA,wBACA,oBACA,kBACA,iCACA,gCACA,8BACA,6BACA,kCACA,0CACA,0CACA,uCACA,uCACA,oCACA,oCACA,+BACA,qBACA,iBACA,kBACA,mBACA,gBACA,kBACA,iBACA,sBACA,iBACA,wBACA,0BACA,wBACA,+BACA,6BACA,oCACA,mBACA,0BACA,mBACA,uBACA,wBACA;AAAA;AAGA,sCACA,2BACA;AAAA;AAGA,iCACA,oCACA,sCACA,yCACA;AAAA;AAGA;AAAA;AAGA,OACF;;;ACtsBO,IAAMC,UAAA,GAAqB;AAAA;AAEhsB;AAAA;AAEjC;AAAA;AACA;AAAA;AACA;AAAA;AACA,eACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,qBACA;AAAA;AACA;AAAA;AACA,UACA,QACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,QACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA,OACA,OACF;;;AClJA,IAAMC,gBAAA,GAAiB1M,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAM2M,iBAAA,GAAkB3M,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,6BACA,UACA,UACA,gBACA,YACA,SACA,UACA,wBACA;AAAA;AAAA;AAGA,eACA,UACA;AAAA;AAEA;AAAA;AAEA,YACD;AAED,IAAM4M,uBAAA,GAAyB5M,aAAA,CAAc,CAC3C,8EACD;AAED,IAAM6M,sBAAA,GAAwB7M,aAAA,CAAc;AAAA;AAE1C,2DACA;AAAA;AAEA,iBACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,kCACA,iCACA,mBACA,aACA,gCACA,6BACA,kBACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,cACA;AAAA;AAEA,SACA,mBACA,mBACA,oBACA,kBACA,4BACA,gBACA,uBACA,mBACA,8BACA,uBACA,kBACA,eACA,eACA,kBACA,sBACA,2BACA,kBACA,wBACA,yBACA,gBACA,mBACA,qBACA,cACA,iBACA,cACA,gBACA,kBACA,gBACA,oBACA,sBACA,gBACA,oBACA,mCACA,gCACA,4BACA,8BACA,iBACA,cACA,cACA,sBACA,cACA,WACA,SACA,QACA,cACA,SACA,WACA,UACA,mBACA,QACA,wBACA,oBACA,eACA,oBACA,qBACA,mBACA,iBACA,wBACA,oBACA,+BACA,wBACA,gCACA,gBACA,gBACA,mBACA,mBACA,yBACA,0BACA,iBACA,oBACA,sBACA,eACA,eACA,iBACA,mBACA,iBACA,qBACA,uBACA,qBACA,oCACA,iCACA,6BACA,+BACA,oBACA,kBACA,eACA,eACA,uBACA,cACA,WACA,WACA,sBACA,kBACA,aACA,kBACA,mBACA,iBACA,eACA,sBACA,kBACA,6BACA,sBACA,iBACA,cACA,iBACA,cACA,iBACA,sCACA,iBACA,uBACA,wBACA,cACA,eACA,kBACA,oBACA,aACA,gBACA,aACA,eACA,iBACA,eACA,mBACA,qBACA,mBACA,kCACA,+BACA,2BACA,6BACA,kBACA,gBACA,aACA,aACA,qBACA,aACA,WACA,WACA,SACA,SACA,yBACA,UACA,QACA,QACA,QACA,UACA,2BACA,WACA,uBACA,kBACA,6BACA,WACA,qBACA,0CACA,UACA,YACA,qBACA,yBACA,aACA,kBACA,eACA,mBACA,YACA,6BACA,mBACA,QACA,qBACA,YACA,SACD;AAED,IAAM8M,uBAAA,GAAwB9M,aAAA,CAAc,CAC1C,0BACA,2BACA,6BACD;AAED,IAAM+M,eAAA,GAAgB/M,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA,6CACD;AAED,IAAMgN,iBAAA,GAAkBhN,aAAA,CAAc,CACpC,eACA,+CACA,iDACA,yBACA,mBACA;AAAA;AAEA;AAAA;AAEA,0BACA,wBACA,kBACD;AAGM,IAAMV,UAAA,GAA6B;EACxC4E,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA+I,gBAAA;IACA9I,eAAA,EAAiB,CAAC,GAAG+I,iBAAA,EAAiB,GAAGC,uBAAA,EAAwB,GAAGC,sBAAqB;IACzF9I,qBAAA,EAAA+I,uBAAA;IACA9I,aAAA,EAAA+I,eAAA;IACA9I,eAAA,EAAA+I,iBAAA;IACA5I,gBAAA,EAAkBoI,UAAA;IAClBnI,iBAAA,EAAmBoI,WAAA;IACnBnI,qBAAA,EAAuBiI,WAAA;IACvBnE,mBAAA,EAAqB;IACrB7D,WAAA,EAAa,CAAC,IAAI;IAClBC,WAAA,EAAa,CACX,MACA;MAAEC,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,IAAI;IAAE,GACnC;MAAED,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC1D;MAAEF,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC;MAAEH,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,IAAI;IAAE,CAAC;IACjDG,UAAA,EAAY;MAAE2C,IAAA,EAAM;IAAI;IACxBzC,UAAA,EAAY;MAAE0G,QAAA,EAAU,CAAC,GAAG;IAAE;IAC9BlG,SAAA,EAAW;IAAA;IAET,KACA,KACA,MACA,OACA;IAAA;IAEA;IAAA;IAEA,KACA,KACA,KACA,KACA,MACA;IAAA;IAEA,OACA,OACA,QACA;IAAA;IAEA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA;IAAA;IAEA,KACA,MACA,MACA,MACA,OACA,MACA,OACA;IAAA;IAEA;IAAA;IAEA,OACA;IAAA;IAEA,MACA,OACA,OACA;IAAA;IAEA,KACA,MACA,MACA;IAAA;IAEA;IAAA;IAEA;IAAA;IAEA,OACA,MACA;IAAA;IAEA,MACA,MACA,OACA,OACA,QACA,QACA,SACA;IAAA;IAEA,MACA;IAAA;IAAA;IAGA,OACA,OACA,OACA,OACA,MACF;IACA0H,eAAA,EAAiB;EACnB;EACAxH,aAAA,EAAe;IACb4G,oBAAA,EAAsB,CAAC,MAAM,GAAG;IAChC3G,cAAA,EAAgB,CAAC,GAAGkH,uBAAA,EAAwB,GAAGC,sBAAqB;IACpE/I,qBAAA,EAAA+I;EACF;AACF;;;ACtYO,IAAMK,WAAA,GAAsB;AAAA;AAEjC,aACA,+BACA,OACA,SACA,WACA,OACA,UACA,OACA,mBACA,eACA,cACA,OACA,YACA;AAAA;AAGA,SACA,gBACA,iBACA,oBACA,kBACA;AAAA;AAGA,WACA,UACA,YACA;AAAA;AAGA,YACA,UACA,YACA,SACA,OACA,QACA;AAAA;AAGA,cACA,gBACA,oBACA,gBACA,gBACA,qBACA,YACA,sBACA,wBACA,kBACA,WACA,YACA,aACA,cACA,WACA,WACA,gBACA,YACA,kBACA,YACA,WACA,aACA,iBACA,sBACA,6BACA,mBACA,wBACA,6BACA,YACA,gBACA;AAAA;AAGA,WACA,YACA,gBACA,eACA,YACA,WACA,eACA,aACA,aACA,gBACA,aACA,cACA,eACA,cACA,eACA,uBACA,iBACA,gBACA,aACA,cACA,gBACA,eACA,eACA,qBACA,cACA,eACA,eACA,aACA,mBACA,cACA,cACA,eACA,eACA,cACA,gBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBACA,iBACA,mBACA,kBACA,eACA,mBACA,cACA,eACA,cACA,aACA,mBACA,eACA,yBACA,2BACA,QACA,mBACA,eACA,gBACA,kBACA,cACA,WACA,WACA,YACA,YACA,cACA,aACA,oBACA,uBACA,gBACA,gBACA,kBACA,YACA,aACA,aACA,cACA,kBACA,cACA,eACA,cACA,eACA,WACA,iBACA,cACA,aACA,QACA,WACA,WACA,QACA,WACA,WACA,QACA,WACA,WACA;AAAA;AAGA,YACA,aACA,YACA,OACA,OACA,QACA;AAAA;AAGA,OACA,qBACA,mBACA;AAAA;AAGA,iBACA,uBACA,qBACA,mCACA,0BACA,cACA;AAAA;AAGA,OACA,QACA,QACA,QACA,SACA,QACA,WACA,QACA,OACA,OACA,WACA,QACA,SACA,UACA,OACA,SACA,MACA,OACA,OACA,MACA,SACA,WACA,UACA,SACA,OACA,QACA,QACA,OACA,UACA;AAAA;AAGA;AAAA;AAGA,SACA,aACA,SACA,sBACA,eACA,oBACA,aACA,OACA,WACA,UACA,SACA,cACA,WACA,QACA,SACA,OACA,UACA,SACA,QACA,QACA,SACA,cACA,gBACA,YACA,eACA,iBACA,gBACA,gBACA,kBACA,iBACA,UACA,WACA,aACA,WACA,SACA,WACA,cACA,UACA,UACA,aACA,WACA,aACA,QACA;AAAA;AAGA,qBACA,iBACA,YACA,aACA,cACA,WACA,cACA,YACA,cACA,aACA,aACA,eACA,cACA;AAAA;AAGA,OACA,SACA,aACA,cACA,eACA,cACA,OACA,QACA,WACA,OACA,UACA,OACA,aACA,SACA,gBACA,mBACA,mBACA,QACA,mBACA,cACA,eACA,cACA,OACA,YACA;AAAA;AAGA,QACA,WACA,WACA,WACA,aACA,mBACA;AAAA;AAGA,yBACA,2BACA,wBACA,mBACA,qBACA,wBACA,kBACA;AAAA;AAGA,uBACA,oBACA,qBACA,kBACA,mBACA,gBACA,mBACA,4BACA,0BACA,wBACA,uBACA,kBACA,eACA,8BACA,2BACA,iCACA,sBACA,mBACA,qBACA,oBACA,wBACA,gBACA,aACA,QACA,UACF;;;AC1WO,IAAMC,UAAA,GAAqB;AAAA;AAEhC,UACA,UACA,OACA,kBACA,OACA,MACA,OACA,iBACA,UACA,WACA,UACA,QACA,SACA,UACA,cACA,UACA,SACA,WACA,cACA,WACA,UACA,QACA,WACA,YACA,MACA,UACA,UACA,WACA,cACA,YACA,SACA,OACA,WACA,UACA,QACA,QACA,iBACA,iBACA,SACA,YACA,UACA,SACA,MACA,aACA,SACA,QACA,MACA,UACA,YACA,WACA,QACA,SACA,aACA,kBACA,OACA,QACA,SACA,WACA,OACA,OACA,WACA,QACA,SACA,OACA,WACA,UACA,OACA,OACA,MACA,QACA,QACA,SACA,SACA,YACA,YACA,aACA,WACA,eACA,WACA,WACA,WACA,cACA,aACA,UACA,WACA,WACA,WACA,YACA,QACA,UACA,SACA,OACA,QACA,QACA,aACA,MACA,OACA,YACA,QACA,UACA,SACA,WACA,UACA;AAAA;AAGA,iBACA,kBACA,gBACA,cACA,eACA,YACA,UACA,gBACA,cACA,oBACA,gBACA,gBACA,WACA,cACA,cACA;AAAA;AAGA,YACA,cACA,YACA,UACA;AAAA;AAGA,UACA,OACA,aACA,cACA,aACA,QACA,QACA,WACA;AAAA;AAGA,iBACA,eACA,aACA,YACA,wBACA,qBACA;AAAA;AAGA,SACA,QACA,QACA;AAAA;AAGA,YACA,aACA,UACA;AAAA;AAGA,OACA,QACA,YACA,SACA,YACA,OACA,WACA,YACA,YACA,aACA,WACA;AAAA;AAAA;AAIA,gBACA,cACA;AAAA;AAEA,QACA,QACA,OACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAEjC,SACA,UACA,UACA,QACA,qBACA,aACA,WACA,OACA,QACA,QACA,QACA,WACA,SACA,WACA,YACA,YACA,QACA,WACA,UACF;;;ACxNA,IAAMC,gBAAA,GAAiBrN,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMsN,iBAAA,GAAkBtN,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA,MACD;AAED,IAAMuN,wBAAA,GAAyBvN,aAAA,CAAc,CAC3C,iFACD;AAED,IAAMwN,uBAAA,GAAwBxN,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,sBACA,gBACA,iBACA,aACA,iBACA,gBACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,SACA,kBACA,mBACA,4BACA,eACA,2BACA,mBACA,gBACA,cACA,WACA,WACA,uBACA,uBACA,SACA,QACA,UACA,SACA,UACA,QACA,mBACA,oBACA,4BACA,0BACA,yBACA,mBACA,gBACA,kBACA,gBACA,oBACA,iBACA,eACA,cACA,WACA,kBACA,iBACA,kBACA,iBACA,cACA,gBACA,cACA,0BACA,kBACA,eACA,aACA,aACA,QACA,WACA,WACA,SACA,SACA,QACA,WACA,6BACA,SACA,UACA,YACA,eACA,6BACA,+BACA,QACA,uBACA,cACA,mBACA,kBACA,cACA,aACA,qBACA,UACA,SACD;AAED,IAAMyN,uBAAA,GAAwBzN,aAAA,CAAc,CAAC,eAAe,UAAU,aAAa,OAAO,CAAC;AAE3F,IAAM0N,eAAA,GAAgB1N,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA,6CACD;AAED,IAAM2N,iBAAA,GAAkB3N,aAAA,CAAc;AAAA;AAEpC;AAAA;AAEA,gBACA;AAAA;AAEA,yBACD;AAGM,IAAMT,QAAA,GAA2B;EACtC2E,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA0J,gBAAA;IACAzJ,eAAA,EAAiB,CAAC,GAAG0J,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzFzJ,qBAAA,EAAA0J,uBAAA;IACAzJ,aAAA,EAAA0J,eAAA;IACAzJ,eAAA,EAAA0J,iBAAA;IACAvJ,gBAAA,EAAkB+I,UAAA;IAClB9I,iBAAA,EAAmB+I,WAAA;IACnB9I,qBAAA,EAAuB4I,WAAA;IACvB1I,WAAA,EAAa,CAAC,OAAO;IACrBI,UAAA,EAAY,CAAC,OAAO;IACpBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;IAAI;IACzBxC,UAAA,EAAY;MAAE0G,QAAA,EAAU,CAAC,GAAG;IAAE;IAC9BlG,SAAA,EAAW,CACT,KACA,KACA,KACA,MACA,OACA,KACA;IAAA;IAEA,KACA,MACA,MACA,MACA;EAEJ;EACAE,aAAA,EAAe;IACb4G,oBAAA,EAAsB,CAAC,IAAI;IAC3B3G,cAAA,EAAgB,CAAC,GAAG6H,wBAAA,EAAwB,GAAGC,uBAAqB;IACpE1J,qBAAA,EAAA0J;EACF;AACF;;;ACpLO,IAAMI,UAAA,GAAqB;AAAA;AAEhC,OACA,SACA,OACA,SACA,WACA,OACA,QACA,OACA,WACA,MACA,OACA,MACA,iBACA,WACA,QACA,UACA,WACA,MACA,SACA,WACA,QACA,UACA,SACA,SACA,WACA,aACA,WACA,WACA,cACA,UACA,WACA,WACA,UACA,WACA,eACA,WACA,eACA,cACA,QACA,UACA,SACA,QACA,WACA,gBACA,gBACA,qBACA,gBACA,QACA,YACA,aACA,OACA,gBACA,WACA,UACA,aACA,QACA,YACA,OACA,eACA,aACA,YACA,cACA,OACA,QACA,UACA,WACA,UACA,YACA,UACA,UACA,YACA,YACA,WACA,SACA,SACA,UACA,UACA,cACA,SACA,eACA,aACA,OACA,WACA,UACA,aACA,QACA,YACA,aACA,UACA,SACA,SACA,YACA,QACA,MACA,UACA,UACA,MACA,SACA,WACA,SACA,UACA,eACA,aACA,QACA,MACA,SACA,QACA,QACA,cACA,WACA,QACA,WACA,QACA,QACA,SACA,QACA,SACA,YACA,QACA,SACA,WACA,SACA,WACA,SACA,UACA,SACA,QACA,aACA,cACA,WACA,MACA,OACA,QACA,SACA,MACA,QACA,UACA,WACA,MACA,SACA,OACA,SACA,gBACA,QACA,YACA,WACA,aACA,SACA,aACA,eACA,cACA,WACA,WACA,YACA,aACA,WACA,cACA,cACA,SACA,SACA,SACA,gBACA,gBACA,WACA,UACA,cACA,UACA,UACA,WACA,WACA,YACA,UACA,SACA,SACA,QACA,SACA,YACA,UACA,OACA,QACA,UACA,UACA,UACA,QACA,aACA,SACA,mBACA,gBACA,QACA,QACA,UACA,QACA,QACA,UACA,SACA,cACA,UACA,YACA,UACA,aACA,SACA,UACA,iBACA,aACA,cACA,QACA,MACA,SACA,YACA,eACA,gBACA,QACA,QACA,YACA,aACA,aACA,WACA,UACA,WACA,UACA,SACA,OACA,QACA,SACA,QACA,UACA;AAAA;AAEA,WACA,aACA,YACA,YACA,WACA,QACA,YACA,cACA,cACA,UACA,WACA,eACA,UACA,WACA,iBACA,SACA,YACA,gBACA,SACA,eACA,eACA,UACA,SACA,SACA,iBACA,UACA,UACA,MACA,YACA,UACA,aACA,QACA,QACA,SACA,YACA,aACA,aACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAEjC,SACA,UACA,UACA,WACA,QACA,QACA,QACA,OACA,WACA,UACA,SACA,OACA,WACA,YACA,QACA,OACA,WACA,QACA,SACA,YACA,UACA,UACA,iBACA,iBACA,aACA,WACA;AAAA;AAAA,CACF;;;AC1SO,IAAMC,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAKjC,yBACA,qBACA,OACA,WACA,UACA,WACA,YACA,WACA,gBACA,eACA,QACA,SACA,SACA,SACA,YACA,oBACA,aACA,cACA,SACA,SACA,eACA,YACA,eACA,YACA,QACA,cACA,OACA,UACA,QACA,OACA,UACA,cACA,cACA,qBACA;AAAA;AAEA,OACA,UACA,cACA,eACA,OACA,WACA,YACA;AAAA;AAGA,aACA,cACA,OACA,QACA,aACA,SACA,gBACA,QACA;AAAA;AAGA,SACA,kBACA,kBACA,gBACA,mBACA,cACA,aACA,aACA,kBACA,gBACA,gBACA,eACA,kBACA,cACA,WACA,YACA,WACA,SACA;AAAA;AAGA,cACA,cACA,cACA,eACA,mBACA,oBACA,YACA,cACA;AAAA;AAGA,cACA,gBACA,gBACA,qBACA,qBACA,oBACA,YACA,eACA,uBACA,aACA,YACA,cACA,YACA,OACA,cACA,aACA,aACA,WACA,iBACA,sBACA,QACA,YACA,aACA,oBACA,iBACA,kBACA,oBACA,UACA,SACA,kBACA,YACA,OACA,WACA,UACA,kBACA,oBACA,oBACA,qBACA,WACA,gBACA,qBACA,oBACA,SACA,aACA,eACA,eACA,gBACA,kBACA,WACA,cACA,UACA;AAAA;AAGA,aACA,mBACA,qBACA,oBACA,cACA,kBACA;AAAA;AAGA,OACA,QACA,SACA,aACA,cACA,SACA,QACA,SACA,eACA,QACA,SACA,SACA,UACA,OACA,aACA,WACA,cACA,UACA,SACA,eACA,QACA,QACA,WACA,eACA,oBACA,OACA,UACA,aACA,QACA,OACA,QACA,OACA,SACA,mBACA,oBACA,gBACA;AAAA;AAEA,OACA,OACA,SACA,aACA,eACA,SACA,UACA,iBACA,iBACA,YACA,UACA,QACA,OACA,SACA,WACA,UACA,gBACA,2BACA,0BACA,mBACA,SACA,SACA,aACA,UACA,eACA,SACA,QACA,UACA,eACA,MACA,UACA,OACA,SACA,SACA,QACA,SACA,QACA,SACA,cACA,gBACA,OACA,OACA,+BACA,gBACA,SACA,YACA,OACA,QACA,gBACA,WACA,aACA,MACA,QACA,cACA,oBACA,YACA,YACA,OACA,SACA,UACA,WACA,eACA,QACA,SACA,UACA,WACA,kBACA,sBACA,eACA,kBACA,UACA,WACA,WACA,SACA,QACA,SACA,QACA,SACA,iBACA,aACA,OACA,QACA,QACA,aACA,cACA,sBACA,QACA,UACA,OACA,QACA,WACA,SACA,sBACA,SACA,QACA,SACA,UACA,aACA,mBACA,OACA,QACA,UACA,kBACA,oBACA,aACA,QACA,WACA,cACA,UACA,SACA,YACA,SACA,SACA,QACA,WACA,gBACA,SACA,iBACA,gBACA,eACA,aACA,cACA,gBACA,eACA,gBACA,YACA;AAAA;AAGA;AAAA;AAGA,YACA,SACF;;;AClUA,IAAMC,gBAAA,GAAiB/N,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMgO,iBAAA,GAAkBhO,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,WACA,cACA,iBACA;AAAA;AAAA;AAGA,qCACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA,4BACA,yBACD;AAED,IAAMiO,wBAAA,GAAyBjO,aAAA,CAAc,CAAC,yCAAyC,CAAC;AAExF,IAAMkO,uBAAA,GAAwBlO,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA,eACA,eACA,2BACA,aACA,iBACA;AAAA;AAEA;AAAA;AAEA,gBACA,kBACA,cACA,mBACA,mBACA,iBACA,iBACA,aACA,gBACA;AAAA;AAEA,eACA,SACA,aACA;AAAA;AAEA,YACA,WACA,iBACA,eACA,eACA,qBACA,qBACA,kBACA,kBACA,aACA,YACA,WACA,iBACA,oBACA,SACA,gBACA,qBACA,kBACA,kBACA,mBACA,uBACA,eACA,sBACA,cACA,gBACD;AAED,IAAMmO,uBAAA,GAAwBnO,aAAA,CAAc,CAC1C,0BACA,2BACA,6BACD;AAED,IAAMoO,eAAA,GAAgBpO,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA;AAAA;AAEA,6BACA,oCACD;AAED,IAAMqO,iBAAA,GAAkBrO,aAAA,CAAc,CACpC,aACA,aACA,eACA,yBACD;AAGM,IAAMN,KAAA,GAAwB;EACnCwE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAoK,gBAAA;IACAnK,eAAA,EAAiB,CAAC,GAAGoK,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzFnK,qBAAA,EAAAoK,uBAAA;IACAnK,aAAA,EAAAoK,eAAA;IACAnK,eAAA,EAAAoK,iBAAA;IACA1E,WAAA,EAAa;IACbvF,gBAAA,EAAkBwJ,UAAA;IAClBvJ,iBAAA,EAAmBwJ,WAAA;IACnBvJ,qBAAA,EAAuBwJ,WAAA;IACvBvJ,WAAA,EAAa,CAAC,IAAI;IAClBC,WAAA,EAAa,CACX,SACA,SACA;MAAEC,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,GAC7D;MAAEF,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC,IAAI;IACjBO,aAAA,EAAe,CAAC;MAAEV,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,CAAC;IACrEY,SAAA,EAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,MAAM,KAAK,MAAM,IAAI;IACjEC,WAAA,EAAA8I;EACF;EACA7I,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGuI,wBAAA,EAAwB,GAAGC,uBAAqB;IACpEpK,qBAAA,EAAAoK;EACF;AACF;AAEA,SAASI,aAAY3I,MAAA,EAAiB;EACpC,OAAOA,MAAA,CAAOpF,GAAA,CAAI,CAACuC,KAAA,EAAOqD,CAAA,KAAM;IAC9B,MAAML,SAAA,GAAYH,MAAA,CAAOQ,CAAA,GAAI,CAAC,KAAKzD,SAAA;IACnC,MAAMsG,SAAA,GAAYrD,MAAA,CAAOQ,CAAA,GAAI,CAAC,KAAKzD,SAAA;IAGnC,IAAIK,OAAA,CAAQK,MAAA,CAAON,KAAK,KAAKkG,SAAA,CAAUpI,IAAA,oCAA+B;MAEpE,OAAOmF,aAAA,CAAAC,cAAA,KAAKlD,KAAA,GAAL;QAAYlC,IAAA;MAAuC;IAC5D;IAGA,IAAIkC,KAAA,CAAMrC,IAAA,KAAS,WAAWqC,KAAA,CAAMlC,IAAA,gDAAqC;MACvE,IAAI,EAAEkF,SAAA,CAAUrF,IAAA,KAAS,gBAAgBuI,SAAA,CAAUvI,IAAA,KAAS,eAAe;QAEzE,OAAOsF,aAAA,CAAAC,cAAA,KAAKlD,KAAA,GAAL;UAAYlC,IAAA;UAA4BH,IAAA,EAAMqC,KAAA,CAAMN;QAAI;MACjE;IACF;IAEA,OAAOM,KAAA;EACT,CAAC;AACH;;;AC5KO,IAAMyL,WAAA,GAAsB;AAAA;AAEjC,OACA,WACA,QACA,YACA,UACA,QACA,OACA,UACA,OACA,SACA,qBACA,UACA,QACA,cACA,UACA,kBACA,SACA,SACA,UACA,UACA,SACA,UACA,cACA,WACA,SACA,SACA,QACA,WACA,4BACA,6BACA,iBACA,oBACA,kBACA,UACA,aACA,iBACA,QACA,UACA,WACA,YACA,SACA;AAAA;AAGA,OACA,SACA,gBACA,OACA,OACA,OACA;AAAA;AAGA,QACA,QACA,YACA,aACA,aACA;AAAA;AAGA,cACA,QACA,cACA,gBACA,aACA,SACA,OACA,QACA,eACA,cACA;AAAA;AAGA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,WACA,OACA,QACA,WACA,OACA,SACA,MACA,OACA,OACA,SACA,QACA,OACA,MACA,OACA,SACA,WACA,OACA,QACA,QACA,OACA,QACA;AAAA;AAGA,QACA,cACA,qBACA,qBACA,gBACA,eACA,eACA,cACA,eACA,gBACA,YACA,aACA,aACA,cACA,cACA,oBACA,qBACA,aACA;AAAA;AAGA,OACF;;;AClIO,IAAMC,UAAA,GAAqB;AAAA;AAAA;AAAA;AAIhC,SACA,UACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,WACA,MACA,OACA,UACA,iBACA,UACA,SACA,WACA,MACA,WACA,QACA,QACA,SACA,WACA,UACA,UACA,YACA,cACA,UACA,SACA,WACA,gBACA,gBACA,qBACA,YACA,WACA,cACA,YACA,UACA,QACA,UACA,YACA,MACA,QACA,QACA,QACA,OACA,UACA,UACA,WACA,aACA,UACA,WACA,QACA,UACA,SACA,aACA,OACA,WACA,QACA,QACA,aACA,QACA,SACA,UACA,MACA,UACA,aACA,MACA,SACA,WACA,aACA,SACA,UACA,WACA,aACA,QACA,MACA,UACA,QACA,OACA,QACA,QACA,QACA,SACA,SACA,gBACA,WACA,MACA,OACA,WACA,WACA,QACA,SACA,MACA,UACA,MACA,QACA,QACA,MACA,SACA,UACA,SACA,QACA,aACA,QACA,UACA,aACA,WACA,SACA,SACA,SACA,aACA,cACA,UACA,WACA,WACA,UACA,WACA,YACA,aACA,SACA,YACA,OACA,QACA,aACA,UACA,OACA,SACA,QACA,aACA,QACA,QACA,MACA,eACA,WACA,aACA,SACA,UACA,UACA,SACA,UACA,UACA,QACA,WACA,QACA,SACA,UACA,QACA,UACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAMjC,OACA,SACA,QACA,aACA,WACA,OACA,WACA,oBACA,SACA,WACA,YACA,QACA,QACA,WACA,oBACF;;;AC3KA,IAAMC,gBAAA,GAAiB1O,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAM2O,iBAAA,GAAkB3O,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,2EACA,gBACA;AAAA;AAEA,MACD;AAED,IAAM4O,wBAAA,GAAyB5O,aAAA,CAAc,CAAC,iDAAiD,CAAC;AAEhG,IAAM6O,uBAAA,GAAwB7O,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,gBACA,iBACA,mBACA;AAAA;AAEA,aACD;AAED,IAAM8O,uBAAA,GAAwB9O,aAAA,CAAc,CAAC,eAAe,UAAU,WAAW,CAAC;AAGlF,IAAM+O,eAAA,GAAgB/O,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA,6CACD;AAED,IAAMgP,iBAAA,GAAkBhP,aAAA,CAAc,CACpC,iDACA,mCACA,YACD;AAEM,IAAMJ,MAAA,GAAyB;EACpCsE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA+K,gBAAA;IACA9K,eAAA,EAAiB,CAAC,GAAG+K,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzF9K,qBAAA,EAAA+K,uBAAA;IACA9K,aAAA,EAAA+K,eAAA;IACA9K,eAAA,EAAA+K,iBAAA;IACA5K,gBAAA,EAAkBoK,UAAA;IAClBnK,iBAAA,EAAmBoK,WAAA;IACnBnK,qBAAA,EAAuBiK,WAAA;IACvB/J,WAAA,EAAa,CACX,SACA;MAAEC,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK;IAAA;IAAA;IAAA,CAG1D;IACAC,UAAA,EAAY,CAAC,SAAS,MAAM,IAAI;IAAA;IAEhCG,UAAA,EAAY;MAAEC,UAAA,EAAY;MAAMyG,QAAA,EAAU,CAAC,GAAG;MAAGxG,KAAA,EAAO,CAAC,KAAK,KAAK,GAAG;IAAE;IACxEM,SAAA,EAAW,CAAC,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,OAAO,IAAI;EACrE;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGkJ,wBAAA,EAAwB,GAAGC,uBAAqB;IACpE/K,qBAAA,EAAA+K;EACF;AACF;;;AC9FO,IAAMI,WAAA,GAAsB;AAAA;AAEjC;AAAA;AAGA,QACA,cACA,gBACA,aACA;AAAA;AAGA,YACA,qBACA,kBACA,WACA,eACA,oBACA,gBACA,eACA,OACA,OACA,MACA,OACA,SACA,QACA,SACA,QACA,WACA;AAAA;AAGA,aACA,mBACA,SACA,SACA,WACA,aACA,mBACA,QACA,WACA,aACA;AAAA;AAGA,gBACA,gBACA,aACA,qBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SACA,OACA,OACA,OACA;AAAA;AAAA;AAAA;AAIA,cACA,eACA,YACA,WACA,WACA,UACA,gBACA,aACA,cACA,QACA,cACA,kBACA,cACA,WACA,aACA,aACA,YACA,YACA,YACA,mBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAGA,YACA;AAAA;AAGA,SACA,OACA,OACA,OACA,QACA,QACA,OACF;;;AC1GO,IAAMC,UAAA,GAAqB;AAAA;AAEhC,OACA,YACA,SACA;AAAA;AACA,OACA,MACA;AAAA;AACA,cACA,cACA,MACA,UACA,iBACA,SACA,WACA,QACA,MACA,QACA,UACA,YACA,QACA,SACA,SACA,YACA,WACA,UACA,UACA,aACA,WACA,cACA,iBACA,UACA,SACA,QACA,WACA,mBACA,mCACA,gBACA,gBACA,kBACA,oCACA,gBACA,UACA,SACA,cACA,OACA,WACA,WACA,UACA,SACA;AAAA;AACA,YACA,iBACA,cACA,YACA,QACA,WACA,QACA,WACA,YACA,UACA;AAAA;AACA,UACA,QACA,WACA,UACA,YACA,SACA,SACA,UACA,OACA,WACA,QACA,QACA,QACA,YACA,OACA,UACA,SACA,SACA,UACA,QACA,QACA,YACA,MACA,aACA,SACA,SACA,eACA,UACA,aACA,QACA,MACA,YACA,SACA,WACA,WACA,QACA,QACA,cACA,SACA,SACA,UACA,SACA,UACA,UACA,YACA,UACA,SACA,WACA,OACA,MACA,QACA,OACA,QACA,UACA,MACA,OACA,MACA,QACA,QACA,SACA,OACA,SACA,QACA,YACA,aACA,aACA,aACA,WACA,WACA,aACA,SACA,SACA,QACA,aACA,OACA,cACA,eACA,WACA,UACA,UACA,WACA,UACA,SACA,YACA,UACA,OACA,QACA,aACA,SACA,UACA,UACA,UACA,UACA,aACA,gBACA,OACA,WACA;AAAA;AACA,YACA,OACA,gBACA,YACA,cACA,SACA,UACA,eACA,aACA,UACA,eACA,SACA,eACA,QACA,iBACA,mBACA,MACA,YACA,eACA,SACA,WACA,QACA,WACA,SACA,UACA,WACA,UACA,UACA,QACA,SACA,SACA,UACA,YACA,UACA,UACA,WACA,OACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAEjC,SACA,UACA,uBACA,kBACA,UACA,QACA,WACA,qBACA,gBACA,QACA,0BACA,qBACA,aACA,QACA,QACA,OACA,WACA,UACA,SACA,OACA,WACA,YACA,YACA,yBACA,iBACA,mCACA,8BACA,sBACA,sBACA,iBACA,SACA,SACA,WACA,YACA,QACA,aACA,aACA,UACF;;;AC3OA,IAAMC,gBAAA,GAAiBpP,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMqP,iBAAA,GAAkBrP,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,6BACA,UACA,UACA,gBACA,YACA,SACA,UACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA,MACD;AAED,IAAMsP,wBAAA,GAAyBtP,aAAA,CAAc,CAAC,mDAAmD,CAAC;AAElG,IAAMuP,uBAAA,GAAwBvP,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA,UACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,cACA,iBACA,iBACA,aACA,kBACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA,aACD;AAED,IAAMwP,uBAAA,GAAwBxP,aAAA,CAAc,CAC1C,0BACA,2BACA,6BACD;AAED,IAAMyP,eAAA,GAAgBzP,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA,6CACD;AAED,IAAM0P,iBAAA,GAAkB1P,aAAA,CAAc,CACpC,iDACA,yBACD;AAEM,IAAML,GAAA,GAAsB;EACjCuE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAyL,gBAAA;IACAxL,eAAA,EAAiB,CAAC,GAAGyL,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzFxL,qBAAA,EAAAyL,uBAAA;IACAxL,aAAA,EAAAyL,eAAA;IACAxL,eAAA,EAAAyL,iBAAA;IACAtL,gBAAA,EAAkB8K,UAAA;IAClB7K,iBAAA,EAAmB8K,WAAA;IACnB7K,qBAAA,EAAuB2K,WAAA;IACvBzK,WAAA,EAAa,CACX;MAAEC,KAAA,EAAO;MAAYC,QAAA,EAAU,CAAC,KAAK,IAAI;IAAE,GAC3C;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC1D;IACAC,UAAA,EAAY,CAAC,SAAS,IAAI;IAC1BG,UAAA,EAAY;MAAEC,UAAA,EAAY;IAAK;IAC/BO,SAAA,EAAW,CAAC,IAAI;EAClB;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAG4J,wBAAA,EAAwB,GAAGC,uBAAqB;IACpEzL,qBAAA,EAAAyL;EACF;AACF;;;ACnGO,IAAMI,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC,OACA,QACA,aACA,aACA,mBACA,wBACA,qBACA,cACA,aACA,kBACA,aACA,kBACA,gBACA,mBACA,cACA,aACA,aACA,kBACA,gBACA,cACA,eACA,QACA,QACA,SACA,eACA,OACA,OACA,YACA,aACA,qBACA,gBACA,yBACA,qBACA,qBACA,wBACA,eACA,mBACA,sBACA,eACA,cACA,kBACA,uBACA,kCACA,eACA,aACA,YACA,WACA,eACA,QACA,QACA,QACA,WACA,eACA,YACA,OACA,YACA,YACA,aACA,SACA,gBACA,UACA,aACA,YACA,qBACA,mBACA,QACA,OACA,QACA,qBACA,SACA,YACA,aACA,cACA,SACA,aACA,mBACA,gBACA,kBACA,kBACA,gBACA,qBACA,oBACA,gBACA,QACA,YACA,aACA,eACA,cACA,cACA,OACA,gBACA,eACA,eACA,WACA,cACA,OACA,OACA,KACA,cACA,oBACA,mCACA,SACA,OACA,WACA,YACA,UACA,eACA,WACA,SACA,UACA,mBACA,iBACA,aACA,eACA,eACA,kBACA,sBACA,sBACA,yBACA,yBACA,YACA,mBACA,mBACA,qBACA,0BACA,gCACA,iBACA,uBACA,aACA,kBACA,8BACA,2BACA,2BACA,0BACA,kBACA,sBACA,YACA,yBACA,oBACA,eACA,aACA,YACA,aACA,eACA,eACA,QACA,0BACA,MACA,SACA,YACA,4BACA,oBACA,sBACA,aACA,eACA,kBACA,UACA,iBACA,uBACA,kBACA,qBACA,eACA,gBACA,uBACA,eACA,cACA,cACA,aACA,cACA,YACA,OACA,qBACA,cACA,QACA,oBACA,2BACA,0BACA,mBACA,SACA,UACA,wBACA,0BACA,2BACA,qBACA,WACA,MACA,aACA,kBACA,OACA,SACA,QACA,SACA,QACA,SACA,cACA,mBACA,OACA,WACA,cACA,eACA,cACA,oBACA,YACA,aACA,cACA,gBACA,OACA,UACA,OACA,SACA,oBACA,eACA,OACA,UACA,UACA,OACA,SACA,gBACA,yBACA,WACA,OACA,UACA,cACA,aACA,cACA,OACA,aACA,SACA,UACA,qBACA,YACA,sBACA,mBACA,kBACA,kBACA,gBACA,MACA,YACA,OACA,SACA,eACA,WACA,WACA,QACA,UACA,QACA,UACA,cACA,gBACA,kBACA,sBACA,eACA,mBACA,kBACA,gBACA,WACA,kBACA,cACA,UACA,UACA,WACA,WACA,OACA,SACA,cACA,QACA,SACA,UACA,YACA,QACA,UACA,UACA,WACA,QACA,qBACA,OACA,YACA,SACA,WACA,wBACA,sBACA,SACA,cACA,gBACA,qBACA,qBACA,qBACA,QACA,eACA,UACA,cACA,eACA,UACA,WACA,eACA,aACA,eACA,aACA,eACA,eACA,iBACA,eACA,cACA,iBACA,gBACA,eACA,eACA,eACA,eACA,oBACA,aACA,mBACA,iBACA,uBACA,gBACA,mBACA,qBACA,oBACA,oBACA,mBACA,iBACA,eACA,cACA,aACA,eACA,cACA,aACA,mBACA,iBACA,iBACA,oBACA,sBACA,gBACA,eACA,YACA,aACA,aACA,cACA,aACA,iBACA,oBACA,cACA,YACA,aACA,QACA,WACA,WACA,QACA,WACA,WACA,UACA,aACA,OACA,OACA,QACA,eACA,sBACA,iBACA,mBACA,WACA,aACA,aACA,gBACA,oBACA,oBACA,WACA,WACA,uBACA,uBACA,eACA,UACA,iBACA,iBACA,cACA,mBACA,0BACA,gBACA,eACA,WACA,aACA,kBACA,oBACA,aACA,QACA,cACA,YACA,OACA,YACA,UACA,SACA,cACA,cACA,wBACA,oBACA,yBACA,oBACA,oBACA,wBACA,qBACA,QACA,uBACA,qBACA,YACA,WACA,YACA,WACA,QACA,gBACA,gBACA,yBACA,yBACA,iBACA,aACA,YACA,QACA,gBACA,OACA,OACA;AAAA;AAGA,cACA,SACA,QACA,gBACA,QACA,WACA,OACF;;;ACnbO,IAAMC,UAAA,GAAqB;AAAA;AAEhC,UACA,OACA,SACA,SACA,OACA,SACA,WACA,OACA,OACA,MACA,OACA,MACA,iBACA,aACA,WACA,QACA,MACA,QACA,WACA,QACA,YACA,UACA,WACA,WACA,UACA,aACA,eACA,cACA,eACA,UACA,SACA,QACA,WACA,gBACA,gBACA,QACA,cACA,WACA,UACA,WACA,UACA,QACA,QACA,YACA,cACA,YACA,eACA,UACA,QACA,QACA,SACA,YACA,OACA,SACA,UACA,UACA,aACA,WACA,UACA,WACA,SACA,SACA,SACA,SACA,aACA,OACA,QACA,QACA,aACA,SACA,WACA,UACA,YACA,SACA,YACA,UACA,UACA,UACA,MACA,aACA,WACA,SACA,SACA,UACA,aACA,YACA,QACA,WACA,MACA,MACA,aACA,QACA,QACA,cACA,eACA,QACA,OACA,QACA,QACA,WACA,WACA,QACA,SACA,QACA,SACA,SACA,WACA,SACA,WACA,WACA,mBACA,gBACA,YACA,WACA,QACA,OACA,OACA,QACA,QACA,MACA,QACA,OACA,QACA,SACA,UACA,MACA,UACA,QACA,MACA,OACA,QACA,UACA,MACA,SACA,cACA,SACA,UACA,QACA,YACA,aACA,cACA,WACA,QACA,QACA,WACA,OACA,WACA,aACA,aACA,WACA,cACA,cACA,SACA,UACA,SACA,QACA,aACA,WACA,UACA,cACA,SACA,WACA,YACA,aACA,UACA,SACA,QACA,SACA,YACA,UACA,OACA,QACA,WACA,UACA,UACA,WACA,YACA,QACA,UACA,gBACA,WACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,SACA,UACA,eACA,QACA,QACA,QACA,QACA,aACA,MACA,YACA,eACA,QACA,QACA,WACA,aACA,eACA,iBACA,SACA,UACA,WACA,aACA,UACA,UACA,OACA,QACA,SACA,SACA,SACA,QACA,YACA,SACA,UACA,WACA,QACA,QACA,SACA,UACA,QACA,UACA,WACA,QACA,WACA,SACA,OACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAAA;AAGjC,UACA,OACA,WACA,YACA,WACA,WACA,QACA,WACA,QACA,UACA,eACA,WACA,WACA,iBACA,YACA,aACA,QACA,aACA,WACA,QACA,OACA,SACA,OACA,QACA,YACA,aACA,YACA,QACA,aACA,cACA,cACA,eACA,SACA,cACA,YACA,WACF;;;ACjRA,IAAMC,gBAAA,GAAiB9P,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAGhE,IAAM+P,iBAAA,GAAkB/P,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,6BACA,UACA,UACA,gBACA,YACA,SACA,UACA;AAAA;AAAA;AAGA,eACA;AAAA;AAEA;AAAA;AAEA,mBACA,YACA,qBACA,sBACA,eACA,WACA,UACA,SACD;AAED,IAAMgQ,wBAAA,GAAyBhQ,aAAA,CAAc,CAAC,8BAA8B,CAAC;AAE7E,IAAMiQ,uBAAA,GAAwBjQ,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,2BACA,8BACA,2BACA,6BACA,aACA,mCACA,kBACA;AAAA;AAEA;AAAA;AAGA,gBACA,2BACA,cACA,iBACA,eACA,eACA,0BACA,aACA;AAAA;AAEA,WACA,WACA,mBACA,2BACA,OAEA,kBACA,mBAEA,6BACA,iBACA,eACA,YACA,iBAEA,eACA,qBACA,sBACA,oBACA,iCACA,eACA,gBACA,iBACA,gBACA,kBACA,cACA,sBACA,oBACA,kBACA,eACD;AAID,IAAMkQ,uBAAA,GAAwBlQ,aAAA,CAAc,CAC1C,0BACA,2BACA,6BACD;AAGD,IAAMmQ,eAAA,GAAgBnQ,aAAA,CAAc,CAClC,QACA,sCACA,wBACA,wBACA,6CACD;AAED,IAAMoQ,iBAAA,GAAkBpQ,aAAA,CAAc,CACpC;AAAA;AAEA,yBACD;AAEM,IAAMD,KAAA,GAAwB;EACnCmE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAmM,gBAAA;IACAlM,eAAA,EAAiB,CAAC,GAAGmM,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzFlM,qBAAA,EAAAmM,uBAAA;IACAlM,aAAA,EAAAmM,eAAA;IACAlM,eAAA,EAAAmM,iBAAA;IACAhM,gBAAA,EAAkBwL,UAAA;IAClBvL,iBAAA,EAAmBwL,WAAA;IACnBvL,qBAAA,EAAuBqL,WAAA;IAAA;IAAA;IAAA;IAAA;IAKvBpL,WAAA,EAAa,CAAC,MAAM,IAAI;IAAA;IAAA;IAGxBC,WAAA,EAAa,CACX;MAAEC,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,IAAI;IAAE,GACnC;MAAED,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC1D;IAAA;IAEAC,UAAA,EAAY,CAAC,OAAO;IACpBG,UAAA,EAAY;MAAEC,UAAA,EAAY;IAAK;IAC/BO,SAAA,EAAW,CACT,KACA,MACA,MACA,KACA;IAAA;IAEA,KACA,KACA;IAAA;IAAA;EAGJ;EACAE,aAAA,EAAe;IACbC,cAAA,EAAgB,CAAC,GAAGsK,wBAAA,EAAwB,GAAGC,uBAAqB;IACpEnM,qBAAA,EAAAmM;EACF;AACF;;;ACzKO,IAAMI,WAAA,GAAsB;AAAA;AAAA;AAGjC,yBACA,OACA,gBACA,SACA,aACA,YACA,eACA,OACA,OACA,SACA,UACA,OACA,OACA;AAAA;AAGA,aACA,eACA,OACA,cACA,QACA,mBACA,mBACA,gBACA,iCACA;AAAA;AAGA,UACA,YACA,cACA,kBACA,qBACA,mBACA,eACA,aACA,eACA,gBACA,iBACA,UACA,cACA;AAAA;AAGA,QACA,WACA,SACA,YACA,eACA;AAAA;AAGA,cACA,mBACA,gBACA,WACA,oBACA,oBACA,iBACA,gBACA,2BACA,wBACA,uBACA,oBACA,iBACA,gBACA,uBACA,aACA,mBACA,YACA,UACA,YACA,iBACA,cACA,kBACA,sBACA;AAAA;AAGA,iBACA,kBACA;AAAA;AAGA,cACA,iBACA,cACA,cACA,YACA;AAAA;AAGA,eACA,qBACA,oBACA,uBACA,WACA,YACA,gBACA,iBACA,YACA,YACA,sBACA,qBACA,2BACA,OACA,WACA,WACA,cACA,UACA,SACA,0BACA,gBACA,eACA,qBACA,kBACA,iBACA,oBACA,QACA,QACA,UACA,cACA,cACA;AAAA;AAGA,OACA,QACA,QACA,QACA,QACA,WACA,OACA,OACA,WACA,OACA,SACA,OACA,SACA,MACA,SACA,WACA,QACA,SACA,QACA,OACA,QACA,UACA,OACA,UACA,YACA,OACA;AAAA;AAGA,YACA,YACA,gBACA,gBACA,oBACA,cACA,YACA,kBACA,sBACA,SACA,WACA,WACA,aACA,aACA,gBACA,kBACA,qBACA,gBACA,kBACA,2BACA,2BACA,aACA,qBACA,iBACA,kBACA,qBACA,aACA,eACA,sBACA,kBACA,oBACA,oBACA,aACA,aACA,eACA,kBACA,kBACA,cACA,WACA,aACA;AAAA;AAGA,cACA,SACA,QACA,cACA;AAAA;AAGA,eACA,kBACA,gBACA,yBACA,gBACA,qBACA,aACA,iBACA,oBACA,iBACA,kBACA,eACA,cACA,cACA,gBACA,mBACA,YACA,cACA,aACA,eACA,eACA,QACA,WACA;AAAA;AAGA,SACA,aACA,UACA,aACA,cACA,UACA,QACA,OACA,SACA,SACA,YACA,aACA,WACA,aACA,WACA,SACA,SACA,WACA,SACA,OACA,cACA,iBACA,SACA,aACA,aACA,QACA,WACA;AAAA;AAGA,cACA,WACA,cACA,mBACA,cACA,eACA,mBACA,YACA,YACA,sBACA,gBACA,sBACA,0BACA,cACA,cACA,iBACA,gBACA,mBACA,kBACA,eACA,iBACA,sCACA,eACA,WACA,aACA,UACA,aACA,yBACA,SACA,mBACA,gBACA,mBACA;AAAA;AAGA,iBACA,cACA,UACA,aACA,eACA,mBACA,eACA,kBACA,gBACA,iBACA,WACA;AAAA;AAGA,mBACA,aACA,qBACA;AAAA;AAGA,YACA,SACF;;;ACjUO,IAAMC,UAAA,GAAqB;AAAA;AAAA;AAGhC,OACA,OACA,SACA,OACA,OACA,MACA,OACA,iBACA,UACA,SACA,WACA,SACA,UACA,QACA,MACA,WACA,SACA,cACA,SACA,aACA,YACA,WACA,UACA,UACA,WACA,cACA,YACA,iBACA,YACA,WACA,UACA,SACA,WACA,gBACA,gBACA,qBACA,gBACA,UACA,YACA,QACA,cACA,WACA,WACA,UACA,QACA,QACA,QACA,YACA,eACA,QACA,QACA,UACA,UACA,QACA,WACA,UACA,QACA,YACA,SACA,QACA,cACA,OACA,WACA,YACA,iBACA,QACA,QACA,YACA,QACA,SACA,SACA,UACA,YACA,YACA,eACA,mBACA,MACA,MACA,SACA,SACA,UACA,aACA,QACA,MACA,QACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,WACA,gBACA,OACA,QACA,UACA,MACA,OACA,WACA,MACA,QACA,kBACA,aACA,cACA,WACA,UACA,MACA,SACA,SACA,QACA,WACA,SACA,QACA,WACA,SACA,QACA,aACA,UACA,aACA,QACA,YACA,eACA,cACA,eACA,WACA,YACA,UACA,UACA,UACA,SACA,YACA,YACA,cACA,QACA,QACA,UACA,iBACA,UACA,0BACA,kCACA,2BACA,gBACA,OACA,WACA,YACA,QACA,cACA,eACA,SACA,eACA,YACA,QACA,MACA,OACA,QACA,eACA,WACA,YACA,eACA,WACA,SACA,UACA,WACA,UACA,cACA,OACA,QACA,UACA,QACA,WACA,SACA,SACA,QACA,gBACA;AAAA;AAEA,UACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAEjC,UACA,OACA,QACA,QACA,aACA,QACA,aACA,kBACA,OACA,WACA,UACA,SACA,OACA,WACA,YACA,SACA,WACA,YACA,aACA,QACA,YACA,QACA,aACA,aACA,UACF;;;AC7MA,IAAMC,gBAAA,GAAiBxQ,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAMyQ,iBAAA,GAAkBzQ,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,QACA,SACA,YACA,UACA,UACA,gBACA,YACA,UACA,wBACA,6BACA;AAAA;AAAA;AAGA,iBACA;AAAA;AAEA;AAAA;AAEA,gBACA,qDACA;AAAA;AAEA,uCACD;AAED,IAAM0Q,wBAAA,GAAyB1Q,aAAA,CAAc,CAAC,cAAc,CAAC;AAE7D,IAAM2Q,uBAAA,GAAwB3Q,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA,UACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,eACA,OACA,2BACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,kCACA,iBACA,aACA,iBACA,cACA,sBACA,qBACA,gBACA,iBACA,oBACA,cACA,eACA,YACA,kBACA,iBACA,sBACA,UACA,sBACA,qBACA,6BACA,4BACA,6BACA,mBACA,eACA,eACA,oBACA,uBACA,WACA,yBACA,qBACA,qBACA,2BACA,gBACA,YACA,cACA,0BACA,0BACA,YACA,gCACA,2BACA,iBACA,iCACA,8BACA,gBACA,aACA,cACA,qBACA,QACA,YACA,mBACA,kBACA,oBACA,YACA,sBACA,iBACA,cACA,wBACA,wBACA,qBACA,oBACA,0BACA,kBACA,gBACA,WACA,aACA,oBACA,kBACA,qBACA,YACA,0BACA,2BACA,SACA,aACA,mBACA,yBACA,SACA,YACA,gBACA,SACA,cACA,gBACA,qBACA,WACA,UACA,sBACA,WACA,mBACA,sBACA,aACA,sBACA,oBACA,aACA,6BACA,SACA,qBACA,WACA,0BACA,4BACA,qBACA,iBACA,WACA,wBACA,sBACA,qBACA,sBACA,sBACA,8BACA,sBACA,UACA,UACA,cACA,QACA,SACA,YACA,QACA,UACA,wBACA,mBACA,uBACA,QACA,8BACA,YACA,gBACA,8BACA,wBACA,eACA,WACA,sBACA,WACA,gBACA,iBACA,gBACA,aACA,iBACA,cACA,iBACA,sBACA,mBACA,kBACA,iBACA,WACA,SACA,kBACA,YACA,+BACA,WACA,QACA,qBACA,QACA,kBACA,cACA,aACA,wBACD;AAED,IAAM4Q,uBAAA,GAAwB5Q,aAAA,CAAc,CAAC,eAAe,UAAU,WAAW,CAAC;AAElF,IAAM6Q,eAAA,GAAgB7Q,aAAA,CAAc,CAClC,QACA,sCACA;AAAA;AAEA,wBACD;AAED,IAAM8Q,iBAAA,GAAkB9Q,aAAA,CAAc,CACpC,iDACA,yBACD;AAGM,IAAMF,WAAA,GAA8B;EACzCoE,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAA6M,gBAAA;IACA5M,eAAA,EAAiB,CAAC,GAAG6M,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzF5M,qBAAA,EAAA6M,uBAAA;IACA5M,aAAA,EAAA6M,eAAA;IACA5M,eAAA,EAAA6M,iBAAA;IACA1M,gBAAA,EAAkBkM,UAAA;IAClBjM,iBAAA,EAAmBkM,WAAA;IACnBjM,qBAAA,EAAuB+L,WAAA;IACvBjI,mBAAA,EAAqB;IACrB5D,WAAA,EAAa,CAAC;MAAEC,KAAA,EAAO;MAASC,QAAA,EAAU,CAAC,GAAG;IAAE,CAAC;IACjDE,UAAA,EAAY,CAAC,SAAS,IAAI;IAC1BC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAMC,IAAA,EAAM;IAAM;IACvCzC,UAAA,EAAY;MAAEE,KAAA,EAAO,CAAC,GAAG;MAAGC,MAAA,EAAQ,CAAC,GAAG;IAAE;IAC1CK,SAAA,EAAW,CACT,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,IACF;IACAwL,uBAAA,EAAyB,CAAC,IAAI;IAAA;EAEhC;EACAtL,aAAA,EAAe;IACb4G,oBAAA,EAAsB,CAAC,IAAI;IAC3B3G,cAAA,EAAgB,CAAC,GAAGgL,wBAAA,EAAwB,GAAGC,uBAAqB;IACpE7M,qBAAA,EAAA6M;EACF;AACF;;;AClRO,IAAMK,UAAA,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAMhC,OACA,OACA,SACA,WACA,OACA,MACA,OACA,cACA,UACA,WACA,WACA,QACA,MACA,QACA,WACA,QACA,UACA,SACA,WACA,UACA,aACA,cACA,YACA,WACA,UACA,SACA,gBACA,gBACA,qBACA,gBACA,UACA,YACA,aACA,YACA,mBACA,cACA,cACA,WACA,WACA,WACA,UACA,QACA,YACA,iBACA,YACA,eACA,OACA,QACA,QACA,QACA,QACA,UACA,YACA,WACA,UACA,UACA,QACA,WACA,cACA,SACA,SACA,OACA,SACA,uBACA,0BACA,WACA,QACA,QACA,YACA,SACA,SACA,UACA,wBACA,iBACA,oBACA,eACA,eACA,MACA,UACA,MACA,SACA,UACA,SACA,SACA,eACA,UACA,MACA,8BACA,aACA,YACA,QACA,WACA,QACA,OACA,QACA,QACA,WACA,SACA,QACA,QACA,SACA,SACA,QACA,aACA,kBACA,QACA,QACA,gBACA,SACA,YACA,SACA,sBACA,iBACA,OACA,YACA,WACA,oBACA,OACA,sBACA,oBACA,QACA,MACA,YACA,UACA,cACA,MACA,SACA,OACA,SACA,WACA,QACA,WACA,aACA,SACA,SACA,QACA,SACA,cACA,UACA,WACA,UACA,UACA,WACA,WACA,YACA,UACA,UACA,SACA,mBACA,mBACA,uBACA,SACA,UACA,WACA,sBACA,UACA,aACA,aACA,aACA,OACA,QACA,UACA,WACA,YACA,OACA,kBACA,qBACA,aACA,uBACA,gBACA,gBACA,kBACA,oBACA,YACA,cACA,iBACA,SACA,cACA,QACA,MACA,YACA,WACA,QACA,aACA,QACA,SACA,UACA,UACA,UACA,SACA,OACA,SACA,YACA,YACA,iBACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,UACA,SACA,OACA,cACA,WACF;AAEO,IAAMC,WAAA,GAAsB;AAAA;AAEjC,UACA,UACA,OACA,QACA,QACA,aACA,YACA,OACA,WACA,oBACA,UACA,QACA,SACA,SACA,UACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,YACA,YACA,cACA,aACA,cACA,aACA,iBACA,oBACA,WACA,aACA,QACA,YACA,QACA,QACA,aACA,YACA,WACA,YACA,YACA,aACA,WACA,gBACA,OACF;;;ACxQO,IAAMC,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBjC,OACA,QACA,WACA,WACA,eACA,eACA,aACA,yBACA,oCACA,iCACA,kCACA,+BACA,qBACA,SACA,QACA,QACA,SACA,OACA,OACA,UACA,WACA,aACA,UACA,WACA,QACA,QACA,WACA,QACA,oBACA,eACA,WACA,YACA,gBACA,aACA,WACA,UACA,aACA,iBACA,QACA,WACA,cACA,OACA,OACA,SACA,aACA,WACA,gBACA,gBACA,gBACA,qBACA,gBACA,WACA,YACA,QACA,YACA,YACA,eACA,YACA,cACA,OACA,WACA,cACA,aACA,aACA,UACA,WACA,WACA,cACA,OACA,eACA,OACA,sBACA,OACA,WACA,SACA,SACA,eACA,SACA,UACA,cACA,eACA,aACA,iBACA,kBACA,sBACA,sBACA,wBACA,sBACA,oBACA,uBACA,mBACA,6BACA,iBACA,qBACA,qBACA,mBACA,uBACA,mBACA,kBACA,4BACA,cACA,cACA,YACA,YACA,gBACA,OACA,aACA,QACA,eACA,MACA,UACA,aACA,aACA,cACA,cACA,WACA,UACA,SACA,YACA,MACA,WACA,YACA,8BACA,4BACA,8BACA,0BACA,wBACA,0BACA,mBACA,uBACA,qBACA,uBACA,uBACA,iBACA,eACA,mBACA,iBACA,mBACA,sBACA,oBACA,sBACA,OACA,YACA,cACA,SACA,QACA,SACA,QACA,UACA,QACA,MACA,aACA,kBACA,UACA,OACA,SACA,QACA,QACA,SACA,SACA,OACA,OACA,UACA,eACA,OACA,UACA,OACA,SACA,aACA,kBACA,OACA,OACA,aACA,SACA,UACA,gBACA,gBACA,mBACA,mBACA,MACA,SACA,YACA,OACA,SACA,WACA,SACA,WACA,QACA,QACA,UACA,UACA,WACA,WACA,SACA,SACA,SACA,aACA,cACA,QACA,SACA,UACA,UACA,eACA,QACA,QACA,WACA,QACA,OACA,SACA,SACA,WACA,eACA,mBACA,SACA,QACA,UACA,cACA,eACA,eACA,WACA,UACA,aACA,mBACA,OACA,YACA,OACA,QACA,YACA,eACA,eACA,aACA,gBACA,iBACA,eACA,aACA,WACA,WACA,WACA,aACA,cACA,gBACA,QACA,SACA,YACA,SACA,SACA,kBACA,aACA;AAAA;AAEA,YACA,YACA,iBACA,QACA,UACA,YACA,WACA,YACA,cACA,WACA,QACA,WACA,cACA,OACF;;;AClRA,IAAMC,gBAAA,GAAiBnR,aAAA,CAAc,CAAC,uCAAuC,CAAC;AAE9E,IAAMoR,iBAAA,GAAkBpR,aAAA,CAAc;AAAA;AAEpC,QACA,QACA,SACA,YACA,UACA,gBACA,YACA,SACA;AAAA;AAAA;AAGA,0BACA,UACA,kBACA;AAAA;AAEA;AAAA;AAEA,6DACA,0CACD;AAED,IAAMqR,wBAAA,GAAyBrR,aAAA,CAAc,CAC3C,qFACD;AAED,IAAMsR,uBAAA,GAAwBtR,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,wBACA,gBACA,8BACA,iBACA,mBACA,UACA;AAAA;AAEA;AAAA;AAEA,kBACA,YACA,4BACA,kBACA,kBACA,uBACA,cACA,cACA,iBACA,mBACA,eACA,mBACA,mBACA,UACA,wBACA,eACA,QACA,UACA,oBACA,6BACA,gCACA,uBACA,eACA,kBACA,0BACA,SACA,UACA,mBACA,gBACA,gBACA,eACA,oBACA,mBACA,wBACA,eACA,eACA,sBACA,YACA,mBACA,mBACA,iBACA,iBACA,cACA,aACA,iBACA,kBACA,sBACA,aACA,aACA,aACA,WACA,WACA,SACA,SACA,SACA,WACA,QACA,mBACA,mBACA,aACA,yBACA,YACA,4BACA,eACA,mBACA,kBACA,WACA,qBACA,wBACA,qBACA,qBACA,eACA,gBACA,WACA,sBACA,SACA,gBACA,iBACA,iBACA,eACA,WACA,oBACA,sBACA,UACA,YACA,yBACA,aACA,qBACA,oBACA,aACA,gBACA,sBACA,YACA,mBACA,QACA,sBACA,kBACA,gBACA,wBACA,wBACA,wBACA,yBACA,qBACA,oBACA,oBACA,kBACA,eACA,gBACA,eACA,sBACA,wBACA,eACA,cACA,sBACA,oBACA,gBACA,mBACA,uBACA,yBACA,oBACA,gBACA,iBACA,wBACA,uBACA,iBACA,cACA,oBACA,eACA,qBACA,eACA,kBACA,iBACA,YACA,qBACA,mBACA,2BACA,kBACA,iBACA,eACA,qBACA,0BACA,iBACA,gBACA,oBACA,cACA,iBACA,mBACA,iBACA,OACA;AAAA;AAEA,WACA,SACA,QACA,UACA,UACA,QACD;AAED,IAAMuR,uBAAA,GAAwBvR,aAAA,CAAc,CAC1C,0BACA,UACA,aACA,QACD;AAED,IAAMwR,eAAA,GAAgBxR,aAAA,CAAc,CAClC,QACA,sCACA,wBACA;AAAA;AAEA,gBACD;AAED,IAAMyR,iBAAA,GAAkBzR,aAAA,CAAc,CACpC,aACA,aACA,iBACA,0BACA,gBACD;AAEM,IAAMR,aAAA,GAAgC;EAC3C0E,IAAA,EAAM;EACNC,gBAAA,EAAkB;IAChBR,cAAA,EAAAwN,gBAAA;IACAvN,eAAA,EAAiB,CAAC,GAAGwN,iBAAA,EAAiB,GAAGC,wBAAA,EAAwB,GAAGC,uBAAqB;IACzFvN,qBAAA,EAAAwN,uBAAA;IACAvN,aAAA,EAAAwN,eAAA;IACAvN,eAAA,EAAAwN,iBAAA;IACArN,gBAAA,EAAkB4M,UAAA;IAClB3M,iBAAA,EAAmB4M,WAAA;IACnB3M,qBAAA,EAAuB4M,WAAA;IAAA;IAEvB1M,WAAA,EAAa,CACX,YACA,YACA;MAAEC,KAAA,EAAO;MAAUC,QAAA,EAAU,CAAC,KAAK,GAAG;MAAGC,aAAA,EAAe;IAAK,EAC/D;IACAC,UAAA,EAAY,CAAC,IAAI;IACjBC,UAAA,EAAY;MAAE0C,KAAA,EAAO;MAAKC,IAAA,EAAM;MAAKoC,oBAAA,EAAsB;IAAK;IAChEzE,aAAA,EAAe,CACb;MAAEC,KAAA,EAAO;IAAoB,GAC7B;MAAEX,KAAA,EAAO;MAAMC,QAAA,EAAU,CAAC,GAAG;MAAGC,aAAA,EAAe;IAAK,EACtD;IACAW,gBAAA,EAAkB,CAAC,MAAM,GAAG;IAC5BC,SAAA,EAAW,CACT,MACA,KACA,KACA,KACA,KACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,OACA,MACA,OACA;IAAA;IAAA,CACF;IACAC,WAAA,EAAAuD;EACF;EACAtD,aAAA,EAAe;IACb4G,oBAAA,EAAsB,CAAC,MAAM,OAAO,KAAK;IACzC3G,cAAA,EAAgB,CAAC,GAAG2L,wBAAA,EAAwB,GAAGC,uBAAqB;IACpExN,qBAAA,EAAAwN;EACF;AACF;;;AChSO,IAAMI,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBjC,OACA,QACA,SACA,cACA,kBACA,aACA,yBACA,qBACA,gCACA,6BACA,8BACA,gBACA,2BACA,wBACA,yBACA,6BACA,0BACA,aACA,gBACA,aACA,iBACA,mBACA,2BACA,kBACA,gBACA,sBACA,kBACA,iBACA,cACA,eACA,mBACA,mBACA,oBACA,kBACA,YACA,aACA,cACA,WACA,cACA,WACA,cACA,aACA,aACA,WACA,cACA,aACA,WACA,oBACA,oBACA,mBACA,SACA,QACA,SACA,QACA,SACA,SACA,qCACA,gCACA,OACA,wBACA,wBACA,iBACA,cACA,UACA,cACA,uBACA,wBACA,wBACA,gBACA,iBACA,UACA,SACA,aACA,gBACA,iBACA,UACA,cACA,WACA,eACA,WACA,UACA,cACA,WACA,eACA,yBACA,wBACA,QACA,QACA,QACA,QACA,aACA,cACA,aACA,OACA,QACA,YACA,WACA,aACA,wBACA,YACA,UACA,aACA,4BACA,0BACA,YACA,oBACA,gBACA,QACA,OACA,QACA,OACA,SACA,YACA,aACA,cACA,aACA,mBACA,2BACA,kBACA,oBACA,gBACA,sBACA,kBACA,gBACA,kBACA,mBACA,2BACA,mBACA,qBACA,uBACA,gBACA,qBACA,uBACA,gBACA,mBACA,qBACA,yBACA,4BACA,6BACA,oCACA,kCACA,mBACA,aACA,cACA,WACA,YACA,WACA,UACA,qBACA,qBACA,WACA,eACA,WACA,cACA,QACA,gBACA,WACA,eACA,YACA,cACA,OACA,gBACA,8BACA,wBACA,4CACA,WACA,+BACA,aACA,UACA,eACA,WACA,SACA,+BACA,aACA,OACA,qBACA,WACA,mBACA,yBACA,YACA,qBACA,qBACA,sBACA,UACA,YACA,yBACA,YACA,eACA,QACA,YACA,aACA,qBACA,qBACA,cACA,OACA,kBACA,eACA,gBACA,cACA,cACA,QACA,UACA,UACA,OACA,UACA,SACA,aACA,gBACA,WACA,UACA,gBACA,iBACA,YACA,aACA,cACA,WACA,cACA,WACA,iBACA,cACA,aACA,WACA,8BACA,cACA,iBACA,aACA,sBACA,WACA,oBACA,oBACA,mBACA,0BACA,0BACA,YACA,OACA,YACA,iBACA,oBACA,cACA,QACA,SACA,QACA,UACA,OACA,QACA,YACA,YACA,WACA,MACA,aACA,kBACA,OACA,iBACA,yBACA,SACA,QACA,SACA,qCACA,OACA,WACA,cACA,+BACA,sBACA,sBACA,UACA,OACA,OACA,WACA,mBACA,OACA,QACA,aACA,kBACA,YACA,UACA,aACA,SACA,UACA,cACA,OACA,QACA,cACA,oBACA,8BACA,iBACA,iBACA,eACA,eACA,gBACA,YACA,cACA,aACA,aACA,gBACA,mBACA,mBACA,MACA,sBACA,kBACA,qBACA,YACA,OACA,SACA,gBACA,8BACA,iBACA,4BACA,yBACA,8BACA,WACA,UACA,WACA,QACA,mBACA,UACA,gBACA,gBACA,eACA,kBACA,iBACA,qBACA,aACA,aACA,cACA,kBACA,WACA,cACA,YACA,YACA,YACA,aACA,aACA,UACA,WACA,qCACA,sCACA,6CACA,mCACA,6BACA,sBACA,eACA,WACA,SACA,SACA,SACA,cACA,QACA,SACA,mBACA,+BACA,QACA,QACA,QACA,QACA,2BACA,QACA,YACA,eACA,QACA,YACA,eACA,QACA,OACA,QACA,QACA,WACA,SACA,SACA,cACA,kBACA,QACA,UACA,WACA,aACA,aACA,gBACA,YACA,eACA,YACA,aACA,cACA,eACA,cACA,eACA,gBACA,aACA,iBACA,gBACA,eACA,eACA,cACA,eACA,eACA,sBACA,2BACA,uBACA,uBACA,cACA,sBACA,sBACA,wBACA,mBACA,iBACA,aACA,oBACA,iBACA,eACA,gBACA,YACA,kBACA,cACA,cACA,gBACA,gBACA,aACA,cACA,eACA,WACA,iBACA,oBACA,YACA,aACA,QACA,WACA,WACA,QACA,WACA,WACA,6CACA,+BACA,cACA,UACA,cACA,eACA,oBACA,UACA,yBACA,mBACA,UACA,aACA,OACA,WACA,wBACA,4BACA,gCACA,6CACA,wCACA,6BACA,uBACA,2BACA,iCACA,4BACA,iCACA,oCACA,oCACA,4CACA,yCACA,uCACA,wCACA,sCACA,6CACA,+BACA,4BACA,qCACA,4BACA,qCACA,iCACA,uCACA,0BACA,+CACA,iCACA,sCACA,kBACA,iCACA,oCACA,mCACA,uCACA,kCACA,uCACA,wCACA,4BACA,sBACA,6BACA,0CACA,2BACA,oCACA,qCACA,0BACA,iCACA,iBACA,8CACA,sCACA,eACA,oBACA,gCACA,kBACA,8BACA,+BACA,OACA,QACA,mBACA,gBACA,mBACA,cACA,WACA,YACA,wBACA,gBACA,iBACA,YACA,aACA,cACA,WACA,cACA,WACA,QACA,cACA,aACA,cACA,aACA,gBACA,eACA,WACA,aACA,WACA,QACA,gBACA,oBACA,oBACA,mBACA,cACA,UACA,aACA,QACA,YACA,SACA,SACA,4BACA,4BACA,YACA,yBACA,yBACA,kBACA,iBACA,kBACA,eACA,kBACA,iBACA,kBACA,iBACA,oBACA,mBACA,eACA,oBACA,wBACA,wBACA,uBACA,UACA,WACA,WACA,SACA,eACA,YACA,sBACA,WACA,YACA,YACA,iBACA,gBACA,0BACA,8BACA,gBACA,UACA,QACA,cACA,iBACA,OACA,cACA,aACA,gBACA,aACA,QACA,QACA,cACA,WACA,SACA,WACA,cACA,OACF;;;AC/lBO,IAAMC,UAAA,GAAqB;AAAA;AAAA;AAAA;AAIhC,WACA,OACA,SACA,OACA,OACA,MACA,WACA,MACA,QACA,QACA,SACA,UACA,WACA,cACA,cACA,UACA,SACA,WACA,gBACA,gBACA,qBACA,gBACA,YACA,UACA,YACA,QACA,QACA,UACA,SACA,aACA,OACA,QACA,QACA,SACA,SACA,aACA,UACA,SACA,MACA,aACA,SACA,UACA,aACA,QACA,MACA,SACA,QACA,WACA,QACA,QACA,aACA,kBACA,SACA,WACA,OACA,QACA,MACA,MACA,MACA,SACA,gBACA,WACA,UACA,UACA,SACA,SACA,OACA,QACA,UACA,UACA,UACA,OACA,QACA,SACA,SACA,eACA,QACA,MACA,WACA,QACA,YACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,YACA,SACA;AAAA;AAGA,UACF;AAEO,IAAMC,WAAA,GAAsB,CACjC,UACA,WACA,WACA,OACA,WACA,UACA,YACA,WACA,WACA,SACA,UACA,UACA,UACA,oBACA,QACA,WACA,QACA,aACA,UACA,QACA,UACA,aACA,WACA,QACA,YACA,QACA,aACA,iBACA,iBACA,aACA,gBACA,WACA,UACA,SACA,aACA,WACF;;;ACpIA,IAAMC,gBAAA,GAAiB7R,aAAA,CAAc,CAAC,yBAAyB,CAAC;AAEhE,IAAM8R,iBAAA,GAAkB9R,aAAA,CAAc;AAAA;AAEpC,oBACA,QACA,SACA,YACA,UACA,gBACA,YACA,WACA,SACA,UACA;AAAA;AAAA;AAGA,sDACA,sBACA;AAAA;AAEA,OAEA,cACA,qDACA,eACA,kBACA,cACA,sBACA,8BACA,+BACD;AAED,IAAM+R,wBAAA,GAAyB/R,aAAA,CAAc,CAC3C,wDACA,8EACD;AAED,IAAMgS,uBAAA,GAAwBhS,aAAA,CAAc;AAAA;AAE1C;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA,2BACA,aACA,aACA,gCACA,uBACA,gBACA,iBACA,6BACA,iBACA,8CACA,qBACA,oCACA;AAAA;AACA,kCACA,gCACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,iBACA,yBACA,oBACA,kBACA,wBACA,wBACA,qBACA,kBACA,qBACA,wBACA,2BACA,wBACA,kCACA,cACA,mBACA,2BACA,0BACA,cACA,2BACA,gBACA,8BACA,kBACA,iBACA,wBACA,eACA,eACA,6BACA,gBACA,aACA,cACA,cACA,cACA,mBACA,SACA,QACA,UACA,aACA,kBACA,0BACA,qBACA,mBACA,4BACA,yBACA,yBACA,sBACA,mBACA,sBACA,0BACA,yBACA,4BACA,yBACA,mCACA,eACA,oBACA,4BACA,2BACA,eACA,4BACA,iBACA,+BACA,mBACA,yBACA,gBACA,gBACA,8BACA,iBACA,cACA,eACA,eACA,oBACA,UACA,qBACA,2BACA,wBACA,qBACA,wBACA,2BACA,8BACA,2BACA,iBACA,sBACA,mBACA,8BACA,mBACA,qBACA,2BACA,kBACA,kBACA,mBACA,kBACA,iBACA,wBACA,iBACA,iBACA,sBACA,mBACA,iBACA,uBACA,uBACA,oBACA,iBACA,oBACA,wBACA,uBACA,0BACA,uBACA,aACA,kBACA,0BACA,yBACA,aACA,0BACA,eACA,iBACA,uBACA,cACA,cACA,eACA,YACA,aACA,aACA,aACA,kBACA,qBACA,gBACA,WACA,OACA,mBACA,cACA,UACA,QACA,SACA,OACA,UACA,eACA,YACA,gBACA,oBACA,kBACA,oCACA,uCACA,iCACA,2BACA,wBACA,wBACA,qBACA,kBACA,wBACA,eACA,qBACA,cACA,yBACA,yBACA,2BACA,yBACA,gBACA,8BACA,mBACA,cACA,qBACA,mBACA,gBACA,6BA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}